"use strict";export const validateClubCreate = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/clubCreate","description":"The details of the new club","type":"object","additionalProperties":false,"properties":{"id":{"description":"An ID for the club, e.g. 'CLUB1'.  This must be unique within the competition.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"name":{"description":"The name for the club","type":"string","minLength":1,"maxLength":1000},"notes":{"description":"Free form string to add notes about a club.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}},"required":["name"]};const func2 = require("ajv/dist/runtime/ucs2length").default;const pattern0 = new RegExp("^((?![\":{}?=])[\\x20-\\x7F])+$", "u");function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/clubCreate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.name === undefined) && (missing0 = "name")){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((key0 === "id") || (key0 === "name")) || (key0 === "notes"))){validate10.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 100){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data0) < 1){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data0)){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) > 1000){validate10.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data1) < 1){validate10.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate10.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data2 = data.notes;const _errs6 = errors;if(errors === _errs6){if(typeof data2 === "string"){if(func2(data2) < 1){validate10.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;}export const validateClubUpdate = validate11;const schema12 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/clubUpdate","description":"Details on a club","type":"object","additionalProperties":false,"properties":{"name":{"description":"The name for the club","type":"string","minLength":1,"maxLength":1000},"notes":{"description":"Free form string to add notes about a club.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}}};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/clubUpdate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((key0 === "name") || (key0 === "notes"))){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){let data0 = data.name;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 1000){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data0) < 1){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data1 = data.notes;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) < 1){validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate11.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}export const validateContactCreate = validate12;const schema13 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/contactCreate","description":"The details of the new contact","type":"object","additionalProperties":false,"properties":{"id":{"description":"A unique ID for this contact, e.g. 'TM1Contact1'.  This must be unique within the team.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"name":{"description":"The name for the contact","type":"string","minLength":1,"maxLength":1000},"roles":{"description":"The roles of this contact within the team","type":"array","minItems":1,"uniqueItems":true,"items":{"description":"A role of this contact","type":"string","default":"secretary","enum":["secretary","treasurer","manager","captain","coach","assistantCoach","medic"]}},"emails":{"description":"The email addresses for this contact","type":"array","minItems":1,"uniqueItems":true,"items":{"description":"An email address for this contact","type":"string","format":"email","minLength":3}},"phones":{"description":"The telephone numbers for this contact","type":"array","minItems":1,"uniqueItems":true,"items":{"description":"A telephone number for this contact","type":"string","minLength":1,"maxLength":50}}},"required":["roles"]};const formats0 = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/contactCreate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.roles === undefined) && (missing0 = "roles")){validate12.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((((key0 === "id") || (key0 === "name")) || (key0 === "roles")) || (key0 === "emails")) || (key0 === "phones"))){validate12.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 100){validate12.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data0) < 1){validate12.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data0)){validate12.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate12.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) > 1000){validate12.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data1) < 1){validate12.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate12.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.roles !== undefined){let data2 = data.roles;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data2)){if(data2.length < 1){validate12.errors = [{instancePath:instancePath+"/roles",schemaPath:"#/properties/roles/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid1 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs8 = errors;if(typeof data3 !== "string"){validate12.errors = [{instancePath:instancePath+"/roles/" + i0,schemaPath:"#/properties/roles/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(((((((data3 === "secretary") || (data3 === "treasurer")) || (data3 === "manager")) || (data3 === "captain")) || (data3 === "coach")) || (data3 === "assistantCoach")) || (data3 === "medic"))){validate12.errors = [{instancePath:instancePath+"/roles/" + i0,schemaPath:"#/properties/roles/items/enum",keyword:"enum",params:{allowedValues: schema13.properties.roles.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs8 === errors;if(!valid1){break;}}if(valid1){let i1 = data2.length;let j0;if(i1 > 1){const indices0 = {};for(;i1--;){let item0 = data2[i1];if(typeof item0 !== "string"){continue;}if(typeof indices0[item0] == "number"){j0 = indices0[item0];validate12.errors = [{instancePath:instancePath+"/roles",schemaPath:"#/properties/roles/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"}];return false;break;}indices0[item0] = i1;}}}}}else {validate12.errors = [{instancePath:instancePath+"/roles",schemaPath:"#/properties/roles/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.emails !== undefined){let data4 = data.emails;const _errs10 = errors;if(errors === _errs10){if(Array.isArray(data4)){if(data4.length < 1){validate12.errors = [{instancePath:instancePath+"/emails",schemaPath:"#/properties/emails/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid3 = true;const len1 = data4.length;for(let i2=0; i2<len1; i2++){let data5 = data4[i2];const _errs12 = errors;if(errors === _errs12){if(errors === _errs12){if(typeof data5 === "string"){if(func2(data5) < 3){validate12.errors = [{instancePath:instancePath+"/emails/" + i2,schemaPath:"#/properties/emails/items/minLength",keyword:"minLength",params:{limit: 3},message:"must NOT have fewer than 3 characters"}];return false;}else {if(!(formats0.test(data5))){validate12.errors = [{instancePath:instancePath+"/emails/" + i2,schemaPath:"#/properties/emails/items/format",keyword:"format",params:{format: "email"},message:"must match format \""+"email"+"\""}];return false;}}}else {validate12.errors = [{instancePath:instancePath+"/emails/" + i2,schemaPath:"#/properties/emails/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid3 = _errs12 === errors;if(!valid3){break;}}if(valid3){let i3 = data4.length;let j1;if(i3 > 1){const indices1 = {};for(;i3--;){let item1 = data4[i3];if(typeof item1 !== "string"){continue;}if(typeof indices1[item1] == "number"){j1 = indices1[item1];validate12.errors = [{instancePath:instancePath+"/emails",schemaPath:"#/properties/emails/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i3+" are identical)"}];return false;break;}indices1[item1] = i3;}}}}}else {validate12.errors = [{instancePath:instancePath+"/emails",schemaPath:"#/properties/emails/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.phones !== undefined){let data6 = data.phones;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data6)){if(data6.length < 1){validate12.errors = [{instancePath:instancePath+"/phones",schemaPath:"#/properties/phones/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid5 = true;const len2 = data6.length;for(let i4=0; i4<len2; i4++){let data7 = data6[i4];const _errs16 = errors;if(errors === _errs16){if(typeof data7 === "string"){if(func2(data7) > 50){validate12.errors = [{instancePath:instancePath+"/phones/" + i4,schemaPath:"#/properties/phones/items/maxLength",keyword:"maxLength",params:{limit: 50},message:"must NOT have more than 50 characters"}];return false;}else {if(func2(data7) < 1){validate12.errors = [{instancePath:instancePath+"/phones/" + i4,schemaPath:"#/properties/phones/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate12.errors = [{instancePath:instancePath+"/phones/" + i4,schemaPath:"#/properties/phones/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid5 = _errs16 === errors;if(!valid5){break;}}if(valid5){let i5 = data6.length;let j2;if(i5 > 1){const indices2 = {};for(;i5--;){let item2 = data6[i5];if(typeof item2 !== "string"){continue;}if(typeof indices2[item2] == "number"){j2 = indices2[item2];validate12.errors = [{instancePath:instancePath+"/phones",schemaPath:"#/properties/phones/uniqueItems",keyword:"uniqueItems",params:{i: i5, j: j2},message:"must NOT have duplicate items (items ## "+j2+" and "+i5+" are identical)"}];return false;break;}indices2[item2] = i5;}}}}}else {validate12.errors = [{instancePath:instancePath+"/phones",schemaPath:"#/properties/phones/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}}}}}}}}else {validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate12.errors = vErrors;return errors === 0;}export const validateContactUpdate = validate13;const schema14 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/contactUpdate","description":"Details on a contact","type":"object","additionalProperties":false,"properties":{"name":{"description":"The name for the contact","type":"string","minLength":1,"maxLength":1000},"roles":{"description":"The roles of this contact within the team","type":"array","minItems":1,"uniqueItems":true,"items":{"description":"A role of this contact","type":"string","default":"secretary","enum":["secretary","treasurer","manager","captain","coach","assistantCoach","medic"]}},"emails":{"description":"The email addresses for this contact","type":"array","minItems":1,"uniqueItems":true,"items":{"description":"An email address for this contact","type":"string","format":"email","minLength":3}},"phones":{"description":"The telephone numbers for this contact","type":"array","minItems":1,"uniqueItems":true,"items":{"description":"A telephone number for this contact","type":"string","minLength":1,"maxLength":50}}}};function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/contactUpdate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((((key0 === "name") || (key0 === "roles")) || (key0 === "emails")) || (key0 === "phones"))){validate13.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){let data0 = data.name;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 1000){validate13.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data0) < 1){validate13.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate13.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.roles !== undefined){let data1 = data.roles;const _errs4 = errors;if(errors === _errs4){if(Array.isArray(data1)){if(data1.length < 1){validate13.errors = [{instancePath:instancePath+"/roles",schemaPath:"#/properties/roles/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs6 = errors;if(typeof data2 !== "string"){validate13.errors = [{instancePath:instancePath+"/roles/" + i0,schemaPath:"#/properties/roles/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(((((((data2 === "secretary") || (data2 === "treasurer")) || (data2 === "manager")) || (data2 === "captain")) || (data2 === "coach")) || (data2 === "assistantCoach")) || (data2 === "medic"))){validate13.errors = [{instancePath:instancePath+"/roles/" + i0,schemaPath:"#/properties/roles/items/enum",keyword:"enum",params:{allowedValues: schema14.properties.roles.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid1 = _errs6 === errors;if(!valid1){break;}}if(valid1){let i1 = data1.length;let j0;if(i1 > 1){const indices0 = {};for(;i1--;){let item0 = data1[i1];if(typeof item0 !== "string"){continue;}if(typeof indices0[item0] == "number"){j0 = indices0[item0];validate13.errors = [{instancePath:instancePath+"/roles",schemaPath:"#/properties/roles/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"}];return false;break;}indices0[item0] = i1;}}}}}else {validate13.errors = [{instancePath:instancePath+"/roles",schemaPath:"#/properties/roles/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.emails !== undefined){let data3 = data.emails;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data3)){if(data3.length < 1){validate13.errors = [{instancePath:instancePath+"/emails",schemaPath:"#/properties/emails/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid3 = true;const len1 = data3.length;for(let i2=0; i2<len1; i2++){let data4 = data3[i2];const _errs10 = errors;if(errors === _errs10){if(errors === _errs10){if(typeof data4 === "string"){if(func2(data4) < 3){validate13.errors = [{instancePath:instancePath+"/emails/" + i2,schemaPath:"#/properties/emails/items/minLength",keyword:"minLength",params:{limit: 3},message:"must NOT have fewer than 3 characters"}];return false;}else {if(!(formats0.test(data4))){validate13.errors = [{instancePath:instancePath+"/emails/" + i2,schemaPath:"#/properties/emails/items/format",keyword:"format",params:{format: "email"},message:"must match format \""+"email"+"\""}];return false;}}}else {validate13.errors = [{instancePath:instancePath+"/emails/" + i2,schemaPath:"#/properties/emails/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid3 = _errs10 === errors;if(!valid3){break;}}if(valid3){let i3 = data3.length;let j1;if(i3 > 1){const indices1 = {};for(;i3--;){let item1 = data3[i3];if(typeof item1 !== "string"){continue;}if(typeof indices1[item1] == "number"){j1 = indices1[item1];validate13.errors = [{instancePath:instancePath+"/emails",schemaPath:"#/properties/emails/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i3+" are identical)"}];return false;break;}indices1[item1] = i3;}}}}}else {validate13.errors = [{instancePath:instancePath+"/emails",schemaPath:"#/properties/emails/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.phones !== undefined){let data5 = data.phones;const _errs12 = errors;if(errors === _errs12){if(Array.isArray(data5)){if(data5.length < 1){validate13.errors = [{instancePath:instancePath+"/phones",schemaPath:"#/properties/phones/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid5 = true;const len2 = data5.length;for(let i4=0; i4<len2; i4++){let data6 = data5[i4];const _errs14 = errors;if(errors === _errs14){if(typeof data6 === "string"){if(func2(data6) > 50){validate13.errors = [{instancePath:instancePath+"/phones/" + i4,schemaPath:"#/properties/phones/items/maxLength",keyword:"maxLength",params:{limit: 50},message:"must NOT have more than 50 characters"}];return false;}else {if(func2(data6) < 1){validate13.errors = [{instancePath:instancePath+"/phones/" + i4,schemaPath:"#/properties/phones/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate13.errors = [{instancePath:instancePath+"/phones/" + i4,schemaPath:"#/properties/phones/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid5 = _errs14 === errors;if(!valid5){break;}}if(valid5){let i5 = data5.length;let j2;if(i5 > 1){const indices2 = {};for(;i5--;){let item2 = data5[i5];if(typeof item2 !== "string"){continue;}if(typeof indices2[item2] == "number"){j2 = indices2[item2];validate13.errors = [{instancePath:instancePath+"/phones",schemaPath:"#/properties/phones/uniqueItems",keyword:"uniqueItems",params:{i: i5, j: j2},message:"must NOT have duplicate items (items ## "+j2+" and "+i5+" are identical)"}];return false;break;}indices2[item2] = i5;}}}}}else {validate13.errors = [{instancePath:instancePath+"/phones",schemaPath:"#/properties/phones/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate13.errors = vErrors;return errors === 0;}export const validateGroupAppend = validate14;const schema15 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/groupAppend","description":"A single competition group","type":"object","additionalProperties":false,"properties":{"id":{"description":"A unique ID for this group, e.g. 'P1'.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"name":{"description":"Descriptive title for the group, e.g. 'Pool 1'","type":"string","minLength":1,"maxLength":1000},"notes":{"description":"Free form string to add notes about this group.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"description":{"description":"An array of string values as a verbose description of the nature of the group, e.g. 'For the pool stage, teams will play each other once, with the top 2 teams going through to....'","type":"array","items":{"description":"A part of the description of this stage","type":"string","minLength":1}},"type":{"description":"The type of competition applying to this group, which may dictate how the results are processed.  If this has the value 'league' then the property 'league' must be defined","type":"string","enum":["league","crossover","knockout"]},"knockout":{"description":"Configuration for the knockout group","type":"object","additionalProperties":false,"properties":{"standing":{"description":"Configuration for the knockout group","type":"array","items":{"description":"An ordered mapping from a position to a team ID","type":"object","additionalProperties":false,"properties":{"position":{"description":"The text description of the position, e.g. \"1st\", \"2nd\".  Having this field allows multiple teams to have the same \"position\", for example if there are no play-off games then two entries can have the value \"3rd\"","type":"string","minLength":1},"id":{"description":"The identifier for the team.  This must be a team reference (see the documentation), for example for the team in \"1st\", this would refer to the winner of the final in this stage->group","type":"string","minLength":1}},"required":["position","id"]},"minItems":1}},"required":["standing"]},"league":{"description":"Configuration for the league","type":"object","additionalProperties":false,"properties":{"ordering":{"description":"An array of parameters that define how the league positions are worked out, where the array position determines the precedence of that parameter, e.g. [ \"PTS\", \"SD\" ] means that league position is determined by league points, with ties decided by set difference.  Valid parameters are 'PTS'=league points, 'WINS'=wins, 'LOSSES'=losses, 'H2H'=head to head, PF'=points for, 'PA'=points against, 'PD'=points difference, 'SF'=sets for, 'SA'=sets against, 'SD'=set difference, 'BP'=bonus points, 'PP'=penalty points.  When comparing teams, a higher value for a parameter results in a higher league position except when comparing 'LOSSES', 'PA', 'SA', and 'PP' (where a lower value results in a higher league position).  Note that 'H2H' only considers wins and losses between two teams; this means that, depending on whether draws are allowed or whether teams play each other multiple times, the head to head comparison may not be able to distinguish between two teams","type":"array","items":{"description":"A parameter that defines the league position","type":"string","enum":["PTS","WINS","LOSSES","H2H","PF","PA","PD","SF","SA","SD","BP","PP"]},"minItems":1},"points":{"description":"Properties defining how to calculate the league points based on match results","type":"object","additionalProperties":false,"properties":{"played":{"description":"Number of league points for playing the match.  Note that a forfeit counts as a \"played\" match, so if this has a non-zero value and the desire is for a forfeit to yield zero points then the \"forfeit\" value should be set to the same as this value","type":"integer","default":0},"perSet":{"description":"Number of league points for each set won","type":"integer","default":0},"win":{"description":"Number of league points for winning (by 2 sets or more if playing sets)","type":"integer","default":3},"winByOne":{"description":"Number of league points for winning by 1 set","type":"integer","default":0},"lose":{"description":"Number of league points for losing (by 2 sets or more if playing sets)","type":"integer","default":0},"loseByOne":{"description":"Number of league points for losing by 1 set","type":"integer","default":0},"forfeit":{"description":"Number of league penalty points for forfeiting a match.  This should be a positive number and will be subtracted from a team's league points for each forfeited match","type":"integer","default":0}}}},"required":["ordering","points"]},"matchType":{"description":"Are the matches played in sets or continuous points.  If this has the value 'sets' then the property 'sets' must be defined","type":"string","enum":["sets","continuous"]},"sets":{"description":"Configuration defining the nature of a set","type":"object","additionalProperties":false,"properties":{"maxSets":{"description":"The maximum number of sets that could be played, often known as 'best of', e.g. if this has the value '5' then the match is played as 'best of 5 sets'","type":"integer","default":5,"minimum":1},"setsToWin":{"description":"The number of sets that must be won to win the match.  This is usually one more than half the 'maxSets', but may be needed if draws are allowed, e.g. if a competition dictates that exactly 2 sets must be played (by setting 'maxSets' to '2') and that draws are allowed, then 'setsToWin' should still be set to '2' to indicate that 2 sets are needed to win the match","type":"integer","default":3,"minimum":1},"clearPoints":{"description":"The number of points lead that the winning team must have, e.g. if this has the value '2' then teams must 'win by 2 clear points'.  Note that if 'maxPoints' has a value then that takes precedence, i.e. if 'maxPoints' is set to '35' then a team can win '35-34' irrespective of the value of 'clearPoints'","type":"integer","default":2,"minimum":1},"minPoints":{"description":"The minimum number of points that either team must score for a set to count as valid.  Usually only used for time-limited matches","type":"integer","default":1,"minimum":1},"pointsToWin":{"description":"The minimum number of points required to win all but the last set","type":"integer","default":25,"minimum":1},"lastSetPointsToWin":{"description":"The minimum number of points required to win the last set","type":"integer","default":15,"minimum":1},"maxPoints":{"description":"The upper limit of points that can be scored in a set","type":"integer","default":1000,"minimum":1},"lastSetMaxPoints":{"description":"The upper limit of points that can be scored in the last set","type":"integer","default":1000,"minimum":1}}},"drawsAllowed":{"description":"Sets whether drawn matches are allowed","default":false,"type":"boolean"},"matches":{"$ref":"#/$defs/matches"}},"allOf":[{"if":{"properties":{"type":{"const":"league"}},"required":["type"]},"then":{"required":["league"]}},{"if":{"properties":{"type":{"const":"crossover"}},"required":["type"]},"then":{"anyOf":[{"properties":{"drawsAllowed":{"enum":[false]}}},{"not":{"required":["drawsAllowed"]}}]}},{"if":{"properties":{"type":{"const":"knockout"}},"required":["type"]},"then":{"anyOf":[{"properties":{"drawsAllowed":{"enum":[false]}}},{"not":{"required":["drawsAllowed"]}}]}},{"if":{"properties":{"matchType":{"const":"continuous"}},"required":["matchType"]},"then":{"properties":{"matches":{"type":"array","items":{"type":"object","properties":{"homeTeam":{"type":"object","properties":{"scores":{"type":"array","maxItems":1}}},"awayTeam":{"type":"object","properties":{"scores":{"type":"array","maxItems":1}}}}}}},"allOf":[{"not":{"required":["sets"]}}]}},{"if":{"properties":{"matchType":{"const":"continuous"}},"required":["matchType"]},"then":{"allOf":[{"not":{"required":["sets"]}}]}},{"if":{"properties":{"matchType":{"const":"continuous"},"matches":{"type":"array","items":{"type":"object","properties":{"type":{"const":"match"}}}}},"required":["matchType"]},"then":{"properties":{"matches":{"type":"array","items":{"type":"object","required":["complete"]}}}}}],"required":["type","matchType","matches"],"$defs":{"team":{"description":"A team playing in the match","type":"object","additionalProperties":false,"properties":{"id":{"description":"The identifier for the team.  This can either be a team ID or a team reference (see the documentation)","type":"string","minLength":1,"maxLength":1000},"scores":{"description":"The array of set scores.  If the matchType is 'continuous' then only the first value in the array is used","type":"array","items":{"description":"The set score","type":"integer","minimum":0}},"mvp":{"description":"This team's most valuable player award.  This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1},"forfeit":{"description":"Did this team forfeit the match","type":"boolean","default":false},"bonusPoints":{"description":"Does this team get any bonus points in the league.  This is separate from any league points calculated from the match result, and is added to their league points","type":"integer","default":0,"minimum":0},"penaltyPoints":{"description":"Does this team receive any penalty points in the league.  This is separate from any league points calculated from the match result, and is subtracted from their league points","type":"integer","default":0,"minimum":0},"notes":{"description":"Free form string to add notes about the team relating to this match.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"players":{"description":"The list of players from this team that played in this match.  This can be either a player's name or a reference to a player ID","type":"array","items":{"description":"Either the name of the player or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  Not all entries need to be references, meaning that the document can allow a mix of registered players with a player ID, and unregistered players indicated just by name","type":"string","minLength":1}}},"required":["id","scores"]},"matches":{"description":"An array of matches (or breaks in play) in this group.  Note that a team ID and each unique team references can ony appear in one group, i.e. a team cannot play in multiple groups in a stage; if they did then those two groups would technically be the same group","type":"array","items":{"oneOf":[{"description":"A match between two teams","type":"object","additionalProperties":false,"properties":{"id":{"description":"An identifier for this match, i.e. a match number.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"court":{"description":"The court that a match takes place on","type":"string","minLength":1,"maxLength":1000},"venue":{"description":"The venue that a match takes place at","type":"string","minLength":1,"maxLength":10000},"type":{"description":"The type of match, i.e. 'match'","type":"string","enum":["match"]},"date":{"description":"The date of the match in the format YYYY-MM-DD","type":"string","format":"date"},"warmup":{"description":"The start time for the warmup in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"start":{"description":"The start time for the match in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"duration":{"description":"The maximum duration of the match in the format HH:mm","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"complete":{"description":"Whether the match is complete.  This must be set when a match has a \"duration\" or when the matchType is \"continuous\".  What about a \"continuous\" match with no \"duration\" and a target score?  This can be represented by a \"sets\" match with \"maxSets\" = 1","type":"boolean"},"homeTeam":{"$ref":"#/$defs/team","description":"The 'home' team for the match"},"awayTeam":{"$ref":"#/$defs/team","description":"The 'away' team for the match"},"officials":{"oneOf":[{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to referee the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]},{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"first":{"description":"The first referee","type":"string","minLength":1},"second":{"description":"The second referee","type":"string","minLength":1},"challenge":{"description":"The challenge referee, responsible for resolving challenges from the teams","type":"string","minLength":1},"assistantChallenge":{"description":"The assistant challenge referee, who assists the challenge referee","type":"string","minLength":1},"reserve":{"description":"The reserve referee","type":"string","minLength":1},"scorer":{"description":"The scorer","type":"string","minLength":1},"assistantScorer":{"description":"The assistant scorer","type":"string","minLength":1},"linespersons":{"description":"The list of linespersons","type":"array","maxItems":4,"items":{"description":"A linesperson","type":"string","minLength":1}},"ballCrew":{"description":"The list of people in charge of managing the game balls","type":"array","maxItems":100,"items":{"description":"A ball person","type":"string","minLength":1}}},"required":["first"]}]},"mvp":{"description":"A most valuable player award for the match. This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1,"maxLength":203},"manager":{"oneOf":[{"description":"The court manager in charge of this match","type":"string","minLength":1,"maxLength":1000},{"description":"The court managers for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to manage the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]}]},"friendly":{"description":"Whether the match is a friendly.  These matches do not contribute toward a league position.  If a team only participates in friendly matches then they are not included in the league table at all","type":"boolean","default":false},"notes":{"description":"Free form string to add notes about a match","type":"string","minLength":1}},"dependencies":{"duration":["complete"]},"required":["id","type","homeTeam","awayTeam"]},{"description":"A break in play, possibly while other matches are going on in other competitions running in parallel","type":"object","additionalProperties":false,"properties":{"type":{"description":"The type of match, i.e. 'break'","type":"string","enum":["break"]},"start":{"description":"The start time for the break in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"date":{"description":"The date of the break in the format YYYY-MM-DD","type":"string","format":"date"},"duration":{"description":"The duration of the break","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"name":{"description":"The name for the break, e.g. 'Lunch break'","default":"Break","type":"string","minLength":1,"maxLength":1000}},"required":["type"]}]}}}};const func22 = Object.prototype.hasOwnProperty;const schema16 = {"description":"An array of matches (or breaks in play) in this group.  Note that a team ID and each unique team references can ony appear in one group, i.e. a team cannot play in multiple groups in a stage; if they did then those two groups would technically be the same group","type":"array","items":{"oneOf":[{"description":"A match between two teams","type":"object","additionalProperties":false,"properties":{"id":{"description":"An identifier for this match, i.e. a match number.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"court":{"description":"The court that a match takes place on","type":"string","minLength":1,"maxLength":1000},"venue":{"description":"The venue that a match takes place at","type":"string","minLength":1,"maxLength":10000},"type":{"description":"The type of match, i.e. 'match'","type":"string","enum":["match"]},"date":{"description":"The date of the match in the format YYYY-MM-DD","type":"string","format":"date"},"warmup":{"description":"The start time for the warmup in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"start":{"description":"The start time for the match in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"duration":{"description":"The maximum duration of the match in the format HH:mm","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"complete":{"description":"Whether the match is complete.  This must be set when a match has a \"duration\" or when the matchType is \"continuous\".  What about a \"continuous\" match with no \"duration\" and a target score?  This can be represented by a \"sets\" match with \"maxSets\" = 1","type":"boolean"},"homeTeam":{"$ref":"#/$defs/team","description":"The 'home' team for the match"},"awayTeam":{"$ref":"#/$defs/team","description":"The 'away' team for the match"},"officials":{"oneOf":[{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to referee the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]},{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"first":{"description":"The first referee","type":"string","minLength":1},"second":{"description":"The second referee","type":"string","minLength":1},"challenge":{"description":"The challenge referee, responsible for resolving challenges from the teams","type":"string","minLength":1},"assistantChallenge":{"description":"The assistant challenge referee, who assists the challenge referee","type":"string","minLength":1},"reserve":{"description":"The reserve referee","type":"string","minLength":1},"scorer":{"description":"The scorer","type":"string","minLength":1},"assistantScorer":{"description":"The assistant scorer","type":"string","minLength":1},"linespersons":{"description":"The list of linespersons","type":"array","maxItems":4,"items":{"description":"A linesperson","type":"string","minLength":1}},"ballCrew":{"description":"The list of people in charge of managing the game balls","type":"array","maxItems":100,"items":{"description":"A ball person","type":"string","minLength":1}}},"required":["first"]}]},"mvp":{"description":"A most valuable player award for the match. This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1,"maxLength":203},"manager":{"oneOf":[{"description":"The court manager in charge of this match","type":"string","minLength":1,"maxLength":1000},{"description":"The court managers for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to manage the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]}]},"friendly":{"description":"Whether the match is a friendly.  These matches do not contribute toward a league position.  If a team only participates in friendly matches then they are not included in the league table at all","type":"boolean","default":false},"notes":{"description":"Free form string to add notes about a match","type":"string","minLength":1}},"dependencies":{"duration":["complete"]},"required":["id","type","homeTeam","awayTeam"]},{"description":"A break in play, possibly while other matches are going on in other competitions running in parallel","type":"object","additionalProperties":false,"properties":{"type":{"description":"The type of match, i.e. 'break'","type":"string","enum":["break"]},"start":{"description":"The start time for the break in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"date":{"description":"The date of the break in the format YYYY-MM-DD","type":"string","format":"date"},"duration":{"description":"The duration of the break","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"name":{"description":"The name for the break, e.g. 'Lunch break'","default":"Break","type":"string","minLength":1,"maxLength":1000}},"required":["type"]}]}};const schema17 = {"description":"A team playing in the match","type":"object","additionalProperties":false,"properties":{"id":{"description":"The identifier for the team.  This can either be a team ID or a team reference (see the documentation)","type":"string","minLength":1,"maxLength":1000},"scores":{"description":"The array of set scores.  If the matchType is 'continuous' then only the first value in the array is used","type":"array","items":{"description":"The set score","type":"integer","minimum":0}},"mvp":{"description":"This team's most valuable player award.  This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1},"forfeit":{"description":"Did this team forfeit the match","type":"boolean","default":false},"bonusPoints":{"description":"Does this team get any bonus points in the league.  This is separate from any league points calculated from the match result, and is added to their league points","type":"integer","default":0,"minimum":0},"penaltyPoints":{"description":"Does this team receive any penalty points in the league.  This is separate from any league points calculated from the match result, and is subtracted from their league points","type":"integer","default":0,"minimum":0},"notes":{"description":"Free form string to add notes about the team relating to this match.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"players":{"description":"The list of players from this team that played in this match.  This can be either a player's name or a reference to a player ID","type":"array","items":{"description":"Either the name of the player or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  Not all entries need to be references, meaning that the document can allow a mix of registered players with a player ID, and unregistered players indicated just by name","type":"string","minLength":1}}},"required":["id","scores"]};const pattern4 = new RegExp("^([0-1][0-9]|2[0-3]):[0-5][0-9]$", "u");const pattern6 = new RegExp("^[0-9]+:[0-5][0-9]$", "u");const formats4 = require("ajv-formats/dist/formats").fullFormats.date;function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){let data0 = data[i0];const _errs1 = errors;const _errs2 = errors;let valid1 = false;let passing0 = null;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing0;if(((((data0.id === undefined) && (missing0 = "id")) || ((data0.type === undefined) && (missing0 = "type"))) || ((data0.homeTeam === undefined) && (missing0 = "homeTeam"))) || ((data0.awayTeam === undefined) && (missing0 = "awayTeam"))){const err0 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {const _errs5 = errors;for(const key0 in data0){if(!(func22.call(schema16.items.oneOf[0].properties, key0))){const err1 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;break;}}if(_errs5 === errors){let missing1;if(data0.duration !== undefined && ((data0.complete === undefined) && (missing1 = "complete"))){const err2 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/dependencies",keyword:"dependencies",params:{property: "duration",
    missingProperty: missing1,
    depsCount: 1,
    deps: "complete"},message:"must have property complete when property duration is present"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}else {if(data0.id !== undefined){let data1 = data0.id;const _errs6 = errors;if(errors === _errs6){if(typeof data1 === "string"){if(func2(data1) > 100){const err3 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}else {if(func2(data1) < 1){const err4 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}else {if(!pattern0.test(data1)){const err5 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}}}else {const err6 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var valid3 = _errs6 === errors;}else {var valid3 = true;}if(valid3){if(data0.court !== undefined){let data2 = data0.court;const _errs8 = errors;if(errors === _errs8){if(typeof data2 === "string"){if(func2(data2) > 1000){const err7 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}else {if(func2(data2) < 1){const err8 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}}else {const err9 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data0.venue !== undefined){let data3 = data0.venue;const _errs10 = errors;if(errors === _errs10){if(typeof data3 === "string"){if(func2(data3) > 10000){const err10 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/maxLength",keyword:"maxLength",params:{limit: 10000},message:"must NOT have more than 10000 characters"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}else {if(func2(data3) < 1){const err11 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}}else {const err12 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data0.type !== undefined){let data4 = data0.type;const _errs12 = errors;if(typeof data4 !== "string"){const err13 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/0/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}if(!(data4 === "match")){const err14 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/0/properties/type/enum",keyword:"enum",params:{allowedValues: schema16.items.oneOf[0].properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data0.date !== undefined){let data5 = data0.date;const _errs14 = errors;if(errors === _errs14){if(errors === _errs14){if(typeof data5 === "string"){if(!(formats4.validate(data5))){const err15 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/0/properties/date/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}else {const err16 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/0/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data0.warmup !== undefined){let data6 = data0.warmup;const _errs16 = errors;if(errors === _errs16){if(typeof data6 === "string"){if(!pattern4.test(data6)){const err17 = {instancePath:instancePath+"/" + i0+"/warmup",schemaPath:"#/items/oneOf/0/properties/warmup/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}else {const err18 = {instancePath:instancePath+"/" + i0+"/warmup",schemaPath:"#/items/oneOf/0/properties/warmup/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data0.start !== undefined){let data7 = data0.start;const _errs18 = errors;if(errors === _errs18){if(typeof data7 === "string"){if(!pattern4.test(data7)){const err19 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/0/properties/start/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}else {const err20 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/0/properties/start/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data0.duration !== undefined){let data8 = data0.duration;const _errs20 = errors;if(errors === _errs20){if(typeof data8 === "string"){if(!pattern6.test(data8)){const err21 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/0/properties/duration/pattern",keyword:"pattern",params:{pattern: "^[0-9]+:[0-5][0-9]$"},message:"must match pattern \""+"^[0-9]+:[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}else {const err22 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/0/properties/duration/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data0.complete !== undefined){const _errs22 = errors;if(typeof data0.complete !== "boolean"){const err23 = {instancePath:instancePath+"/" + i0+"/complete",schemaPath:"#/items/oneOf/0/properties/complete/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data0.homeTeam !== undefined){let data10 = data0.homeTeam;const _errs24 = errors;const _errs25 = errors;if(errors === _errs25){if(data10 && typeof data10 == "object" && !Array.isArray(data10)){let missing2;if(((data10.id === undefined) && (missing2 = "id")) || ((data10.scores === undefined) && (missing2 = "scores"))){const err24 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}else {const _errs27 = errors;for(const key1 in data10){if(!((((((((key1 === "id") || (key1 === "scores")) || (key1 === "mvp")) || (key1 === "forfeit")) || (key1 === "bonusPoints")) || (key1 === "penaltyPoints")) || (key1 === "notes")) || (key1 === "players"))){const err25 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;break;}}if(_errs27 === errors){if(data10.id !== undefined){let data11 = data10.id;const _errs28 = errors;if(errors === _errs28){if(typeof data11 === "string"){if(func2(data11) > 1000){const err26 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}else {if(func2(data11) < 1){const err27 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}}else {const err28 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var valid5 = _errs28 === errors;}else {var valid5 = true;}if(valid5){if(data10.scores !== undefined){let data12 = data10.scores;const _errs30 = errors;if(errors === _errs30){if(Array.isArray(data12)){var valid6 = true;const len1 = data12.length;for(let i1=0; i1<len1; i1++){let data13 = data12[i1];const _errs32 = errors;if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){const err29 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores/" + i1,schemaPath:"#/$defs/team/properties/scores/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}if(errors === _errs32){if((typeof data13 == "number") && (isFinite(data13))){if(data13 < 0 || isNaN(data13)){const err30 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores/" + i1,schemaPath:"#/$defs/team/properties/scores/items/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}}var valid6 = _errs32 === errors;if(!valid6){break;}}}else {const err31 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores",schemaPath:"#/$defs/team/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var valid5 = _errs30 === errors;}else {var valid5 = true;}if(valid5){if(data10.mvp !== undefined){let data14 = data10.mvp;const _errs34 = errors;if(errors === _errs34){if(typeof data14 === "string"){if(func2(data14) < 1){const err32 = {instancePath:instancePath+"/" + i0+"/homeTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}else {const err33 = {instancePath:instancePath+"/" + i0+"/homeTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var valid5 = _errs34 === errors;}else {var valid5 = true;}if(valid5){if(data10.forfeit !== undefined){const _errs36 = errors;if(typeof data10.forfeit !== "boolean"){const err34 = {instancePath:instancePath+"/" + i0+"/homeTeam/forfeit",schemaPath:"#/$defs/team/properties/forfeit/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}var valid5 = _errs36 === errors;}else {var valid5 = true;}if(valid5){if(data10.bonusPoints !== undefined){let data16 = data10.bonusPoints;const _errs38 = errors;if(!(((typeof data16 == "number") && (!(data16 % 1) && !isNaN(data16))) && (isFinite(data16)))){const err35 = {instancePath:instancePath+"/" + i0+"/homeTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}if(errors === _errs38){if((typeof data16 == "number") && (isFinite(data16))){if(data16 < 0 || isNaN(data16)){const err36 = {instancePath:instancePath+"/" + i0+"/homeTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}}var valid5 = _errs38 === errors;}else {var valid5 = true;}if(valid5){if(data10.penaltyPoints !== undefined){let data17 = data10.penaltyPoints;const _errs40 = errors;if(!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))){const err37 = {instancePath:instancePath+"/" + i0+"/homeTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}if(errors === _errs40){if((typeof data17 == "number") && (isFinite(data17))){if(data17 < 0 || isNaN(data17)){const err38 = {instancePath:instancePath+"/" + i0+"/homeTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}}var valid5 = _errs40 === errors;}else {var valid5 = true;}if(valid5){if(data10.notes !== undefined){let data18 = data10.notes;const _errs42 = errors;if(errors === _errs42){if(typeof data18 === "string"){if(func2(data18) < 1){const err39 = {instancePath:instancePath+"/" + i0+"/homeTeam/notes",schemaPath:"#/$defs/team/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}else {const err40 = {instancePath:instancePath+"/" + i0+"/homeTeam/notes",schemaPath:"#/$defs/team/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var valid5 = _errs42 === errors;}else {var valid5 = true;}if(valid5){if(data10.players !== undefined){let data19 = data10.players;const _errs44 = errors;if(errors === _errs44){if(Array.isArray(data19)){var valid7 = true;const len2 = data19.length;for(let i2=0; i2<len2; i2++){let data20 = data19[i2];const _errs46 = errors;if(errors === _errs46){if(typeof data20 === "string"){if(func2(data20) < 1){const err41 = {instancePath:instancePath+"/" + i0+"/homeTeam/players/" + i2,schemaPath:"#/$defs/team/properties/players/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}else {const err42 = {instancePath:instancePath+"/" + i0+"/homeTeam/players/" + i2,schemaPath:"#/$defs/team/properties/players/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var valid7 = _errs46 === errors;if(!valid7){break;}}}else {const err43 = {instancePath:instancePath+"/" + i0+"/homeTeam/players",schemaPath:"#/$defs/team/properties/players/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var valid5 = _errs44 === errors;}else {var valid5 = true;}}}}}}}}}}}else {const err44 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var valid3 = _errs24 === errors;}else {var valid3 = true;}if(valid3){if(data0.awayTeam !== undefined){let data21 = data0.awayTeam;const _errs48 = errors;const _errs49 = errors;if(errors === _errs49){if(data21 && typeof data21 == "object" && !Array.isArray(data21)){let missing3;if(((data21.id === undefined) && (missing3 = "id")) || ((data21.scores === undefined) && (missing3 = "scores"))){const err45 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}else {const _errs51 = errors;for(const key2 in data21){if(!((((((((key2 === "id") || (key2 === "scores")) || (key2 === "mvp")) || (key2 === "forfeit")) || (key2 === "bonusPoints")) || (key2 === "penaltyPoints")) || (key2 === "notes")) || (key2 === "players"))){const err46 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;break;}}if(_errs51 === errors){if(data21.id !== undefined){let data22 = data21.id;const _errs52 = errors;if(errors === _errs52){if(typeof data22 === "string"){if(func2(data22) > 1000){const err47 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}else {if(func2(data22) < 1){const err48 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}}else {const err49 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var valid9 = _errs52 === errors;}else {var valid9 = true;}if(valid9){if(data21.scores !== undefined){let data23 = data21.scores;const _errs54 = errors;if(errors === _errs54){if(Array.isArray(data23)){var valid10 = true;const len3 = data23.length;for(let i3=0; i3<len3; i3++){let data24 = data23[i3];const _errs56 = errors;if(!(((typeof data24 == "number") && (!(data24 % 1) && !isNaN(data24))) && (isFinite(data24)))){const err50 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores/" + i3,schemaPath:"#/$defs/team/properties/scores/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}if(errors === _errs56){if((typeof data24 == "number") && (isFinite(data24))){if(data24 < 0 || isNaN(data24)){const err51 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores/" + i3,schemaPath:"#/$defs/team/properties/scores/items/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}}var valid10 = _errs56 === errors;if(!valid10){break;}}}else {const err52 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores",schemaPath:"#/$defs/team/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var valid9 = _errs54 === errors;}else {var valid9 = true;}if(valid9){if(data21.mvp !== undefined){let data25 = data21.mvp;const _errs58 = errors;if(errors === _errs58){if(typeof data25 === "string"){if(func2(data25) < 1){const err53 = {instancePath:instancePath+"/" + i0+"/awayTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}else {const err54 = {instancePath:instancePath+"/" + i0+"/awayTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var valid9 = _errs58 === errors;}else {var valid9 = true;}if(valid9){if(data21.forfeit !== undefined){const _errs60 = errors;if(typeof data21.forfeit !== "boolean"){const err55 = {instancePath:instancePath+"/" + i0+"/awayTeam/forfeit",schemaPath:"#/$defs/team/properties/forfeit/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}var valid9 = _errs60 === errors;}else {var valid9 = true;}if(valid9){if(data21.bonusPoints !== undefined){let data27 = data21.bonusPoints;const _errs62 = errors;if(!(((typeof data27 == "number") && (!(data27 % 1) && !isNaN(data27))) && (isFinite(data27)))){const err56 = {instancePath:instancePath+"/" + i0+"/awayTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}if(errors === _errs62){if((typeof data27 == "number") && (isFinite(data27))){if(data27 < 0 || isNaN(data27)){const err57 = {instancePath:instancePath+"/" + i0+"/awayTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}}var valid9 = _errs62 === errors;}else {var valid9 = true;}if(valid9){if(data21.penaltyPoints !== undefined){let data28 = data21.penaltyPoints;const _errs64 = errors;if(!(((typeof data28 == "number") && (!(data28 % 1) && !isNaN(data28))) && (isFinite(data28)))){const err58 = {instancePath:instancePath+"/" + i0+"/awayTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}if(errors === _errs64){if((typeof data28 == "number") && (isFinite(data28))){if(data28 < 0 || isNaN(data28)){const err59 = {instancePath:instancePath+"/" + i0+"/awayTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}}var valid9 = _errs64 === errors;}else {var valid9 = true;}if(valid9){if(data21.notes !== undefined){let data29 = data21.notes;const _errs66 = errors;if(errors === _errs66){if(typeof data29 === "string"){if(func2(data29) < 1){const err60 = {instancePath:instancePath+"/" + i0+"/awayTeam/notes",schemaPath:"#/$defs/team/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}else {const err61 = {instancePath:instancePath+"/" + i0+"/awayTeam/notes",schemaPath:"#/$defs/team/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var valid9 = _errs66 === errors;}else {var valid9 = true;}if(valid9){if(data21.players !== undefined){let data30 = data21.players;const _errs68 = errors;if(errors === _errs68){if(Array.isArray(data30)){var valid11 = true;const len4 = data30.length;for(let i4=0; i4<len4; i4++){let data31 = data30[i4];const _errs70 = errors;if(errors === _errs70){if(typeof data31 === "string"){if(func2(data31) < 1){const err62 = {instancePath:instancePath+"/" + i0+"/awayTeam/players/" + i4,schemaPath:"#/$defs/team/properties/players/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}else {const err63 = {instancePath:instancePath+"/" + i0+"/awayTeam/players/" + i4,schemaPath:"#/$defs/team/properties/players/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var valid11 = _errs70 === errors;if(!valid11){break;}}}else {const err64 = {instancePath:instancePath+"/" + i0+"/awayTeam/players",schemaPath:"#/$defs/team/properties/players/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var valid9 = _errs68 === errors;}else {var valid9 = true;}}}}}}}}}}}else {const err65 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var valid3 = _errs48 === errors;}else {var valid3 = true;}if(valid3){if(data0.officials !== undefined){let data32 = data0.officials;const _errs72 = errors;const _errs73 = errors;let valid12 = false;let passing1 = null;const _errs74 = errors;if(errors === _errs74){if(data32 && typeof data32 == "object" && !Array.isArray(data32)){let missing4;if((data32.team === undefined) && (missing4 = "team")){const err66 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}else {const _errs76 = errors;for(const key3 in data32){if(!(key3 === "team")){const err67 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;break;}}if(_errs76 === errors){if(data32.team !== undefined){let data33 = data32.team;const _errs77 = errors;if(errors === _errs77){if(typeof data33 === "string"){if(func2(data33) > 1000){const err68 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}else {if(func2(data33) < 1){const err69 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}}else {const err70 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}}}}}else {const err71 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}var _valid1 = _errs74 === errors;if(_valid1){valid12 = true;passing1 = 0;}const _errs79 = errors;if(errors === _errs79){if(data32 && typeof data32 == "object" && !Array.isArray(data32)){let missing5;if((data32.first === undefined) && (missing5 = "first")){const err72 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}else {const _errs81 = errors;for(const key4 in data32){if(!(func22.call(schema16.items.oneOf[0].properties.officials.oneOf[1].properties, key4))){const err73 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;break;}}if(_errs81 === errors){if(data32.first !== undefined){let data34 = data32.first;const _errs82 = errors;if(errors === _errs82){if(typeof data34 === "string"){if(func2(data34) < 1){const err74 = {instancePath:instancePath+"/" + i0+"/officials/first",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/first/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}else {const err75 = {instancePath:instancePath+"/" + i0+"/officials/first",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/first/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}var valid14 = _errs82 === errors;}else {var valid14 = true;}if(valid14){if(data32.second !== undefined){let data35 = data32.second;const _errs84 = errors;if(errors === _errs84){if(typeof data35 === "string"){if(func2(data35) < 1){const err76 = {instancePath:instancePath+"/" + i0+"/officials/second",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/second/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}else {const err77 = {instancePath:instancePath+"/" + i0+"/officials/second",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/second/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}var valid14 = _errs84 === errors;}else {var valid14 = true;}if(valid14){if(data32.challenge !== undefined){let data36 = data32.challenge;const _errs86 = errors;if(errors === _errs86){if(typeof data36 === "string"){if(func2(data36) < 1){const err78 = {instancePath:instancePath+"/" + i0+"/officials/challenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/challenge/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}}else {const err79 = {instancePath:instancePath+"/" + i0+"/officials/challenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/challenge/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}}var valid14 = _errs86 === errors;}else {var valid14 = true;}if(valid14){if(data32.assistantChallenge !== undefined){let data37 = data32.assistantChallenge;const _errs88 = errors;if(errors === _errs88){if(typeof data37 === "string"){if(func2(data37) < 1){const err80 = {instancePath:instancePath+"/" + i0+"/officials/assistantChallenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantChallenge/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err80];}else {vErrors.push(err80);}errors++;}}else {const err81 = {instancePath:instancePath+"/" + i0+"/officials/assistantChallenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantChallenge/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err81];}else {vErrors.push(err81);}errors++;}}var valid14 = _errs88 === errors;}else {var valid14 = true;}if(valid14){if(data32.reserve !== undefined){let data38 = data32.reserve;const _errs90 = errors;if(errors === _errs90){if(typeof data38 === "string"){if(func2(data38) < 1){const err82 = {instancePath:instancePath+"/" + i0+"/officials/reserve",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/reserve/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err82];}else {vErrors.push(err82);}errors++;}}else {const err83 = {instancePath:instancePath+"/" + i0+"/officials/reserve",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/reserve/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err83];}else {vErrors.push(err83);}errors++;}}var valid14 = _errs90 === errors;}else {var valid14 = true;}if(valid14){if(data32.scorer !== undefined){let data39 = data32.scorer;const _errs92 = errors;if(errors === _errs92){if(typeof data39 === "string"){if(func2(data39) < 1){const err84 = {instancePath:instancePath+"/" + i0+"/officials/scorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/scorer/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err84];}else {vErrors.push(err84);}errors++;}}else {const err85 = {instancePath:instancePath+"/" + i0+"/officials/scorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/scorer/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err85];}else {vErrors.push(err85);}errors++;}}var valid14 = _errs92 === errors;}else {var valid14 = true;}if(valid14){if(data32.assistantScorer !== undefined){let data40 = data32.assistantScorer;const _errs94 = errors;if(errors === _errs94){if(typeof data40 === "string"){if(func2(data40) < 1){const err86 = {instancePath:instancePath+"/" + i0+"/officials/assistantScorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantScorer/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err86];}else {vErrors.push(err86);}errors++;}}else {const err87 = {instancePath:instancePath+"/" + i0+"/officials/assistantScorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantScorer/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err87];}else {vErrors.push(err87);}errors++;}}var valid14 = _errs94 === errors;}else {var valid14 = true;}if(valid14){if(data32.linespersons !== undefined){let data41 = data32.linespersons;const _errs96 = errors;if(errors === _errs96){if(Array.isArray(data41)){if(data41.length > 4){const err88 = {instancePath:instancePath+"/" + i0+"/officials/linespersons",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/maxItems",keyword:"maxItems",params:{limit: 4},message:"must NOT have more than 4 items"};if(vErrors === null){vErrors = [err88];}else {vErrors.push(err88);}errors++;}else {var valid15 = true;const len5 = data41.length;for(let i5=0; i5<len5; i5++){let data42 = data41[i5];const _errs98 = errors;if(errors === _errs98){if(typeof data42 === "string"){if(func2(data42) < 1){const err89 = {instancePath:instancePath+"/" + i0+"/officials/linespersons/" + i5,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err89];}else {vErrors.push(err89);}errors++;}}else {const err90 = {instancePath:instancePath+"/" + i0+"/officials/linespersons/" + i5,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err90];}else {vErrors.push(err90);}errors++;}}var valid15 = _errs98 === errors;if(!valid15){break;}}}}else {const err91 = {instancePath:instancePath+"/" + i0+"/officials/linespersons",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err91];}else {vErrors.push(err91);}errors++;}}var valid14 = _errs96 === errors;}else {var valid14 = true;}if(valid14){if(data32.ballCrew !== undefined){let data43 = data32.ballCrew;const _errs100 = errors;if(errors === _errs100){if(Array.isArray(data43)){if(data43.length > 100){const err92 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/maxItems",keyword:"maxItems",params:{limit: 100},message:"must NOT have more than 100 items"};if(vErrors === null){vErrors = [err92];}else {vErrors.push(err92);}errors++;}else {var valid16 = true;const len6 = data43.length;for(let i6=0; i6<len6; i6++){let data44 = data43[i6];const _errs102 = errors;if(errors === _errs102){if(typeof data44 === "string"){if(func2(data44) < 1){const err93 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew/" + i6,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err93];}else {vErrors.push(err93);}errors++;}}else {const err94 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew/" + i6,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err94];}else {vErrors.push(err94);}errors++;}}var valid16 = _errs102 === errors;if(!valid16){break;}}}}else {const err95 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err95];}else {vErrors.push(err95);}errors++;}}var valid14 = _errs100 === errors;}else {var valid14 = true;}}}}}}}}}}}}else {const err96 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err96];}else {vErrors.push(err96);}errors++;}}var _valid1 = _errs79 === errors;if(_valid1 && valid12){valid12 = false;passing1 = [passing1, 1];}else {if(_valid1){valid12 = true;passing1 = 1;}}if(!valid12){const err97 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf",keyword:"oneOf",params:{passingSchemas: passing1},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err97];}else {vErrors.push(err97);}errors++;}else {errors = _errs73;if(vErrors !== null){if(_errs73){vErrors.length = _errs73;}else {vErrors = null;}}}var valid3 = _errs72 === errors;}else {var valid3 = true;}if(valid3){if(data0.mvp !== undefined){let data45 = data0.mvp;const _errs104 = errors;if(errors === _errs104){if(typeof data45 === "string"){if(func2(data45) > 203){const err98 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/maxLength",keyword:"maxLength",params:{limit: 203},message:"must NOT have more than 203 characters"};if(vErrors === null){vErrors = [err98];}else {vErrors.push(err98);}errors++;}else {if(func2(data45) < 1){const err99 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err99];}else {vErrors.push(err99);}errors++;}}}else {const err100 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err100];}else {vErrors.push(err100);}errors++;}}var valid3 = _errs104 === errors;}else {var valid3 = true;}if(valid3){if(data0.manager !== undefined){let data46 = data0.manager;const _errs106 = errors;const _errs107 = errors;let valid17 = false;let passing2 = null;const _errs108 = errors;if(errors === _errs108){if(typeof data46 === "string"){if(func2(data46) > 1000){const err101 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err101];}else {vErrors.push(err101);}errors++;}else {if(func2(data46) < 1){const err102 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err102];}else {vErrors.push(err102);}errors++;}}}else {const err103 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err103];}else {vErrors.push(err103);}errors++;}}var _valid2 = _errs108 === errors;if(_valid2){valid17 = true;passing2 = 0;}const _errs110 = errors;if(errors === _errs110){if(data46 && typeof data46 == "object" && !Array.isArray(data46)){let missing6;if((data46.team === undefined) && (missing6 = "team")){const err104 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"};if(vErrors === null){vErrors = [err104];}else {vErrors.push(err104);}errors++;}else {const _errs112 = errors;for(const key5 in data46){if(!(key5 === "team")){const err105 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err105];}else {vErrors.push(err105);}errors++;break;}}if(_errs112 === errors){if(data46.team !== undefined){let data47 = data46.team;const _errs113 = errors;if(errors === _errs113){if(typeof data47 === "string"){if(func2(data47) > 1000){const err106 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err106];}else {vErrors.push(err106);}errors++;}else {if(func2(data47) < 1){const err107 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err107];}else {vErrors.push(err107);}errors++;}}}else {const err108 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err108];}else {vErrors.push(err108);}errors++;}}}}}}else {const err109 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err109];}else {vErrors.push(err109);}errors++;}}var _valid2 = _errs110 === errors;if(_valid2 && valid17){valid17 = false;passing2 = [passing2, 1];}else {if(_valid2){valid17 = true;passing2 = 1;}}if(!valid17){const err110 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf",keyword:"oneOf",params:{passingSchemas: passing2},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err110];}else {vErrors.push(err110);}errors++;}else {errors = _errs107;if(vErrors !== null){if(_errs107){vErrors.length = _errs107;}else {vErrors = null;}}}var valid3 = _errs106 === errors;}else {var valid3 = true;}if(valid3){if(data0.friendly !== undefined){const _errs115 = errors;if(typeof data0.friendly !== "boolean"){const err111 = {instancePath:instancePath+"/" + i0+"/friendly",schemaPath:"#/items/oneOf/0/properties/friendly/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err111];}else {vErrors.push(err111);}errors++;}var valid3 = _errs115 === errors;}else {var valid3 = true;}if(valid3){if(data0.notes !== undefined){let data49 = data0.notes;const _errs117 = errors;if(errors === _errs117){if(typeof data49 === "string"){if(func2(data49) < 1){const err112 = {instancePath:instancePath+"/" + i0+"/notes",schemaPath:"#/items/oneOf/0/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err112];}else {vErrors.push(err112);}errors++;}}else {const err113 = {instancePath:instancePath+"/" + i0+"/notes",schemaPath:"#/items/oneOf/0/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err113];}else {vErrors.push(err113);}errors++;}}var valid3 = _errs117 === errors;}else {var valid3 = true;}}}}}}}}}}}}}}}}}}}}else {const err114 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err114];}else {vErrors.push(err114);}errors++;}}var _valid0 = _errs3 === errors;if(_valid0){valid1 = true;passing0 = 0;}const _errs119 = errors;if(errors === _errs119){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing7;if((data0.type === undefined) && (missing7 = "type")){const err115 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"};if(vErrors === null){vErrors = [err115];}else {vErrors.push(err115);}errors++;}else {const _errs121 = errors;for(const key6 in data0){if(!(((((key6 === "type") || (key6 === "start")) || (key6 === "date")) || (key6 === "duration")) || (key6 === "name"))){const err116 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err116];}else {vErrors.push(err116);}errors++;break;}}if(_errs121 === errors){if(data0.type !== undefined){let data50 = data0.type;const _errs122 = errors;if(typeof data50 !== "string"){const err117 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/1/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err117];}else {vErrors.push(err117);}errors++;}if(!(data50 === "break")){const err118 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/1/properties/type/enum",keyword:"enum",params:{allowedValues: schema16.items.oneOf[1].properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err118];}else {vErrors.push(err118);}errors++;}var valid19 = _errs122 === errors;}else {var valid19 = true;}if(valid19){if(data0.start !== undefined){let data51 = data0.start;const _errs124 = errors;if(errors === _errs124){if(typeof data51 === "string"){if(!pattern4.test(data51)){const err119 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/1/properties/start/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err119];}else {vErrors.push(err119);}errors++;}}else {const err120 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/1/properties/start/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err120];}else {vErrors.push(err120);}errors++;}}var valid19 = _errs124 === errors;}else {var valid19 = true;}if(valid19){if(data0.date !== undefined){let data52 = data0.date;const _errs126 = errors;if(errors === _errs126){if(errors === _errs126){if(typeof data52 === "string"){if(!(formats4.validate(data52))){const err121 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/1/properties/date/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""};if(vErrors === null){vErrors = [err121];}else {vErrors.push(err121);}errors++;}}else {const err122 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/1/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err122];}else {vErrors.push(err122);}errors++;}}}var valid19 = _errs126 === errors;}else {var valid19 = true;}if(valid19){if(data0.duration !== undefined){let data53 = data0.duration;const _errs128 = errors;if(errors === _errs128){if(typeof data53 === "string"){if(!pattern6.test(data53)){const err123 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/1/properties/duration/pattern",keyword:"pattern",params:{pattern: "^[0-9]+:[0-5][0-9]$"},message:"must match pattern \""+"^[0-9]+:[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err123];}else {vErrors.push(err123);}errors++;}}else {const err124 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/1/properties/duration/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err124];}else {vErrors.push(err124);}errors++;}}var valid19 = _errs128 === errors;}else {var valid19 = true;}if(valid19){if(data0.name !== undefined){let data54 = data0.name;const _errs130 = errors;if(errors === _errs130){if(typeof data54 === "string"){if(func2(data54) > 1000){const err125 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err125];}else {vErrors.push(err125);}errors++;}else {if(func2(data54) < 1){const err126 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err126];}else {vErrors.push(err126);}errors++;}}}else {const err127 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err127];}else {vErrors.push(err127);}errors++;}}var valid19 = _errs130 === errors;}else {var valid19 = true;}}}}}}}}else {const err128 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err128];}else {vErrors.push(err128);}errors++;}}var _valid0 = _errs119 === errors;if(_valid0 && valid1){valid1 = false;passing0 = [passing0, 1];}else {if(_valid0){valid1 = true;passing0 = 1;}}if(!valid1){const err129 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err129];}else {vErrors.push(err129);}errors++;validate15.errors = vErrors;return false;}else {errors = _errs2;if(vErrors !== null){if(_errs2){vErrors.length = _errs2;}else {vErrors = null;}}}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate15.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate15.errors = vErrors;return errors === 0;}function validate14(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/groupAppend" */;let vErrors = null;let errors = 0;const _errs1 = errors;const _errs2 = errors;let valid1 = true;const _errs3 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.type === undefined) && (missing0 = "type")){const err0 = {};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {if(data.type !== undefined){if("league" !== data.type){const err1 = {};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}}}var _valid0 = _errs3 === errors;errors = _errs2;if(vErrors !== null){if(_errs2){vErrors.length = _errs2;}else {vErrors = null;}}if(_valid0){const _errs5 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing1;if((data.league === undefined) && (missing1 = "league")){validate14.errors = [{instancePath,schemaPath:"#/allOf/0/then/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}}var _valid0 = _errs5 === errors;valid1 = _valid0;}if(!valid1){const err2 = {instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;validate14.errors = vErrors;return false;}var valid0 = _errs1 === errors;if(valid0){const _errs6 = errors;const _errs7 = errors;let valid3 = true;const _errs8 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing2;if((data.type === undefined) && (missing2 = "type")){const err3 = {};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}else {if(data.type !== undefined){if("crossover" !== data.type){const err4 = {};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}}}var _valid1 = _errs8 === errors;errors = _errs7;if(vErrors !== null){if(_errs7){vErrors.length = _errs7;}else {vErrors = null;}}if(_valid1){const _errs10 = errors;const _errs11 = errors;let valid5 = false;const _errs12 = errors;if(data && typeof data == "object" && !Array.isArray(data)){if(data.drawsAllowed !== undefined){if(!(data.drawsAllowed === false)){const err5 = {instancePath:instancePath+"/drawsAllowed",schemaPath:"#/allOf/1/then/anyOf/0/properties/drawsAllowed/enum",keyword:"enum",params:{allowedValues: schema15.allOf[1].then.anyOf[0].properties.drawsAllowed.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}}var _valid2 = _errs12 === errors;valid5 = valid5 || _valid2;if(!valid5){const _errs14 = errors;const _errs15 = errors;const _errs16 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing3;if((data.drawsAllowed === undefined) && (missing3 = "drawsAllowed")){const err6 = {};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var valid7 = _errs16 === errors;if(valid7){const err7 = {instancePath,schemaPath:"#/allOf/1/then/anyOf/1/not",keyword:"not",params:{},message:"must NOT be valid"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}else {errors = _errs15;if(vErrors !== null){if(_errs15){vErrors.length = _errs15;}else {vErrors = null;}}}var _valid2 = _errs14 === errors;valid5 = valid5 || _valid2;}if(!valid5){const err8 = {instancePath,schemaPath:"#/allOf/1/then/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;validate14.errors = vErrors;return false;}else {errors = _errs11;if(vErrors !== null){if(_errs11){vErrors.length = _errs11;}else {vErrors = null;}}}var _valid1 = _errs10 === errors;valid3 = _valid1;}if(!valid3){const err9 = {instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;validate14.errors = vErrors;return false;}var valid0 = _errs6 === errors;if(valid0){const _errs17 = errors;const _errs18 = errors;let valid8 = true;const _errs19 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing4;if((data.type === undefined) && (missing4 = "type")){const err10 = {};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}else {if(data.type !== undefined){if("knockout" !== data.type){const err11 = {};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}}}var _valid3 = _errs19 === errors;errors = _errs18;if(vErrors !== null){if(_errs18){vErrors.length = _errs18;}else {vErrors = null;}}if(_valid3){const _errs21 = errors;const _errs22 = errors;let valid10 = false;const _errs23 = errors;if(data && typeof data == "object" && !Array.isArray(data)){if(data.drawsAllowed !== undefined){if(!(data.drawsAllowed === false)){const err12 = {instancePath:instancePath+"/drawsAllowed",schemaPath:"#/allOf/2/then/anyOf/0/properties/drawsAllowed/enum",keyword:"enum",params:{allowedValues: schema15.allOf[2].then.anyOf[0].properties.drawsAllowed.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}}var _valid4 = _errs23 === errors;valid10 = valid10 || _valid4;if(!valid10){const _errs25 = errors;const _errs26 = errors;const _errs27 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing5;if((data.drawsAllowed === undefined) && (missing5 = "drawsAllowed")){const err13 = {};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var valid12 = _errs27 === errors;if(valid12){const err14 = {instancePath,schemaPath:"#/allOf/2/then/anyOf/1/not",keyword:"not",params:{},message:"must NOT be valid"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}else {errors = _errs26;if(vErrors !== null){if(_errs26){vErrors.length = _errs26;}else {vErrors = null;}}}var _valid4 = _errs25 === errors;valid10 = valid10 || _valid4;}if(!valid10){const err15 = {instancePath,schemaPath:"#/allOf/2/then/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;validate14.errors = vErrors;return false;}else {errors = _errs22;if(vErrors !== null){if(_errs22){vErrors.length = _errs22;}else {vErrors = null;}}}var _valid3 = _errs21 === errors;valid8 = _valid3;}if(!valid8){const err16 = {instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;validate14.errors = vErrors;return false;}var valid0 = _errs17 === errors;if(valid0){const _errs28 = errors;const _errs29 = errors;let valid13 = true;const _errs30 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing6;if((data.matchType === undefined) && (missing6 = "matchType")){const err17 = {};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}else {if(data.matchType !== undefined){if("continuous" !== data.matchType){const err18 = {};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}}}var _valid5 = _errs30 === errors;errors = _errs29;if(vErrors !== null){if(_errs29){vErrors.length = _errs29;}else {vErrors = null;}}if(_valid5){const _errs32 = errors;const _errs34 = errors;const _errs35 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing7;if((data.sets === undefined) && (missing7 = "sets")){const err19 = {};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var valid16 = _errs35 === errors;if(valid16){validate14.errors = [{instancePath,schemaPath:"#/allOf/3/then/allOf/0/not",keyword:"not",params:{},message:"must NOT be valid"}];return false;}else {errors = _errs34;if(vErrors !== null){if(_errs34){vErrors.length = _errs34;}else {vErrors = null;}}}if(errors === _errs32){if(data && typeof data == "object" && !Array.isArray(data)){if(data.matches !== undefined){let data6 = data.matches;const _errs36 = errors;if(errors === _errs36){if(Array.isArray(data6)){var valid18 = true;const len0 = data6.length;for(let i0=0; i0<len0; i0++){let data7 = data6[i0];const _errs38 = errors;if(errors === _errs38){if(data7 && typeof data7 == "object" && !Array.isArray(data7)){if(data7.homeTeam !== undefined){let data8 = data7.homeTeam;const _errs40 = errors;if(errors === _errs40){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){if(data8.scores !== undefined){let data9 = data8.scores;const _errs42 = errors;if(errors === _errs42){if(Array.isArray(data9)){if(data9.length > 1){validate14.errors = [{instancePath:instancePath+"/matches/" + i0+"/homeTeam/scores",schemaPath:"#/allOf/3/then/properties/matches/items/properties/homeTeam/properties/scores/maxItems",keyword:"maxItems",params:{limit: 1},message:"must NOT have more than 1 items"}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/matches/" + i0+"/homeTeam/scores",schemaPath:"#/allOf/3/then/properties/matches/items/properties/homeTeam/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}else {validate14.errors = [{instancePath:instancePath+"/matches/" + i0+"/homeTeam",schemaPath:"#/allOf/3/then/properties/matches/items/properties/homeTeam/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid19 = _errs40 === errors;}else {var valid19 = true;}if(valid19){if(data7.awayTeam !== undefined){let data10 = data7.awayTeam;const _errs44 = errors;if(errors === _errs44){if(data10 && typeof data10 == "object" && !Array.isArray(data10)){if(data10.scores !== undefined){let data11 = data10.scores;const _errs46 = errors;if(errors === _errs46){if(Array.isArray(data11)){if(data11.length > 1){validate14.errors = [{instancePath:instancePath+"/matches/" + i0+"/awayTeam/scores",schemaPath:"#/allOf/3/then/properties/matches/items/properties/awayTeam/properties/scores/maxItems",keyword:"maxItems",params:{limit: 1},message:"must NOT have more than 1 items"}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/matches/" + i0+"/awayTeam/scores",schemaPath:"#/allOf/3/then/properties/matches/items/properties/awayTeam/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}else {validate14.errors = [{instancePath:instancePath+"/matches/" + i0+"/awayTeam",schemaPath:"#/allOf/3/then/properties/matches/items/properties/awayTeam/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid19 = _errs44 === errors;}else {var valid19 = true;}}}else {validate14.errors = [{instancePath:instancePath+"/matches/" + i0,schemaPath:"#/allOf/3/then/properties/matches/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid18 = _errs38 === errors;if(!valid18){break;}}}else {validate14.errors = [{instancePath:instancePath+"/matches",schemaPath:"#/allOf/3/then/properties/matches/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}var _valid5 = _errs32 === errors;valid13 = _valid5;}if(!valid13){const err20 = {instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;validate14.errors = vErrors;return false;}var valid0 = _errs28 === errors;if(valid0){const _errs48 = errors;const _errs49 = errors;let valid22 = true;const _errs50 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing8;if((data.matchType === undefined) && (missing8 = "matchType")){const err21 = {};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}else {if(data.matchType !== undefined){if("continuous" !== data.matchType){const err22 = {};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}}}var _valid6 = _errs50 === errors;errors = _errs49;if(vErrors !== null){if(_errs49){vErrors.length = _errs49;}else {vErrors = null;}}if(_valid6){const _errs52 = errors;const _errs54 = errors;const _errs55 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing9;if((data.sets === undefined) && (missing9 = "sets")){const err23 = {};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var valid25 = _errs55 === errors;if(valid25){validate14.errors = [{instancePath,schemaPath:"#/allOf/4/then/allOf/0/not",keyword:"not",params:{},message:"must NOT be valid"}];return false;}else {errors = _errs54;if(vErrors !== null){if(_errs54){vErrors.length = _errs54;}else {vErrors = null;}}}var _valid6 = _errs52 === errors;valid22 = _valid6;}if(!valid22){const err24 = {instancePath,schemaPath:"#/allOf/4/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;validate14.errors = vErrors;return false;}var valid0 = _errs48 === errors;if(valid0){const _errs56 = errors;const _errs57 = errors;let valid26 = true;const _errs58 = errors;if(data && typeof data == "object" && !Array.isArray(data)){let missing10;if((data.matchType === undefined) && (missing10 = "matchType")){const err25 = {};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}else {if(data.matchType !== undefined){const _errs59 = errors;if("continuous" !== data.matchType){const err26 = {};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}var valid27 = _errs59 === errors;}else {var valid27 = true;}if(valid27){if(data.matches !== undefined){let data14 = data.matches;const _errs60 = errors;if(errors === _errs60){if(Array.isArray(data14)){var valid28 = true;const len1 = data14.length;for(let i1=0; i1<len1; i1++){let data15 = data14[i1];const _errs62 = errors;if(errors === _errs62){if(data15 && typeof data15 == "object" && !Array.isArray(data15)){if(data15.type !== undefined){if("match" !== data15.type){const err27 = {};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}}else {const err28 = {};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var valid28 = _errs62 === errors;if(!valid28){break;}}}else {const err29 = {};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var valid27 = _errs60 === errors;}else {var valid27 = true;}}}}var _valid7 = _errs58 === errors;errors = _errs57;if(vErrors !== null){if(_errs57){vErrors.length = _errs57;}else {vErrors = null;}}if(_valid7){const _errs65 = errors;if(data && typeof data == "object" && !Array.isArray(data)){if(data.matches !== undefined){let data17 = data.matches;const _errs66 = errors;if(errors === _errs66){if(Array.isArray(data17)){var valid31 = true;const len2 = data17.length;for(let i2=0; i2<len2; i2++){let data18 = data17[i2];const _errs68 = errors;if(errors === _errs68){if(data18 && typeof data18 == "object" && !Array.isArray(data18)){let missing11;if((data18.complete === undefined) && (missing11 = "complete")){validate14.errors = [{instancePath:instancePath+"/matches/" + i2,schemaPath:"#/allOf/5/then/properties/matches/items/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/matches/" + i2,schemaPath:"#/allOf/5/then/properties/matches/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid31 = _errs68 === errors;if(!valid31){break;}}}else {validate14.errors = [{instancePath:instancePath+"/matches",schemaPath:"#/allOf/5/then/properties/matches/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}var _valid7 = _errs65 === errors;valid26 = _valid7;}if(!valid26){const err30 = {instancePath,schemaPath:"#/allOf/5/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;validate14.errors = vErrors;return false;}var valid0 = _errs56 === errors;}}}}}if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing12;if((((data.type === undefined) && (missing12 = "type")) || ((data.matchType === undefined) && (missing12 = "matchType"))) || ((data.matches === undefined) && (missing12 = "matches"))){validate14.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing12},message:"must have required property '"+missing12+"'"}];return false;}else {const _errs70 = errors;for(const key0 in data){if(!(func22.call(schema15.properties, key0))){validate14.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs70 === errors){if(data.id !== undefined){let data19 = data.id;const _errs71 = errors;if(errors === _errs71){if(typeof data19 === "string"){if(func2(data19) > 100){validate14.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data19) < 1){validate14.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data19)){validate14.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate14.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid32 = _errs71 === errors;}else {var valid32 = true;}if(valid32){if(data.name !== undefined){let data20 = data.name;const _errs73 = errors;if(errors === _errs73){if(typeof data20 === "string"){if(func2(data20) > 1000){validate14.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data20) < 1){validate14.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate14.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid32 = _errs73 === errors;}else {var valid32 = true;}if(valid32){if(data.notes !== undefined){let data21 = data.notes;const _errs75 = errors;if(errors === _errs75){if(typeof data21 === "string"){if(func2(data21) < 1){validate14.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid32 = _errs75 === errors;}else {var valid32 = true;}if(valid32){if(data.description !== undefined){let data22 = data.description;const _errs77 = errors;if(errors === _errs77){if(Array.isArray(data22)){var valid33 = true;const len3 = data22.length;for(let i3=0; i3<len3; i3++){let data23 = data22[i3];const _errs79 = errors;if(errors === _errs79){if(typeof data23 === "string"){if(func2(data23) < 1){validate14.errors = [{instancePath:instancePath+"/description/" + i3,schemaPath:"#/properties/description/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/description/" + i3,schemaPath:"#/properties/description/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid33 = _errs79 === errors;if(!valid33){break;}}}else {validate14.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid32 = _errs77 === errors;}else {var valid32 = true;}if(valid32){if(data.type !== undefined){let data24 = data.type;const _errs81 = errors;if(typeof data24 !== "string"){validate14.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(((data24 === "league") || (data24 === "crossover")) || (data24 === "knockout"))){validate14.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema15.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid32 = _errs81 === errors;}else {var valid32 = true;}if(valid32){if(data.knockout !== undefined){let data25 = data.knockout;const _errs83 = errors;if(errors === _errs83){if(data25 && typeof data25 == "object" && !Array.isArray(data25)){let missing13;if((data25.standing === undefined) && (missing13 = "standing")){validate14.errors = [{instancePath:instancePath+"/knockout",schemaPath:"#/properties/knockout/required",keyword:"required",params:{missingProperty: missing13},message:"must have required property '"+missing13+"'"}];return false;}else {const _errs85 = errors;for(const key1 in data25){if(!(key1 === "standing")){validate14.errors = [{instancePath:instancePath+"/knockout",schemaPath:"#/properties/knockout/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs85 === errors){if(data25.standing !== undefined){let data26 = data25.standing;const _errs86 = errors;if(errors === _errs86){if(Array.isArray(data26)){if(data26.length < 1){validate14.errors = [{instancePath:instancePath+"/knockout/standing",schemaPath:"#/properties/knockout/properties/standing/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid35 = true;const len4 = data26.length;for(let i4=0; i4<len4; i4++){let data27 = data26[i4];const _errs88 = errors;if(errors === _errs88){if(data27 && typeof data27 == "object" && !Array.isArray(data27)){let missing14;if(((data27.position === undefined) && (missing14 = "position")) || ((data27.id === undefined) && (missing14 = "id"))){validate14.errors = [{instancePath:instancePath+"/knockout/standing/" + i4,schemaPath:"#/properties/knockout/properties/standing/items/required",keyword:"required",params:{missingProperty: missing14},message:"must have required property '"+missing14+"'"}];return false;}else {const _errs90 = errors;for(const key2 in data27){if(!((key2 === "position") || (key2 === "id"))){validate14.errors = [{instancePath:instancePath+"/knockout/standing/" + i4,schemaPath:"#/properties/knockout/properties/standing/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];return false;break;}}if(_errs90 === errors){if(data27.position !== undefined){let data28 = data27.position;const _errs91 = errors;if(errors === _errs91){if(typeof data28 === "string"){if(func2(data28) < 1){validate14.errors = [{instancePath:instancePath+"/knockout/standing/" + i4+"/position",schemaPath:"#/properties/knockout/properties/standing/items/properties/position/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/knockout/standing/" + i4+"/position",schemaPath:"#/properties/knockout/properties/standing/items/properties/position/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid36 = _errs91 === errors;}else {var valid36 = true;}if(valid36){if(data27.id !== undefined){let data29 = data27.id;const _errs93 = errors;if(errors === _errs93){if(typeof data29 === "string"){if(func2(data29) < 1){validate14.errors = [{instancePath:instancePath+"/knockout/standing/" + i4+"/id",schemaPath:"#/properties/knockout/properties/standing/items/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate14.errors = [{instancePath:instancePath+"/knockout/standing/" + i4+"/id",schemaPath:"#/properties/knockout/properties/standing/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid36 = _errs93 === errors;}else {var valid36 = true;}}}}}else {validate14.errors = [{instancePath:instancePath+"/knockout/standing/" + i4,schemaPath:"#/properties/knockout/properties/standing/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid35 = _errs88 === errors;if(!valid35){break;}}}}else {validate14.errors = [{instancePath:instancePath+"/knockout/standing",schemaPath:"#/properties/knockout/properties/standing/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate14.errors = [{instancePath:instancePath+"/knockout",schemaPath:"#/properties/knockout/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid32 = _errs83 === errors;}else {var valid32 = true;}if(valid32){if(data.league !== undefined){let data30 = data.league;const _errs95 = errors;if(errors === _errs95){if(data30 && typeof data30 == "object" && !Array.isArray(data30)){let missing15;if(((data30.ordering === undefined) && (missing15 = "ordering")) || ((data30.points === undefined) && (missing15 = "points"))){validate14.errors = [{instancePath:instancePath+"/league",schemaPath:"#/properties/league/required",keyword:"required",params:{missingProperty: missing15},message:"must have required property '"+missing15+"'"}];return false;}else {const _errs97 = errors;for(const key3 in data30){if(!((key3 === "ordering") || (key3 === "points"))){validate14.errors = [{instancePath:instancePath+"/league",schemaPath:"#/properties/league/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];return false;break;}}if(_errs97 === errors){if(data30.ordering !== undefined){let data31 = data30.ordering;const _errs98 = errors;if(errors === _errs98){if(Array.isArray(data31)){if(data31.length < 1){validate14.errors = [{instancePath:instancePath+"/league/ordering",schemaPath:"#/properties/league/properties/ordering/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid38 = true;const len5 = data31.length;for(let i5=0; i5<len5; i5++){let data32 = data31[i5];const _errs100 = errors;if(typeof data32 !== "string"){validate14.errors = [{instancePath:instancePath+"/league/ordering/" + i5,schemaPath:"#/properties/league/properties/ordering/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((((((data32 === "PTS") || (data32 === "WINS")) || (data32 === "LOSSES")) || (data32 === "H2H")) || (data32 === "PF")) || (data32 === "PA")) || (data32 === "PD")) || (data32 === "SF")) || (data32 === "SA")) || (data32 === "SD")) || (data32 === "BP")) || (data32 === "PP"))){validate14.errors = [{instancePath:instancePath+"/league/ordering/" + i5,schemaPath:"#/properties/league/properties/ordering/items/enum",keyword:"enum",params:{allowedValues: schema15.properties.league.properties.ordering.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid38 = _errs100 === errors;if(!valid38){break;}}}}else {validate14.errors = [{instancePath:instancePath+"/league/ordering",schemaPath:"#/properties/league/properties/ordering/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid37 = _errs98 === errors;}else {var valid37 = true;}if(valid37){if(data30.points !== undefined){let data33 = data30.points;const _errs102 = errors;if(errors === _errs102){if(data33 && typeof data33 == "object" && !Array.isArray(data33)){const _errs104 = errors;for(const key4 in data33){if(!(((((((key4 === "played") || (key4 === "perSet")) || (key4 === "win")) || (key4 === "winByOne")) || (key4 === "lose")) || (key4 === "loseByOne")) || (key4 === "forfeit"))){validate14.errors = [{instancePath:instancePath+"/league/points",schemaPath:"#/properties/league/properties/points/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];return false;break;}}if(_errs104 === errors){if(data33.played !== undefined){let data34 = data33.played;const _errs105 = errors;if(!(((typeof data34 == "number") && (!(data34 % 1) && !isNaN(data34))) && (isFinite(data34)))){validate14.errors = [{instancePath:instancePath+"/league/points/played",schemaPath:"#/properties/league/properties/points/properties/played/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid39 = _errs105 === errors;}else {var valid39 = true;}if(valid39){if(data33.perSet !== undefined){let data35 = data33.perSet;const _errs107 = errors;if(!(((typeof data35 == "number") && (!(data35 % 1) && !isNaN(data35))) && (isFinite(data35)))){validate14.errors = [{instancePath:instancePath+"/league/points/perSet",schemaPath:"#/properties/league/properties/points/properties/perSet/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid39 = _errs107 === errors;}else {var valid39 = true;}if(valid39){if(data33.win !== undefined){let data36 = data33.win;const _errs109 = errors;if(!(((typeof data36 == "number") && (!(data36 % 1) && !isNaN(data36))) && (isFinite(data36)))){validate14.errors = [{instancePath:instancePath+"/league/points/win",schemaPath:"#/properties/league/properties/points/properties/win/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid39 = _errs109 === errors;}else {var valid39 = true;}if(valid39){if(data33.winByOne !== undefined){let data37 = data33.winByOne;const _errs111 = errors;if(!(((typeof data37 == "number") && (!(data37 % 1) && !isNaN(data37))) && (isFinite(data37)))){validate14.errors = [{instancePath:instancePath+"/league/points/winByOne",schemaPath:"#/properties/league/properties/points/properties/winByOne/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid39 = _errs111 === errors;}else {var valid39 = true;}if(valid39){if(data33.lose !== undefined){let data38 = data33.lose;const _errs113 = errors;if(!(((typeof data38 == "number") && (!(data38 % 1) && !isNaN(data38))) && (isFinite(data38)))){validate14.errors = [{instancePath:instancePath+"/league/points/lose",schemaPath:"#/properties/league/properties/points/properties/lose/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid39 = _errs113 === errors;}else {var valid39 = true;}if(valid39){if(data33.loseByOne !== undefined){let data39 = data33.loseByOne;const _errs115 = errors;if(!(((typeof data39 == "number") && (!(data39 % 1) && !isNaN(data39))) && (isFinite(data39)))){validate14.errors = [{instancePath:instancePath+"/league/points/loseByOne",schemaPath:"#/properties/league/properties/points/properties/loseByOne/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid39 = _errs115 === errors;}else {var valid39 = true;}if(valid39){if(data33.forfeit !== undefined){let data40 = data33.forfeit;const _errs117 = errors;if(!(((typeof data40 == "number") && (!(data40 % 1) && !isNaN(data40))) && (isFinite(data40)))){validate14.errors = [{instancePath:instancePath+"/league/points/forfeit",schemaPath:"#/properties/league/properties/points/properties/forfeit/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid39 = _errs117 === errors;}else {var valid39 = true;}}}}}}}}}else {validate14.errors = [{instancePath:instancePath+"/league/points",schemaPath:"#/properties/league/properties/points/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid37 = _errs102 === errors;}else {var valid37 = true;}}}}}else {validate14.errors = [{instancePath:instancePath+"/league",schemaPath:"#/properties/league/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid32 = _errs95 === errors;}else {var valid32 = true;}if(valid32){if(data.matchType !== undefined){let data41 = data.matchType;const _errs119 = errors;if(typeof data41 !== "string"){validate14.errors = [{instancePath:instancePath+"/matchType",schemaPath:"#/properties/matchType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data41 === "sets") || (data41 === "continuous"))){validate14.errors = [{instancePath:instancePath+"/matchType",schemaPath:"#/properties/matchType/enum",keyword:"enum",params:{allowedValues: schema15.properties.matchType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid32 = _errs119 === errors;}else {var valid32 = true;}if(valid32){if(data.sets !== undefined){let data42 = data.sets;const _errs121 = errors;if(errors === _errs121){if(data42 && typeof data42 == "object" && !Array.isArray(data42)){const _errs123 = errors;for(const key5 in data42){if(!((((((((key5 === "maxSets") || (key5 === "setsToWin")) || (key5 === "clearPoints")) || (key5 === "minPoints")) || (key5 === "pointsToWin")) || (key5 === "lastSetPointsToWin")) || (key5 === "maxPoints")) || (key5 === "lastSetMaxPoints"))){validate14.errors = [{instancePath:instancePath+"/sets",schemaPath:"#/properties/sets/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];return false;break;}}if(_errs123 === errors){if(data42.maxSets !== undefined){let data43 = data42.maxSets;const _errs124 = errors;if(!(((typeof data43 == "number") && (!(data43 % 1) && !isNaN(data43))) && (isFinite(data43)))){validate14.errors = [{instancePath:instancePath+"/sets/maxSets",schemaPath:"#/properties/sets/properties/maxSets/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs124){if((typeof data43 == "number") && (isFinite(data43))){if(data43 < 1 || isNaN(data43)){validate14.errors = [{instancePath:instancePath+"/sets/maxSets",schemaPath:"#/properties/sets/properties/maxSets/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid40 = _errs124 === errors;}else {var valid40 = true;}if(valid40){if(data42.setsToWin !== undefined){let data44 = data42.setsToWin;const _errs126 = errors;if(!(((typeof data44 == "number") && (!(data44 % 1) && !isNaN(data44))) && (isFinite(data44)))){validate14.errors = [{instancePath:instancePath+"/sets/setsToWin",schemaPath:"#/properties/sets/properties/setsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs126){if((typeof data44 == "number") && (isFinite(data44))){if(data44 < 1 || isNaN(data44)){validate14.errors = [{instancePath:instancePath+"/sets/setsToWin",schemaPath:"#/properties/sets/properties/setsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid40 = _errs126 === errors;}else {var valid40 = true;}if(valid40){if(data42.clearPoints !== undefined){let data45 = data42.clearPoints;const _errs128 = errors;if(!(((typeof data45 == "number") && (!(data45 % 1) && !isNaN(data45))) && (isFinite(data45)))){validate14.errors = [{instancePath:instancePath+"/sets/clearPoints",schemaPath:"#/properties/sets/properties/clearPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs128){if((typeof data45 == "number") && (isFinite(data45))){if(data45 < 1 || isNaN(data45)){validate14.errors = [{instancePath:instancePath+"/sets/clearPoints",schemaPath:"#/properties/sets/properties/clearPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid40 = _errs128 === errors;}else {var valid40 = true;}if(valid40){if(data42.minPoints !== undefined){let data46 = data42.minPoints;const _errs130 = errors;if(!(((typeof data46 == "number") && (!(data46 % 1) && !isNaN(data46))) && (isFinite(data46)))){validate14.errors = [{instancePath:instancePath+"/sets/minPoints",schemaPath:"#/properties/sets/properties/minPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs130){if((typeof data46 == "number") && (isFinite(data46))){if(data46 < 1 || isNaN(data46)){validate14.errors = [{instancePath:instancePath+"/sets/minPoints",schemaPath:"#/properties/sets/properties/minPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid40 = _errs130 === errors;}else {var valid40 = true;}if(valid40){if(data42.pointsToWin !== undefined){let data47 = data42.pointsToWin;const _errs132 = errors;if(!(((typeof data47 == "number") && (!(data47 % 1) && !isNaN(data47))) && (isFinite(data47)))){validate14.errors = [{instancePath:instancePath+"/sets/pointsToWin",schemaPath:"#/properties/sets/properties/pointsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs132){if((typeof data47 == "number") && (isFinite(data47))){if(data47 < 1 || isNaN(data47)){validate14.errors = [{instancePath:instancePath+"/sets/pointsToWin",schemaPath:"#/properties/sets/properties/pointsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid40 = _errs132 === errors;}else {var valid40 = true;}if(valid40){if(data42.lastSetPointsToWin !== undefined){let data48 = data42.lastSetPointsToWin;const _errs134 = errors;if(!(((typeof data48 == "number") && (!(data48 % 1) && !isNaN(data48))) && (isFinite(data48)))){validate14.errors = [{instancePath:instancePath+"/sets/lastSetPointsToWin",schemaPath:"#/properties/sets/properties/lastSetPointsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs134){if((typeof data48 == "number") && (isFinite(data48))){if(data48 < 1 || isNaN(data48)){validate14.errors = [{instancePath:instancePath+"/sets/lastSetPointsToWin",schemaPath:"#/properties/sets/properties/lastSetPointsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid40 = _errs134 === errors;}else {var valid40 = true;}if(valid40){if(data42.maxPoints !== undefined){let data49 = data42.maxPoints;const _errs136 = errors;if(!(((typeof data49 == "number") && (!(data49 % 1) && !isNaN(data49))) && (isFinite(data49)))){validate14.errors = [{instancePath:instancePath+"/sets/maxPoints",schemaPath:"#/properties/sets/properties/maxPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs136){if((typeof data49 == "number") && (isFinite(data49))){if(data49 < 1 || isNaN(data49)){validate14.errors = [{instancePath:instancePath+"/sets/maxPoints",schemaPath:"#/properties/sets/properties/maxPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid40 = _errs136 === errors;}else {var valid40 = true;}if(valid40){if(data42.lastSetMaxPoints !== undefined){let data50 = data42.lastSetMaxPoints;const _errs138 = errors;if(!(((typeof data50 == "number") && (!(data50 % 1) && !isNaN(data50))) && (isFinite(data50)))){validate14.errors = [{instancePath:instancePath+"/sets/lastSetMaxPoints",schemaPath:"#/properties/sets/properties/lastSetMaxPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs138){if((typeof data50 == "number") && (isFinite(data50))){if(data50 < 1 || isNaN(data50)){validate14.errors = [{instancePath:instancePath+"/sets/lastSetMaxPoints",schemaPath:"#/properties/sets/properties/lastSetMaxPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid40 = _errs138 === errors;}else {var valid40 = true;}}}}}}}}}}else {validate14.errors = [{instancePath:instancePath+"/sets",schemaPath:"#/properties/sets/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid32 = _errs121 === errors;}else {var valid32 = true;}if(valid32){if(data.drawsAllowed !== undefined){const _errs140 = errors;if(typeof data.drawsAllowed !== "boolean"){validate14.errors = [{instancePath:instancePath+"/drawsAllowed",schemaPath:"#/properties/drawsAllowed/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid32 = _errs140 === errors;}else {var valid32 = true;}if(valid32){if(data.matches !== undefined){const _errs142 = errors;if(!(validate15(data.matches, {instancePath:instancePath+"/matches",parentData:data,parentDataProperty:"matches",rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}var valid32 = _errs142 === errors;}else {var valid32 = true;}}}}}}}}}}}}}}else {validate14.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate14.errors = vErrors;return errors === 0;}export const validateGroupUpdate = validate17;const schema19 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/groupUpdate","description":"Details on a group","type":"object","additionalProperties":false,"properties":{"name":{"description":"The name for the group","type":"string","minLength":1,"maxLength":1000},"notes":{"description":"Free form string to add notes about this group.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"description":{"description":"An array of string values as a verbose description of the nature of the group, e.g. 'For the pool stage, teams will play each other once, with the top 2 teams going through to....'","type":"array","items":{"description":"A part of the description of this group","type":"string","minLength":1}},"knockout":{"description":"Configuration for the knockout group","type":"object","additionalProperties":false,"properties":{"standing":{"description":"Configuration for the knockout group","type":"array","items":{"description":"An ordered mapping from a position to a team ID","type":"object","additionalProperties":false,"properties":{"position":{"description":"The text description of the position, e.g. \"1st\", \"2nd\".  Having this field allows multiple teams to have the same \"position\", for example if there are no play-off games then two entries can have the value \"3rd\"","type":"string","minLength":1},"id":{"description":"The identifier for the team.  This must be a team reference (see the documentation), for example for the team in \"1st\", this would refer to the winner of the final in this stage->group","type":"string","minLength":1}},"required":["position","id"]},"minItems":1}},"required":["standing"]},"league":{"description":"Configuration for the league","type":"object","additionalProperties":false,"properties":{"ordering":{"description":"An array of parameters that define how the league positions are worked out, where the array position determines the precedence of that parameter, e.g. [ \"PTS\", \"SD\" ] means that league position is determined by league points, with ties decided by set difference.  Valid parameters are 'PTS'=league points, 'WINS'=wins, 'LOSSES'=losses, 'H2H'=head to head, PF'=points for, 'PA'=points against, 'PD'=points difference, 'SF'=sets for, 'SA'=sets against, 'SD'=set difference, 'BP'=bonus points, 'PP'=penalty points.  When comparing teams, a higher value for a parameter results in a higher league position except when comparing 'LOSSES', 'PA', 'SA', and 'PP' (where a lower value results in a higher league position).  Note that 'H2H' only considers wins and losses between two teams; this means that, depending on whether draws are allowed or whether teams play each other multiple times, the head to head comparison may not be able to distinguish between two teams","type":"array","items":{"description":"A parameter that defines the league position","type":"string","enum":["PTS","WINS","LOSSES","H2H","PF","PA","PD","SF","SA","SD","BP","PP"]},"minItems":1},"points":{"description":"Properties defining how to calculate the league points based on match results","type":"object","additionalProperties":false,"properties":{"played":{"description":"Number of league points for playing the match.  Note that a forfeit counts as a \"played\" match, so if this has a non-zero value and the desire is for a forfeit to yield zero points then the \"forfeit\" value should be set to the same as this value","type":"integer","default":0},"perSet":{"description":"Number of league points for each set won","type":"integer","default":0},"win":{"description":"Number of league points for winning (by 2 sets or more if playing sets)","type":"integer","default":3},"winByOne":{"description":"Number of league points for winning by 1 set","type":"integer","default":0},"lose":{"description":"Number of league points for losing (by 2 sets or more if playing sets)","type":"integer","default":0},"loseByOne":{"description":"Number of league points for losing by 1 set","type":"integer","default":0},"forfeit":{"description":"Number of league penalty points for forfeiting a match.  This should be a positive number and will be subtracted from a team's league points for each forfeited match","type":"integer","default":0}}}},"required":["ordering","points"]},"matchType":{"description":"Are the matches played in sets or continuous points.  If this has the value 'sets' then the property 'sets' must be defined","type":"string","enum":["sets","continuous"]},"sets":{"description":"Configuration defining the nature of a set","type":"object","additionalProperties":false,"properties":{"maxSets":{"description":"The maximum number of sets that could be played, often known as 'best of', e.g. if this has the value '5' then the match is played as 'best of 5 sets'","type":"integer","default":5,"minimum":1},"setsToWin":{"description":"The number of sets that must be won to win the match.  This is usually one more than half the 'maxSets', but may be needed if draws are allowed, e.g. if a competition dictates that exactly 2 sets must be played (by setting 'maxSets' to '2') and that draws are allowed, then 'setsToWin' should still be set to '2' to indicate that 2 sets are needed to win the match","type":"integer","default":3,"minimum":1},"clearPoints":{"description":"The number of points lead that the winning team must have, e.g. if this has the value '2' then teams must 'win by 2 clear points'.  Note that if 'maxPoints' has a value then that takes precedence, i.e. if 'maxPoints' is set to '35' then a team can win '35-34' irrespective of the value of 'clearPoints'","type":"integer","default":2,"minimum":1},"minPoints":{"description":"The minimum number of points that either team must score for a set to count as valid.  Usually only used for time-limited matches","type":"integer","default":1,"minimum":1},"pointsToWin":{"description":"The minimum number of points required to win all but the last set","type":"integer","default":25,"minimum":1},"lastSetPointsToWin":{"description":"The minimum number of points required to win the last set","type":"integer","default":15,"minimum":1},"maxPoints":{"description":"The upper limit of points that can be scored in a set","type":"integer","default":1000,"minimum":1},"lastSetMaxPoints":{"description":"The upper limit of points that can be scored in the last set","type":"integer","default":1000,"minimum":1}}},"drawsAllowed":{"description":"Sets whether drawn matches are allowed","default":false,"type":"boolean"}}};function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/groupUpdate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((((((((key0 === "name") || (key0 === "notes")) || (key0 === "description")) || (key0 === "knockout")) || (key0 === "league")) || (key0 === "matchType")) || (key0 === "sets")) || (key0 === "drawsAllowed"))){validate17.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){let data0 = data.name;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 1000){validate17.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data0) < 1){validate17.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate17.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data1 = data.notes;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) < 1){validate17.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate17.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){let data2 = data.description;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data2)){var valid1 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs8 = errors;if(errors === _errs8){if(typeof data3 === "string"){if(func2(data3) < 1){validate17.errors = [{instancePath:instancePath+"/description/" + i0,schemaPath:"#/properties/description/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate17.errors = [{instancePath:instancePath+"/description/" + i0,schemaPath:"#/properties/description/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid1 = _errs8 === errors;if(!valid1){break;}}}else {validate17.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.knockout !== undefined){let data4 = data.knockout;const _errs10 = errors;if(errors === _errs10){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){let missing0;if((data4.standing === undefined) && (missing0 = "standing")){validate17.errors = [{instancePath:instancePath+"/knockout",schemaPath:"#/properties/knockout/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs12 = errors;for(const key1 in data4){if(!(key1 === "standing")){validate17.errors = [{instancePath:instancePath+"/knockout",schemaPath:"#/properties/knockout/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs12 === errors){if(data4.standing !== undefined){let data5 = data4.standing;const _errs13 = errors;if(errors === _errs13){if(Array.isArray(data5)){if(data5.length < 1){validate17.errors = [{instancePath:instancePath+"/knockout/standing",schemaPath:"#/properties/knockout/properties/standing/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid3 = true;const len1 = data5.length;for(let i1=0; i1<len1; i1++){let data6 = data5[i1];const _errs15 = errors;if(errors === _errs15){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing1;if(((data6.position === undefined) && (missing1 = "position")) || ((data6.id === undefined) && (missing1 = "id"))){validate17.errors = [{instancePath:instancePath+"/knockout/standing/" + i1,schemaPath:"#/properties/knockout/properties/standing/items/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs17 = errors;for(const key2 in data6){if(!((key2 === "position") || (key2 === "id"))){validate17.errors = [{instancePath:instancePath+"/knockout/standing/" + i1,schemaPath:"#/properties/knockout/properties/standing/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];return false;break;}}if(_errs17 === errors){if(data6.position !== undefined){let data7 = data6.position;const _errs18 = errors;if(errors === _errs18){if(typeof data7 === "string"){if(func2(data7) < 1){validate17.errors = [{instancePath:instancePath+"/knockout/standing/" + i1+"/position",schemaPath:"#/properties/knockout/properties/standing/items/properties/position/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate17.errors = [{instancePath:instancePath+"/knockout/standing/" + i1+"/position",schemaPath:"#/properties/knockout/properties/standing/items/properties/position/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid4 = _errs18 === errors;}else {var valid4 = true;}if(valid4){if(data6.id !== undefined){let data8 = data6.id;const _errs20 = errors;if(errors === _errs20){if(typeof data8 === "string"){if(func2(data8) < 1){validate17.errors = [{instancePath:instancePath+"/knockout/standing/" + i1+"/id",schemaPath:"#/properties/knockout/properties/standing/items/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate17.errors = [{instancePath:instancePath+"/knockout/standing/" + i1+"/id",schemaPath:"#/properties/knockout/properties/standing/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid4 = _errs20 === errors;}else {var valid4 = true;}}}}}else {validate17.errors = [{instancePath:instancePath+"/knockout/standing/" + i1,schemaPath:"#/properties/knockout/properties/standing/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid3 = _errs15 === errors;if(!valid3){break;}}}}else {validate17.errors = [{instancePath:instancePath+"/knockout/standing",schemaPath:"#/properties/knockout/properties/standing/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate17.errors = [{instancePath:instancePath+"/knockout",schemaPath:"#/properties/knockout/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.league !== undefined){let data9 = data.league;const _errs22 = errors;if(errors === _errs22){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){let missing2;if(((data9.ordering === undefined) && (missing2 = "ordering")) || ((data9.points === undefined) && (missing2 = "points"))){validate17.errors = [{instancePath:instancePath+"/league",schemaPath:"#/properties/league/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {const _errs24 = errors;for(const key3 in data9){if(!((key3 === "ordering") || (key3 === "points"))){validate17.errors = [{instancePath:instancePath+"/league",schemaPath:"#/properties/league/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];return false;break;}}if(_errs24 === errors){if(data9.ordering !== undefined){let data10 = data9.ordering;const _errs25 = errors;if(errors === _errs25){if(Array.isArray(data10)){if(data10.length < 1){validate17.errors = [{instancePath:instancePath+"/league/ordering",schemaPath:"#/properties/league/properties/ordering/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid6 = true;const len2 = data10.length;for(let i2=0; i2<len2; i2++){let data11 = data10[i2];const _errs27 = errors;if(typeof data11 !== "string"){validate17.errors = [{instancePath:instancePath+"/league/ordering/" + i2,schemaPath:"#/properties/league/properties/ordering/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((((((data11 === "PTS") || (data11 === "WINS")) || (data11 === "LOSSES")) || (data11 === "H2H")) || (data11 === "PF")) || (data11 === "PA")) || (data11 === "PD")) || (data11 === "SF")) || (data11 === "SA")) || (data11 === "SD")) || (data11 === "BP")) || (data11 === "PP"))){validate17.errors = [{instancePath:instancePath+"/league/ordering/" + i2,schemaPath:"#/properties/league/properties/ordering/items/enum",keyword:"enum",params:{allowedValues: schema19.properties.league.properties.ordering.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid6 = _errs27 === errors;if(!valid6){break;}}}}else {validate17.errors = [{instancePath:instancePath+"/league/ordering",schemaPath:"#/properties/league/properties/ordering/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid5 = _errs25 === errors;}else {var valid5 = true;}if(valid5){if(data9.points !== undefined){let data12 = data9.points;const _errs29 = errors;if(errors === _errs29){if(data12 && typeof data12 == "object" && !Array.isArray(data12)){const _errs31 = errors;for(const key4 in data12){if(!(((((((key4 === "played") || (key4 === "perSet")) || (key4 === "win")) || (key4 === "winByOne")) || (key4 === "lose")) || (key4 === "loseByOne")) || (key4 === "forfeit"))){validate17.errors = [{instancePath:instancePath+"/league/points",schemaPath:"#/properties/league/properties/points/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];return false;break;}}if(_errs31 === errors){if(data12.played !== undefined){let data13 = data12.played;const _errs32 = errors;if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){validate17.errors = [{instancePath:instancePath+"/league/points/played",schemaPath:"#/properties/league/properties/points/properties/played/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid7 = _errs32 === errors;}else {var valid7 = true;}if(valid7){if(data12.perSet !== undefined){let data14 = data12.perSet;const _errs34 = errors;if(!(((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14))) && (isFinite(data14)))){validate17.errors = [{instancePath:instancePath+"/league/points/perSet",schemaPath:"#/properties/league/properties/points/properties/perSet/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid7 = _errs34 === errors;}else {var valid7 = true;}if(valid7){if(data12.win !== undefined){let data15 = data12.win;const _errs36 = errors;if(!(((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15))) && (isFinite(data15)))){validate17.errors = [{instancePath:instancePath+"/league/points/win",schemaPath:"#/properties/league/properties/points/properties/win/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid7 = _errs36 === errors;}else {var valid7 = true;}if(valid7){if(data12.winByOne !== undefined){let data16 = data12.winByOne;const _errs38 = errors;if(!(((typeof data16 == "number") && (!(data16 % 1) && !isNaN(data16))) && (isFinite(data16)))){validate17.errors = [{instancePath:instancePath+"/league/points/winByOne",schemaPath:"#/properties/league/properties/points/properties/winByOne/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid7 = _errs38 === errors;}else {var valid7 = true;}if(valid7){if(data12.lose !== undefined){let data17 = data12.lose;const _errs40 = errors;if(!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))){validate17.errors = [{instancePath:instancePath+"/league/points/lose",schemaPath:"#/properties/league/properties/points/properties/lose/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid7 = _errs40 === errors;}else {var valid7 = true;}if(valid7){if(data12.loseByOne !== undefined){let data18 = data12.loseByOne;const _errs42 = errors;if(!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))){validate17.errors = [{instancePath:instancePath+"/league/points/loseByOne",schemaPath:"#/properties/league/properties/points/properties/loseByOne/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid7 = _errs42 === errors;}else {var valid7 = true;}if(valid7){if(data12.forfeit !== undefined){let data19 = data12.forfeit;const _errs44 = errors;if(!(((typeof data19 == "number") && (!(data19 % 1) && !isNaN(data19))) && (isFinite(data19)))){validate17.errors = [{instancePath:instancePath+"/league/points/forfeit",schemaPath:"#/properties/league/properties/points/properties/forfeit/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid7 = _errs44 === errors;}else {var valid7 = true;}}}}}}}}}else {validate17.errors = [{instancePath:instancePath+"/league/points",schemaPath:"#/properties/league/properties/points/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid5 = _errs29 === errors;}else {var valid5 = true;}}}}}else {validate17.errors = [{instancePath:instancePath+"/league",schemaPath:"#/properties/league/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs22 === errors;}else {var valid0 = true;}if(valid0){if(data.matchType !== undefined){let data20 = data.matchType;const _errs46 = errors;if(typeof data20 !== "string"){validate17.errors = [{instancePath:instancePath+"/matchType",schemaPath:"#/properties/matchType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data20 === "sets") || (data20 === "continuous"))){validate17.errors = [{instancePath:instancePath+"/matchType",schemaPath:"#/properties/matchType/enum",keyword:"enum",params:{allowedValues: schema19.properties.matchType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs46 === errors;}else {var valid0 = true;}if(valid0){if(data.sets !== undefined){let data21 = data.sets;const _errs48 = errors;if(errors === _errs48){if(data21 && typeof data21 == "object" && !Array.isArray(data21)){const _errs50 = errors;for(const key5 in data21){if(!((((((((key5 === "maxSets") || (key5 === "setsToWin")) || (key5 === "clearPoints")) || (key5 === "minPoints")) || (key5 === "pointsToWin")) || (key5 === "lastSetPointsToWin")) || (key5 === "maxPoints")) || (key5 === "lastSetMaxPoints"))){validate17.errors = [{instancePath:instancePath+"/sets",schemaPath:"#/properties/sets/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];return false;break;}}if(_errs50 === errors){if(data21.maxSets !== undefined){let data22 = data21.maxSets;const _errs51 = errors;if(!(((typeof data22 == "number") && (!(data22 % 1) && !isNaN(data22))) && (isFinite(data22)))){validate17.errors = [{instancePath:instancePath+"/sets/maxSets",schemaPath:"#/properties/sets/properties/maxSets/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs51){if((typeof data22 == "number") && (isFinite(data22))){if(data22 < 1 || isNaN(data22)){validate17.errors = [{instancePath:instancePath+"/sets/maxSets",schemaPath:"#/properties/sets/properties/maxSets/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid8 = _errs51 === errors;}else {var valid8 = true;}if(valid8){if(data21.setsToWin !== undefined){let data23 = data21.setsToWin;const _errs53 = errors;if(!(((typeof data23 == "number") && (!(data23 % 1) && !isNaN(data23))) && (isFinite(data23)))){validate17.errors = [{instancePath:instancePath+"/sets/setsToWin",schemaPath:"#/properties/sets/properties/setsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs53){if((typeof data23 == "number") && (isFinite(data23))){if(data23 < 1 || isNaN(data23)){validate17.errors = [{instancePath:instancePath+"/sets/setsToWin",schemaPath:"#/properties/sets/properties/setsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid8 = _errs53 === errors;}else {var valid8 = true;}if(valid8){if(data21.clearPoints !== undefined){let data24 = data21.clearPoints;const _errs55 = errors;if(!(((typeof data24 == "number") && (!(data24 % 1) && !isNaN(data24))) && (isFinite(data24)))){validate17.errors = [{instancePath:instancePath+"/sets/clearPoints",schemaPath:"#/properties/sets/properties/clearPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs55){if((typeof data24 == "number") && (isFinite(data24))){if(data24 < 1 || isNaN(data24)){validate17.errors = [{instancePath:instancePath+"/sets/clearPoints",schemaPath:"#/properties/sets/properties/clearPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid8 = _errs55 === errors;}else {var valid8 = true;}if(valid8){if(data21.minPoints !== undefined){let data25 = data21.minPoints;const _errs57 = errors;if(!(((typeof data25 == "number") && (!(data25 % 1) && !isNaN(data25))) && (isFinite(data25)))){validate17.errors = [{instancePath:instancePath+"/sets/minPoints",schemaPath:"#/properties/sets/properties/minPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs57){if((typeof data25 == "number") && (isFinite(data25))){if(data25 < 1 || isNaN(data25)){validate17.errors = [{instancePath:instancePath+"/sets/minPoints",schemaPath:"#/properties/sets/properties/minPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid8 = _errs57 === errors;}else {var valid8 = true;}if(valid8){if(data21.pointsToWin !== undefined){let data26 = data21.pointsToWin;const _errs59 = errors;if(!(((typeof data26 == "number") && (!(data26 % 1) && !isNaN(data26))) && (isFinite(data26)))){validate17.errors = [{instancePath:instancePath+"/sets/pointsToWin",schemaPath:"#/properties/sets/properties/pointsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs59){if((typeof data26 == "number") && (isFinite(data26))){if(data26 < 1 || isNaN(data26)){validate17.errors = [{instancePath:instancePath+"/sets/pointsToWin",schemaPath:"#/properties/sets/properties/pointsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid8 = _errs59 === errors;}else {var valid8 = true;}if(valid8){if(data21.lastSetPointsToWin !== undefined){let data27 = data21.lastSetPointsToWin;const _errs61 = errors;if(!(((typeof data27 == "number") && (!(data27 % 1) && !isNaN(data27))) && (isFinite(data27)))){validate17.errors = [{instancePath:instancePath+"/sets/lastSetPointsToWin",schemaPath:"#/properties/sets/properties/lastSetPointsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs61){if((typeof data27 == "number") && (isFinite(data27))){if(data27 < 1 || isNaN(data27)){validate17.errors = [{instancePath:instancePath+"/sets/lastSetPointsToWin",schemaPath:"#/properties/sets/properties/lastSetPointsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid8 = _errs61 === errors;}else {var valid8 = true;}if(valid8){if(data21.maxPoints !== undefined){let data28 = data21.maxPoints;const _errs63 = errors;if(!(((typeof data28 == "number") && (!(data28 % 1) && !isNaN(data28))) && (isFinite(data28)))){validate17.errors = [{instancePath:instancePath+"/sets/maxPoints",schemaPath:"#/properties/sets/properties/maxPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs63){if((typeof data28 == "number") && (isFinite(data28))){if(data28 < 1 || isNaN(data28)){validate17.errors = [{instancePath:instancePath+"/sets/maxPoints",schemaPath:"#/properties/sets/properties/maxPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid8 = _errs63 === errors;}else {var valid8 = true;}if(valid8){if(data21.lastSetMaxPoints !== undefined){let data29 = data21.lastSetMaxPoints;const _errs65 = errors;if(!(((typeof data29 == "number") && (!(data29 % 1) && !isNaN(data29))) && (isFinite(data29)))){validate17.errors = [{instancePath:instancePath+"/sets/lastSetMaxPoints",schemaPath:"#/properties/sets/properties/lastSetMaxPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs65){if((typeof data29 == "number") && (isFinite(data29))){if(data29 < 1 || isNaN(data29)){validate17.errors = [{instancePath:instancePath+"/sets/lastSetMaxPoints",schemaPath:"#/properties/sets/properties/lastSetMaxPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid8 = _errs65 === errors;}else {var valid8 = true;}}}}}}}}}}else {validate17.errors = [{instancePath:instancePath+"/sets",schemaPath:"#/properties/sets/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs48 === errors;}else {var valid0 = true;}if(valid0){if(data.drawsAllowed !== undefined){const _errs67 = errors;if(typeof data.drawsAllowed !== "boolean"){validate17.errors = [{instancePath:instancePath+"/drawsAllowed",schemaPath:"#/properties/drawsAllowed/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs67 === errors;}else {var valid0 = true;}}}}}}}}}}else {validate17.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate17.errors = vErrors;return errors === 0;}export const validateMatchResultUpdate = validate18;const schema20 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/matchResultUpdate","description":"Result info on a match between two teams","type":"object","additionalProperties":false,"properties":{"complete":{"description":"Whether the match is complete.  This must be set when a match has a \"duration\" or when the matchType is \"continuous\".  What about a \"continuous\" match with no \"duration\" and a target score?  This can be represented by a \"sets\" match with \"maxSets\" = 1","type":"boolean"},"homeTeam":{"description":"The home team playing in the match","type":"object","additionalProperties":false,"properties":{"scores":{"description":"The array of set scores.  If the matchType is 'continuous' then only the first value in the array is used","type":"array","items":{"description":"The set score","type":"integer","minimum":0}},"mvp":{"description":"This team's most valuable player award.  This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  An empty string deletes the value","type":"string"},"forfeit":{"description":"Did this team forfeit the match","type":"boolean","default":false},"bonusPoints":{"description":"Does this team get any bonus points in the league.  This is separate from any league points calculated from the match result, and is added to their league points","type":"integer","default":0,"minimum":0},"penaltyPoints":{"description":"Does this team receive any penalty points in the league.  This is separate from any league points calculated from the match result, and is subtracted from their league points","type":"integer","default":0,"minimum":0},"notes":{"description":"Free form string to add notes about the team relating to this match.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"players":{"description":"The list of players from this team that played in this match.  This can be either a player's name or a reference to a player ID","type":"array","items":{"description":"Either the name of the player or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  Not all entries need to be references, meaning that the document can allow a mix of registered players with a player ID, and unregistered players indicated just by name","type":"string","minLength":1}}}},"awayTeam":{"description":"The away team playing in the match","type":"object","additionalProperties":false,"properties":{"scores":{"description":"The array of set scores.  If the matchType is 'continuous' then only the first value in the array is used","type":"array","items":{"description":"The set score","type":"integer","minimum":0}},"mvp":{"description":"This team's most valuable player award.  This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  An empty string deletes the value","type":"string"},"forfeit":{"description":"Did this team forfeit the match","type":"boolean","default":false},"bonusPoints":{"description":"Does this team get any bonus points in the league.  This is separate from any league points calculated from the match result, and is added to their league points","type":"integer","default":0,"minimum":0},"penaltyPoints":{"description":"Does this team receive any penalty points in the league.  This is separate from any league points calculated from the match result, and is subtracted from their league points","type":"integer","default":0,"minimum":0},"notes":{"description":"Free form string to add notes about the team relating to this match.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"players":{"description":"The list of players from this team that played in this match.  This can be either a player's name or a reference to a player ID","type":"array","items":{"description":"Either the name of the player or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  Not all entries need to be references, meaning that the document can allow a mix of registered players with a player ID, and unregistered players indicated just by name","type":"string","minLength":1}}}},"officials":{"oneOf":[{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to referee the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]},{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"first":{"description":"The first referee","type":"string","minLength":1},"second":{"description":"The second referee","type":"string","minLength":1},"challenge":{"description":"The challenge referee, responsible for resolving challenges from the teams","type":"string","minLength":1},"assistantChallenge":{"description":"The assistant challenge referee, who assists the challenge referee","type":"string","minLength":1},"reserve":{"description":"The reserve referee","type":"string","minLength":1},"scorer":{"description":"The scorer","type":"string","minLength":1},"assistantScorer":{"description":"The assistant scorer","type":"string","minLength":1},"linespersons":{"description":"The list of linespersons","type":"array","maxItems":4,"items":{"description":"A linesperson","type":"string","minLength":1}},"ballCrew":{"description":"The list of people in charge of managing the game balls","type":"array","items":{"description":"A ball person","type":"string","minLength":1}}},"required":["first"]}]},"mvp":{"description":"A most valuable player award for the match. This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  An empty string deletes the value","type":"string","minLength":0,"maxLength":203},"notes":{"description":"Free form string to add notes about a match","type":"string","minLength":1}}};function validate18(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/matchResultUpdate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((((((key0 === "complete") || (key0 === "homeTeam")) || (key0 === "awayTeam")) || (key0 === "officials")) || (key0 === "mvp")) || (key0 === "notes"))){validate18.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.complete !== undefined){const _errs2 = errors;if(typeof data.complete !== "boolean"){validate18.errors = [{instancePath:instancePath+"/complete",schemaPath:"#/properties/complete/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.homeTeam !== undefined){let data1 = data.homeTeam;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){const _errs6 = errors;for(const key1 in data1){if(!(((((((key1 === "scores") || (key1 === "mvp")) || (key1 === "forfeit")) || (key1 === "bonusPoints")) || (key1 === "penaltyPoints")) || (key1 === "notes")) || (key1 === "players"))){validate18.errors = [{instancePath:instancePath+"/homeTeam",schemaPath:"#/properties/homeTeam/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs6 === errors){if(data1.scores !== undefined){let data2 = data1.scores;const _errs7 = errors;if(errors === _errs7){if(Array.isArray(data2)){var valid2 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs9 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate18.errors = [{instancePath:instancePath+"/homeTeam/scores/" + i0,schemaPath:"#/properties/homeTeam/properties/scores/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs9){if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 0 || isNaN(data3)){validate18.errors = [{instancePath:instancePath+"/homeTeam/scores/" + i0,schemaPath:"#/properties/homeTeam/properties/scores/items/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid2 = _errs9 === errors;if(!valid2){break;}}}else {validate18.errors = [{instancePath:instancePath+"/homeTeam/scores",schemaPath:"#/properties/homeTeam/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs7 === errors;}else {var valid1 = true;}if(valid1){if(data1.mvp !== undefined){const _errs11 = errors;if(typeof data1.mvp !== "string"){validate18.errors = [{instancePath:instancePath+"/homeTeam/mvp",schemaPath:"#/properties/homeTeam/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs11 === errors;}else {var valid1 = true;}if(valid1){if(data1.forfeit !== undefined){const _errs13 = errors;if(typeof data1.forfeit !== "boolean"){validate18.errors = [{instancePath:instancePath+"/homeTeam/forfeit",schemaPath:"#/properties/homeTeam/properties/forfeit/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid1 = _errs13 === errors;}else {var valid1 = true;}if(valid1){if(data1.bonusPoints !== undefined){let data6 = data1.bonusPoints;const _errs15 = errors;if(!(((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6))) && (isFinite(data6)))){validate18.errors = [{instancePath:instancePath+"/homeTeam/bonusPoints",schemaPath:"#/properties/homeTeam/properties/bonusPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs15){if((typeof data6 == "number") && (isFinite(data6))){if(data6 < 0 || isNaN(data6)){validate18.errors = [{instancePath:instancePath+"/homeTeam/bonusPoints",schemaPath:"#/properties/homeTeam/properties/bonusPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid1 = _errs15 === errors;}else {var valid1 = true;}if(valid1){if(data1.penaltyPoints !== undefined){let data7 = data1.penaltyPoints;const _errs17 = errors;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){validate18.errors = [{instancePath:instancePath+"/homeTeam/penaltyPoints",schemaPath:"#/properties/homeTeam/properties/penaltyPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs17){if((typeof data7 == "number") && (isFinite(data7))){if(data7 < 0 || isNaN(data7)){validate18.errors = [{instancePath:instancePath+"/homeTeam/penaltyPoints",schemaPath:"#/properties/homeTeam/properties/penaltyPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid1 = _errs17 === errors;}else {var valid1 = true;}if(valid1){if(data1.notes !== undefined){let data8 = data1.notes;const _errs19 = errors;if(errors === _errs19){if(typeof data8 === "string"){if(func2(data8) < 1){validate18.errors = [{instancePath:instancePath+"/homeTeam/notes",schemaPath:"#/properties/homeTeam/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate18.errors = [{instancePath:instancePath+"/homeTeam/notes",schemaPath:"#/properties/homeTeam/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid1 = _errs19 === errors;}else {var valid1 = true;}if(valid1){if(data1.players !== undefined){let data9 = data1.players;const _errs21 = errors;if(errors === _errs21){if(Array.isArray(data9)){var valid3 = true;const len1 = data9.length;for(let i1=0; i1<len1; i1++){let data10 = data9[i1];const _errs23 = errors;if(errors === _errs23){if(typeof data10 === "string"){if(func2(data10) < 1){validate18.errors = [{instancePath:instancePath+"/homeTeam/players/" + i1,schemaPath:"#/properties/homeTeam/properties/players/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate18.errors = [{instancePath:instancePath+"/homeTeam/players/" + i1,schemaPath:"#/properties/homeTeam/properties/players/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid3 = _errs23 === errors;if(!valid3){break;}}}else {validate18.errors = [{instancePath:instancePath+"/homeTeam/players",schemaPath:"#/properties/homeTeam/properties/players/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs21 === errors;}else {var valid1 = true;}}}}}}}}}else {validate18.errors = [{instancePath:instancePath+"/homeTeam",schemaPath:"#/properties/homeTeam/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.awayTeam !== undefined){let data11 = data.awayTeam;const _errs25 = errors;if(errors === _errs25){if(data11 && typeof data11 == "object" && !Array.isArray(data11)){const _errs27 = errors;for(const key2 in data11){if(!(((((((key2 === "scores") || (key2 === "mvp")) || (key2 === "forfeit")) || (key2 === "bonusPoints")) || (key2 === "penaltyPoints")) || (key2 === "notes")) || (key2 === "players"))){validate18.errors = [{instancePath:instancePath+"/awayTeam",schemaPath:"#/properties/awayTeam/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];return false;break;}}if(_errs27 === errors){if(data11.scores !== undefined){let data12 = data11.scores;const _errs28 = errors;if(errors === _errs28){if(Array.isArray(data12)){var valid5 = true;const len2 = data12.length;for(let i2=0; i2<len2; i2++){let data13 = data12[i2];const _errs30 = errors;if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){validate18.errors = [{instancePath:instancePath+"/awayTeam/scores/" + i2,schemaPath:"#/properties/awayTeam/properties/scores/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs30){if((typeof data13 == "number") && (isFinite(data13))){if(data13 < 0 || isNaN(data13)){validate18.errors = [{instancePath:instancePath+"/awayTeam/scores/" + i2,schemaPath:"#/properties/awayTeam/properties/scores/items/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid5 = _errs30 === errors;if(!valid5){break;}}}else {validate18.errors = [{instancePath:instancePath+"/awayTeam/scores",schemaPath:"#/properties/awayTeam/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid4 = _errs28 === errors;}else {var valid4 = true;}if(valid4){if(data11.mvp !== undefined){const _errs32 = errors;if(typeof data11.mvp !== "string"){validate18.errors = [{instancePath:instancePath+"/awayTeam/mvp",schemaPath:"#/properties/awayTeam/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs32 === errors;}else {var valid4 = true;}if(valid4){if(data11.forfeit !== undefined){const _errs34 = errors;if(typeof data11.forfeit !== "boolean"){validate18.errors = [{instancePath:instancePath+"/awayTeam/forfeit",schemaPath:"#/properties/awayTeam/properties/forfeit/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid4 = _errs34 === errors;}else {var valid4 = true;}if(valid4){if(data11.bonusPoints !== undefined){let data16 = data11.bonusPoints;const _errs36 = errors;if(!(((typeof data16 == "number") && (!(data16 % 1) && !isNaN(data16))) && (isFinite(data16)))){validate18.errors = [{instancePath:instancePath+"/awayTeam/bonusPoints",schemaPath:"#/properties/awayTeam/properties/bonusPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs36){if((typeof data16 == "number") && (isFinite(data16))){if(data16 < 0 || isNaN(data16)){validate18.errors = [{instancePath:instancePath+"/awayTeam/bonusPoints",schemaPath:"#/properties/awayTeam/properties/bonusPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid4 = _errs36 === errors;}else {var valid4 = true;}if(valid4){if(data11.penaltyPoints !== undefined){let data17 = data11.penaltyPoints;const _errs38 = errors;if(!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))){validate18.errors = [{instancePath:instancePath+"/awayTeam/penaltyPoints",schemaPath:"#/properties/awayTeam/properties/penaltyPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs38){if((typeof data17 == "number") && (isFinite(data17))){if(data17 < 0 || isNaN(data17)){validate18.errors = [{instancePath:instancePath+"/awayTeam/penaltyPoints",schemaPath:"#/properties/awayTeam/properties/penaltyPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid4 = _errs38 === errors;}else {var valid4 = true;}if(valid4){if(data11.notes !== undefined){let data18 = data11.notes;const _errs40 = errors;if(errors === _errs40){if(typeof data18 === "string"){if(func2(data18) < 1){validate18.errors = [{instancePath:instancePath+"/awayTeam/notes",schemaPath:"#/properties/awayTeam/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate18.errors = [{instancePath:instancePath+"/awayTeam/notes",schemaPath:"#/properties/awayTeam/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid4 = _errs40 === errors;}else {var valid4 = true;}if(valid4){if(data11.players !== undefined){let data19 = data11.players;const _errs42 = errors;if(errors === _errs42){if(Array.isArray(data19)){var valid6 = true;const len3 = data19.length;for(let i3=0; i3<len3; i3++){let data20 = data19[i3];const _errs44 = errors;if(errors === _errs44){if(typeof data20 === "string"){if(func2(data20) < 1){validate18.errors = [{instancePath:instancePath+"/awayTeam/players/" + i3,schemaPath:"#/properties/awayTeam/properties/players/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate18.errors = [{instancePath:instancePath+"/awayTeam/players/" + i3,schemaPath:"#/properties/awayTeam/properties/players/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid6 = _errs44 === errors;if(!valid6){break;}}}else {validate18.errors = [{instancePath:instancePath+"/awayTeam/players",schemaPath:"#/properties/awayTeam/properties/players/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid4 = _errs42 === errors;}else {var valid4 = true;}}}}}}}}}else {validate18.errors = [{instancePath:instancePath+"/awayTeam",schemaPath:"#/properties/awayTeam/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.officials !== undefined){let data21 = data.officials;const _errs46 = errors;const _errs47 = errors;let valid7 = false;let passing0 = null;const _errs48 = errors;if(errors === _errs48){if(data21 && typeof data21 == "object" && !Array.isArray(data21)){let missing0;if((data21.team === undefined) && (missing0 = "team")){const err0 = {instancePath:instancePath+"/officials",schemaPath:"#/properties/officials/oneOf/0/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {const _errs50 = errors;for(const key3 in data21){if(!(key3 === "team")){const err1 = {instancePath:instancePath+"/officials",schemaPath:"#/properties/officials/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;break;}}if(_errs50 === errors){if(data21.team !== undefined){let data22 = data21.team;const _errs51 = errors;if(errors === _errs51){if(typeof data22 === "string"){if(func2(data22) > 1000){const err2 = {instancePath:instancePath+"/officials/team",schemaPath:"#/properties/officials/oneOf/0/properties/team/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}else {if(func2(data22) < 1){const err3 = {instancePath:instancePath+"/officials/team",schemaPath:"#/properties/officials/oneOf/0/properties/team/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}}else {const err4 = {instancePath:instancePath+"/officials/team",schemaPath:"#/properties/officials/oneOf/0/properties/team/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}}}}}else {const err5 = {instancePath:instancePath+"/officials",schemaPath:"#/properties/officials/oneOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0){valid7 = true;passing0 = 0;}const _errs53 = errors;if(errors === _errs53){if(data21 && typeof data21 == "object" && !Array.isArray(data21)){let missing1;if((data21.first === undefined) && (missing1 = "first")){const err6 = {instancePath:instancePath+"/officials",schemaPath:"#/properties/officials/oneOf/1/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}else {const _errs55 = errors;for(const key4 in data21){if(!(func22.call(schema20.properties.officials.oneOf[1].properties, key4))){const err7 = {instancePath:instancePath+"/officials",schemaPath:"#/properties/officials/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;break;}}if(_errs55 === errors){if(data21.first !== undefined){let data23 = data21.first;const _errs56 = errors;if(errors === _errs56){if(typeof data23 === "string"){if(func2(data23) < 1){const err8 = {instancePath:instancePath+"/officials/first",schemaPath:"#/properties/officials/oneOf/1/properties/first/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}else {const err9 = {instancePath:instancePath+"/officials/first",schemaPath:"#/properties/officials/oneOf/1/properties/first/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var valid9 = _errs56 === errors;}else {var valid9 = true;}if(valid9){if(data21.second !== undefined){let data24 = data21.second;const _errs58 = errors;if(errors === _errs58){if(typeof data24 === "string"){if(func2(data24) < 1){const err10 = {instancePath:instancePath+"/officials/second",schemaPath:"#/properties/officials/oneOf/1/properties/second/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}else {const err11 = {instancePath:instancePath+"/officials/second",schemaPath:"#/properties/officials/oneOf/1/properties/second/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var valid9 = _errs58 === errors;}else {var valid9 = true;}if(valid9){if(data21.challenge !== undefined){let data25 = data21.challenge;const _errs60 = errors;if(errors === _errs60){if(typeof data25 === "string"){if(func2(data25) < 1){const err12 = {instancePath:instancePath+"/officials/challenge",schemaPath:"#/properties/officials/oneOf/1/properties/challenge/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}else {const err13 = {instancePath:instancePath+"/officials/challenge",schemaPath:"#/properties/officials/oneOf/1/properties/challenge/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var valid9 = _errs60 === errors;}else {var valid9 = true;}if(valid9){if(data21.assistantChallenge !== undefined){let data26 = data21.assistantChallenge;const _errs62 = errors;if(errors === _errs62){if(typeof data26 === "string"){if(func2(data26) < 1){const err14 = {instancePath:instancePath+"/officials/assistantChallenge",schemaPath:"#/properties/officials/oneOf/1/properties/assistantChallenge/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}else {const err15 = {instancePath:instancePath+"/officials/assistantChallenge",schemaPath:"#/properties/officials/oneOf/1/properties/assistantChallenge/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var valid9 = _errs62 === errors;}else {var valid9 = true;}if(valid9){if(data21.reserve !== undefined){let data27 = data21.reserve;const _errs64 = errors;if(errors === _errs64){if(typeof data27 === "string"){if(func2(data27) < 1){const err16 = {instancePath:instancePath+"/officials/reserve",schemaPath:"#/properties/officials/oneOf/1/properties/reserve/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}else {const err17 = {instancePath:instancePath+"/officials/reserve",schemaPath:"#/properties/officials/oneOf/1/properties/reserve/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var valid9 = _errs64 === errors;}else {var valid9 = true;}if(valid9){if(data21.scorer !== undefined){let data28 = data21.scorer;const _errs66 = errors;if(errors === _errs66){if(typeof data28 === "string"){if(func2(data28) < 1){const err18 = {instancePath:instancePath+"/officials/scorer",schemaPath:"#/properties/officials/oneOf/1/properties/scorer/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}else {const err19 = {instancePath:instancePath+"/officials/scorer",schemaPath:"#/properties/officials/oneOf/1/properties/scorer/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var valid9 = _errs66 === errors;}else {var valid9 = true;}if(valid9){if(data21.assistantScorer !== undefined){let data29 = data21.assistantScorer;const _errs68 = errors;if(errors === _errs68){if(typeof data29 === "string"){if(func2(data29) < 1){const err20 = {instancePath:instancePath+"/officials/assistantScorer",schemaPath:"#/properties/officials/oneOf/1/properties/assistantScorer/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}else {const err21 = {instancePath:instancePath+"/officials/assistantScorer",schemaPath:"#/properties/officials/oneOf/1/properties/assistantScorer/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var valid9 = _errs68 === errors;}else {var valid9 = true;}if(valid9){if(data21.linespersons !== undefined){let data30 = data21.linespersons;const _errs70 = errors;if(errors === _errs70){if(Array.isArray(data30)){if(data30.length > 4){const err22 = {instancePath:instancePath+"/officials/linespersons",schemaPath:"#/properties/officials/oneOf/1/properties/linespersons/maxItems",keyword:"maxItems",params:{limit: 4},message:"must NOT have more than 4 items"};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}else {var valid10 = true;const len4 = data30.length;for(let i4=0; i4<len4; i4++){let data31 = data30[i4];const _errs72 = errors;if(errors === _errs72){if(typeof data31 === "string"){if(func2(data31) < 1){const err23 = {instancePath:instancePath+"/officials/linespersons/" + i4,schemaPath:"#/properties/officials/oneOf/1/properties/linespersons/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}else {const err24 = {instancePath:instancePath+"/officials/linespersons/" + i4,schemaPath:"#/properties/officials/oneOf/1/properties/linespersons/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var valid10 = _errs72 === errors;if(!valid10){break;}}}}else {const err25 = {instancePath:instancePath+"/officials/linespersons",schemaPath:"#/properties/officials/oneOf/1/properties/linespersons/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var valid9 = _errs70 === errors;}else {var valid9 = true;}if(valid9){if(data21.ballCrew !== undefined){let data32 = data21.ballCrew;const _errs74 = errors;if(errors === _errs74){if(Array.isArray(data32)){var valid11 = true;const len5 = data32.length;for(let i5=0; i5<len5; i5++){let data33 = data32[i5];const _errs76 = errors;if(errors === _errs76){if(typeof data33 === "string"){if(func2(data33) < 1){const err26 = {instancePath:instancePath+"/officials/ballCrew/" + i5,schemaPath:"#/properties/officials/oneOf/1/properties/ballCrew/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}else {const err27 = {instancePath:instancePath+"/officials/ballCrew/" + i5,schemaPath:"#/properties/officials/oneOf/1/properties/ballCrew/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var valid11 = _errs76 === errors;if(!valid11){break;}}}else {const err28 = {instancePath:instancePath+"/officials/ballCrew",schemaPath:"#/properties/officials/oneOf/1/properties/ballCrew/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var valid9 = _errs74 === errors;}else {var valid9 = true;}}}}}}}}}}}}else {const err29 = {instancePath:instancePath+"/officials",schemaPath:"#/properties/officials/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 1];}else {if(_valid0){valid7 = true;passing0 = 1;}}if(!valid7){const err30 = {instancePath:instancePath+"/officials",schemaPath:"#/properties/officials/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;validate18.errors = vErrors;return false;}else {errors = _errs47;if(vErrors !== null){if(_errs47){vErrors.length = _errs47;}else {vErrors = null;}}}var valid0 = _errs46 === errors;}else {var valid0 = true;}if(valid0){if(data.mvp !== undefined){let data34 = data.mvp;const _errs78 = errors;if(errors === _errs78){if(typeof data34 === "string"){if(func2(data34) > 203){validate18.errors = [{instancePath:instancePath+"/mvp",schemaPath:"#/properties/mvp/maxLength",keyword:"maxLength",params:{limit: 203},message:"must NOT have more than 203 characters"}];return false;}else {if(func2(data34) < 0){validate18.errors = [{instancePath:instancePath+"/mvp",schemaPath:"#/properties/mvp/minLength",keyword:"minLength",params:{limit: 0},message:"must NOT have fewer than 0 characters"}];return false;}}}else {validate18.errors = [{instancePath:instancePath+"/mvp",schemaPath:"#/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs78 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data35 = data.notes;const _errs80 = errors;if(errors === _errs80){if(typeof data35 === "string"){if(func2(data35) < 1){validate18.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate18.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs80 === errors;}else {var valid0 = true;}}}}}}}}else {validate18.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate18.errors = vErrors;return errors === 0;}export const validateMatchUpdate = validate19;const schema21 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/matchUpdate","description":"Details on a stage","type":"object","additionalProperties":false,"properties":{"name":{"description":"TODOOOO","type":"string","minLength":1,"maxLength":1000}}};function validate19(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/matchUpdate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!(key0 === "name")){validate19.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){let data0 = data.name;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 1000){validate19.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data0) < 1){validate19.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate19.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}}}else {validate19.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate19.errors = vErrors;return errors === 0;}export const validatePlayerCreate = validate20;const schema22 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/playerCreate","description":"The details of the new player","type":"object","additionalProperties":false,"properties":{"id":{"description":"A unique ID for this player. This may be the player's registration number.  This must be unique within the competition.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"name":{"description":"The name of this player","type":"string","minLength":1,"maxLength":1000},"number":{"description":"The player's shirt number","type":"integer","minimum":1},"teams":{"description":"An ordered list of teams the player is/has been registered for in this competition, in the order that they have been registered (and therefore transferred in the case of more than one entry).  A player can only be registered with one team at any time within this competition, meaning that if there are multiple teams listed, either all but the last entry MUST have an \"until\" value, or there must be no \"from\" or \"until\" values in any entry","type":"array","items":{"description":"A Player's team registration entry, linking them to the specified team, potentially for the time period covered by \"from\" to \"until\"","type":"object","additionalProperties":false,"properties":{"id":{"description":"The team ID that the player is/was registered with","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"from":{"description":"The date from which the player is/was registered with this team.  When this is not present, there should not be any \"from\" or \"until\" values in any entry in this player's \"teams\" array","type":"string","format":"date"},"until":{"description":"The date up to which the player was registered with this team.  When a \"from\" date is specified and this is not, it should be taken that a player is still registered with this team","type":"string","format":"date"},"notes":{"description":"Free form string to add notes about this player's team entry.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}},"required":["id"]}},"notes":{"description":"Free form string to add notes about the player.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}},"required":["name"]};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/playerCreate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.name === undefined) && (missing0 = "name")){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((((key0 === "id") || (key0 === "name")) || (key0 === "number")) || (key0 === "teams")) || (key0 === "notes"))){validate20.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 100){validate20.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data0) < 1){validate20.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data0)){validate20.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate20.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) > 1000){validate20.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data1) < 1){validate20.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate20.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.number !== undefined){let data2 = data.number;const _errs6 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate20.errors = [{instancePath:instancePath+"/number",schemaPath:"#/properties/number/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs6){if((typeof data2 == "number") && (isFinite(data2))){if(data2 < 1 || isNaN(data2)){validate20.errors = [{instancePath:instancePath+"/number",schemaPath:"#/properties/number/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.teams !== undefined){let data3 = data.teams;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data3)){var valid1 = true;const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];const _errs10 = errors;if(errors === _errs10){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){let missing1;if((data4.id === undefined) && (missing1 = "id")){validate20.errors = [{instancePath:instancePath+"/teams/" + i0,schemaPath:"#/properties/teams/items/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs12 = errors;for(const key1 in data4){if(!((((key1 === "id") || (key1 === "from")) || (key1 === "until")) || (key1 === "notes"))){validate20.errors = [{instancePath:instancePath+"/teams/" + i0,schemaPath:"#/properties/teams/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs12 === errors){if(data4.id !== undefined){let data5 = data4.id;const _errs13 = errors;if(errors === _errs13){if(typeof data5 === "string"){if(func2(data5) > 100){validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/id",schemaPath:"#/properties/teams/items/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data5) < 1){validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/id",schemaPath:"#/properties/teams/items/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data5)){validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/id",schemaPath:"#/properties/teams/items/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/id",schemaPath:"#/properties/teams/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs13 === errors;}else {var valid2 = true;}if(valid2){if(data4.from !== undefined){let data6 = data4.from;const _errs15 = errors;if(errors === _errs15){if(errors === _errs15){if(typeof data6 === "string"){if(!(formats4.validate(data6))){validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/from",schemaPath:"#/properties/teams/items/properties/from/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/from",schemaPath:"#/properties/teams/items/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs15 === errors;}else {var valid2 = true;}if(valid2){if(data4.until !== undefined){let data7 = data4.until;const _errs17 = errors;if(errors === _errs17){if(errors === _errs17){if(typeof data7 === "string"){if(!(formats4.validate(data7))){validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/until",schemaPath:"#/properties/teams/items/properties/until/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/until",schemaPath:"#/properties/teams/items/properties/until/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs17 === errors;}else {var valid2 = true;}if(valid2){if(data4.notes !== undefined){let data8 = data4.notes;const _errs19 = errors;if(errors === _errs19){if(typeof data8 === "string"){if(func2(data8) < 1){validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/notes",schemaPath:"#/properties/teams/items/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/teams/" + i0+"/notes",schemaPath:"#/properties/teams/items/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs19 === errors;}else {var valid2 = true;}}}}}}}else {validate20.errors = [{instancePath:instancePath+"/teams/" + i0,schemaPath:"#/properties/teams/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs10 === errors;if(!valid1){break;}}}else {validate20.errors = [{instancePath:instancePath+"/teams",schemaPath:"#/properties/teams/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data9 = data.notes;const _errs21 = errors;if(errors === _errs21){if(typeof data9 === "string"){if(func2(data9) < 1){validate20.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs21 === errors;}else {var valid0 = true;}}}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}export const validatePlayerTransfer = validate21;const schema23 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/playerTransfer","description":"A Player's team registration entry, linking them to the specified team","type":"object","additionalProperties":false,"properties":{"date":{"description":"The date from which the player is registering with this team.  Any exiting team registration is updated such that the \"until\" field is set to this value.  When this is not present, this is taken as today's date.","type":"string","format":"date"},"notes":{"description":"Free form string to add notes about this player's team entry.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}}};function validate21(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/playerTransfer" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((key0 === "date") || (key0 === "notes"))){validate21.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.date !== undefined){let data0 = data.date;const _errs2 = errors;if(errors === _errs2){if(errors === _errs2){if(typeof data0 === "string"){if(!(formats4.validate(data0))){validate21.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""}];return false;}}else {validate21.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data1 = data.notes;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) < 1){validate21.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate21.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}}}}else {validate21.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate21.errors = vErrors;return errors === 0;}export const validatePlayerUpdate = validate22;const schema24 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/playerUpdate","description":"Details on a player","type":"object","additionalProperties":false,"properties":{"id":{"description":"A unique ID for this player. This may be the player's registration number.  This must be unique within the competition.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"name":{"description":"The name of this player","type":"string","minLength":1,"maxLength":1000},"number":{"description":"The player's shirt number","type":"integer","minimum":1},"teams":{"description":"An ordered list of teams the player is/has been registered for in this competition, in the order that they have been registered (and therefore transferred in the case of more than one entry).  A player can only be registered with one team at any time within this competition, meaning that if there are multiple teams listed, either all but the last entry MUST have an \"until\" value, or there must be no \"from\" or \"until\" values in any entry","type":"array","items":{"description":"A Player's team registration entry, linking them to the specified team, potentially for the time period covered by \"from\" to \"until\"","type":"object","additionalProperties":false,"properties":{"id":{"description":"The team ID that the player is/was registered with","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"from":{"description":"The date from which the player is/was registered with this team.  When this is not present, there should not be any \"from\" or \"until\" values in any entry in this player's \"teams\" array","type":"string","format":"date"},"until":{"description":"The date up to which the player was registered with this team.  When a \"from\" date is specified and this is not, it should be taken that a player is still registered with this team","type":"string","format":"date"},"notes":{"description":"Free form string to add notes about this player's team entry.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}},"required":["id"]}},"notes":{"description":"Free form string to add notes about the player.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}}};function validate22(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/playerUpdate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!(((((key0 === "id") || (key0 === "name")) || (key0 === "number")) || (key0 === "teams")) || (key0 === "notes"))){validate22.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 100){validate22.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data0) < 1){validate22.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data0)){validate22.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate22.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) > 1000){validate22.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data1) < 1){validate22.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate22.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.number !== undefined){let data2 = data.number;const _errs6 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate22.errors = [{instancePath:instancePath+"/number",schemaPath:"#/properties/number/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs6){if((typeof data2 == "number") && (isFinite(data2))){if(data2 < 1 || isNaN(data2)){validate22.errors = [{instancePath:instancePath+"/number",schemaPath:"#/properties/number/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.teams !== undefined){let data3 = data.teams;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data3)){var valid1 = true;const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];const _errs10 = errors;if(errors === _errs10){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){let missing0;if((data4.id === undefined) && (missing0 = "id")){validate22.errors = [{instancePath:instancePath+"/teams/" + i0,schemaPath:"#/properties/teams/items/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs12 = errors;for(const key1 in data4){if(!((((key1 === "id") || (key1 === "from")) || (key1 === "until")) || (key1 === "notes"))){validate22.errors = [{instancePath:instancePath+"/teams/" + i0,schemaPath:"#/properties/teams/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs12 === errors){if(data4.id !== undefined){let data5 = data4.id;const _errs13 = errors;if(errors === _errs13){if(typeof data5 === "string"){if(func2(data5) > 100){validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/id",schemaPath:"#/properties/teams/items/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data5) < 1){validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/id",schemaPath:"#/properties/teams/items/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data5)){validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/id",schemaPath:"#/properties/teams/items/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/id",schemaPath:"#/properties/teams/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs13 === errors;}else {var valid2 = true;}if(valid2){if(data4.from !== undefined){let data6 = data4.from;const _errs15 = errors;if(errors === _errs15){if(errors === _errs15){if(typeof data6 === "string"){if(!(formats4.validate(data6))){validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/from",schemaPath:"#/properties/teams/items/properties/from/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""}];return false;}}else {validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/from",schemaPath:"#/properties/teams/items/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs15 === errors;}else {var valid2 = true;}if(valid2){if(data4.until !== undefined){let data7 = data4.until;const _errs17 = errors;if(errors === _errs17){if(errors === _errs17){if(typeof data7 === "string"){if(!(formats4.validate(data7))){validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/until",schemaPath:"#/properties/teams/items/properties/until/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""}];return false;}}else {validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/until",schemaPath:"#/properties/teams/items/properties/until/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid2 = _errs17 === errors;}else {var valid2 = true;}if(valid2){if(data4.notes !== undefined){let data8 = data4.notes;const _errs19 = errors;if(errors === _errs19){if(typeof data8 === "string"){if(func2(data8) < 1){validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/notes",schemaPath:"#/properties/teams/items/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate22.errors = [{instancePath:instancePath+"/teams/" + i0+"/notes",schemaPath:"#/properties/teams/items/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs19 === errors;}else {var valid2 = true;}}}}}}}else {validate22.errors = [{instancePath:instancePath+"/teams/" + i0,schemaPath:"#/properties/teams/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs10 === errors;if(!valid1){break;}}}else {validate22.errors = [{instancePath:instancePath+"/teams",schemaPath:"#/properties/teams/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data9 = data.notes;const _errs21 = errors;if(errors === _errs21){if(typeof data9 === "string"){if(func2(data9) < 1){validate22.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate22.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs21 === errors;}else {var valid0 = true;}}}}}}}else {validate22.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate22.errors = vErrors;return errors === 0;}export const validateStageAppend = validate23;const schema25 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/stageAppend","description":"A single competition stage","type":"object","additionalProperties":false,"properties":{"id":{"description":"A unique ID for this stage, e.g. 'LG'.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"name":{"description":"Descriptive title for the stage, e.g. 'Pools'","type":"string","minLength":1,"maxLength":1000},"notes":{"description":"Free form string to add notes about this stage.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"description":{"description":"An array of string values as a verbose description of the nature of the stage, e.g. 'The first stage of the competition will consist of separate pools, where....'","type":"array","items":{"description":"A part of the description of this stage","type":"string","minLength":1}},"groups":{"description":"The groups within a stage of the competition.  There may be only one group (e.g. for a flat league) or multiple in parallel (e.g. pool 1, pool 2)","type":"array","items":{"description":"A group within this stage of the competition","type":"object","additionalProperties":false,"properties":{"id":{"description":"A unique ID for this group, e.g. 'P1'.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"name":{"description":"Descriptive title for the group, e.g. 'Pool 1'","type":"string","minLength":1,"maxLength":1000},"notes":{"description":"Free form string to add notes about this group.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"description":{"description":"An array of string values as a verbose description of the nature of the group, e.g. 'For the pool stage, teams will play each other once, with the top 2 teams going through to....'","type":"array","items":{"description":"A part of the description of this stage","type":"string","minLength":1}},"type":{"description":"The type of competition applying to this group, which may dictate how the results are processed.  If this has the value 'league' then the property 'league' must be defined","type":"string","enum":["league","crossover","knockout"]},"knockout":{"description":"Configuration for the knockout group","type":"object","additionalProperties":false,"properties":{"standing":{"description":"Configuration for the knockout group","type":"array","items":{"description":"An ordered mapping from a position to a team ID","type":"object","additionalProperties":false,"properties":{"position":{"description":"The text description of the position, e.g. \"1st\", \"2nd\".  Having this field allows multiple teams to have the same \"position\", for example if there are no play-off games then two entries can have the value \"3rd\"","type":"string","minLength":1},"id":{"description":"The identifier for the team.  This must be a team reference (see the documentation), for example for the team in \"1st\", this would refer to the winner of the final in this stage->group","type":"string","minLength":1}},"required":["position","id"]},"minItems":1}},"required":["standing"]},"league":{"description":"Configuration for the league","type":"object","additionalProperties":false,"properties":{"ordering":{"description":"An array of parameters that define how the league positions are worked out, where the array position determines the precedence of that parameter, e.g. [ \"PTS\", \"SD\" ] means that league position is determined by league points, with ties decided by set difference.  Valid parameters are 'PTS'=league points, 'WINS'=wins, 'LOSSES'=losses, 'H2H'=head to head, PF'=points for, 'PA'=points against, 'PD'=points difference, 'SF'=sets for, 'SA'=sets against, 'SD'=set difference, 'BP'=bonus points, 'PP'=penalty points.  When comparing teams, a higher value for a parameter results in a higher league position except when comparing 'LOSSES', 'PA', 'SA', and 'PP' (where a lower value results in a higher league position).  Note that 'H2H' only considers wins and losses between two teams; this means that, depending on whether draws are allowed or whether teams play each other multiple times, the head to head comparison may not be able to distinguish between two teams","type":"array","items":{"description":"A parameter that defines the league position","type":"string","enum":["PTS","WINS","LOSSES","H2H","PF","PA","PD","SF","SA","SD","BP","PP"]},"minItems":1},"points":{"description":"Properties defining how to calculate the league points based on match results","type":"object","additionalProperties":false,"properties":{"played":{"description":"Number of league points for playing the match.  Note that a forfeit counts as a \"played\" match, so if this has a non-zero value and the desire is for a forfeit to yield zero points then the \"forfeit\" value should be set to the same as this value","type":"integer","default":0},"perSet":{"description":"Number of league points for each set won","type":"integer","default":0},"win":{"description":"Number of league points for winning (by 2 sets or more if playing sets)","type":"integer","default":3},"winByOne":{"description":"Number of league points for winning by 1 set","type":"integer","default":0},"lose":{"description":"Number of league points for losing (by 2 sets or more if playing sets)","type":"integer","default":0},"loseByOne":{"description":"Number of league points for losing by 1 set","type":"integer","default":0},"forfeit":{"description":"Number of league penalty points for forfeiting a match.  This should be a positive number and will be subtracted from a team's league points for each forfeited match","type":"integer","default":0}}}},"required":["ordering","points"]},"matchType":{"description":"Are the matches played in sets or continuous points.  If this has the value 'sets' then the property 'sets' must be defined","type":"string","enum":["sets","continuous"]},"sets":{"description":"Configuration defining the nature of a set","type":"object","additionalProperties":false,"properties":{"maxSets":{"description":"The maximum number of sets that could be played, often known as 'best of', e.g. if this has the value '5' then the match is played as 'best of 5 sets'","type":"integer","default":5,"minimum":1},"setsToWin":{"description":"The number of sets that must be won to win the match.  This is usually one more than half the 'maxSets', but may be needed if draws are allowed, e.g. if a competition dictates that exactly 2 sets must be played (by setting 'maxSets' to '2') and that draws are allowed, then 'setsToWin' should still be set to '2' to indicate that 2 sets are needed to win the match","type":"integer","default":3,"minimum":1},"clearPoints":{"description":"The number of points lead that the winning team must have, e.g. if this has the value '2' then teams must 'win by 2 clear points'.  Note that if 'maxPoints' has a value then that takes precedence, i.e. if 'maxPoints' is set to '35' then a team can win '35-34' irrespective of the value of 'clearPoints'","type":"integer","default":2,"minimum":1},"minPoints":{"description":"The minimum number of points that either team must score for a set to count as valid.  Usually only used for time-limited matches","type":"integer","default":1,"minimum":1},"pointsToWin":{"description":"The minimum number of points required to win all but the last set","type":"integer","default":25,"minimum":1},"lastSetPointsToWin":{"description":"The minimum number of points required to win the last set","type":"integer","default":15,"minimum":1},"maxPoints":{"description":"The upper limit of points that can be scored in a set","type":"integer","default":1000,"minimum":1},"lastSetMaxPoints":{"description":"The upper limit of points that can be scored in the last set","type":"integer","default":1000,"minimum":1}}},"drawsAllowed":{"description":"Sets whether drawn matches are allowed","default":false,"type":"boolean"},"matches":{"$ref":"#/$defs/matches"}},"allOf":[{"if":{"properties":{"type":{"const":"league"}},"required":["type"]},"then":{"required":["league"]}},{"if":{"properties":{"type":{"const":"crossover"}},"required":["type"]},"then":{"anyOf":[{"properties":{"drawsAllowed":{"enum":[false]}}},{"not":{"required":["drawsAllowed"]}}]}},{"if":{"properties":{"type":{"const":"knockout"}},"required":["type"]},"then":{"anyOf":[{"properties":{"drawsAllowed":{"enum":[false]}}},{"not":{"required":["drawsAllowed"]}}]}},{"if":{"properties":{"matchType":{"const":"continuous"}},"required":["matchType"]},"then":{"properties":{"matches":{"type":"array","items":{"type":"object","properties":{"homeTeam":{"type":"object","properties":{"scores":{"type":"array","maxItems":1}}},"awayTeam":{"type":"object","properties":{"scores":{"type":"array","maxItems":1}}}}}}},"allOf":[{"not":{"required":["sets"]}}]}},{"if":{"properties":{"matchType":{"const":"continuous"}},"required":["matchType"]},"then":{"allOf":[{"not":{"required":["sets"]}}]}},{"if":{"properties":{"matchType":{"const":"continuous"},"matches":{"type":"array","items":{"type":"object","properties":{"type":{"const":"match"}}}}},"required":["matchType"]},"then":{"properties":{"matches":{"type":"array","items":{"type":"object","required":["complete"]}}}}}],"required":["id","type","matchType","matches"]}},"ifUnknown":{"description":"It can be useful to still present something to the user about the later stages of a competition, even if the teams playing in that stage is not yet known.  This defines what should be presented in any application handling this competition's data in such cases","type":"object","additionalProperties":false,"properties":{"description":{"description":"An array of string values to be presented in the case that the teams in this stage are not yet known, typically as an explanation of what this stage will contain (e.g. 'The crossover games will be between the top two teams in each pool')","type":"array","items":{"description":"A part of the description of this stage","type":"string","minLength":1}},"matches":{"$ref":"#/$defs/matches"}},"required":["description"]}},"required":["groups"],"$defs":{"team":{"description":"A team playing in the match","type":"object","additionalProperties":false,"properties":{"id":{"description":"The identifier for the team.  This can either be a team ID or a team reference (see the documentation)","type":"string","minLength":1,"maxLength":1000},"scores":{"description":"The array of set scores.  If the matchType is 'continuous' then only the first value in the array is used","type":"array","items":{"description":"The set score","type":"integer","minimum":0}},"mvp":{"description":"This team's most valuable player award.  This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1},"forfeit":{"description":"Did this team forfeit the match","type":"boolean","default":false},"bonusPoints":{"description":"Does this team get any bonus points in the league.  This is separate from any league points calculated from the match result, and is added to their league points","type":"integer","default":0,"minimum":0},"penaltyPoints":{"description":"Does this team receive any penalty points in the league.  This is separate from any league points calculated from the match result, and is subtracted from their league points","type":"integer","default":0,"minimum":0},"notes":{"description":"Free form string to add notes about the team relating to this match.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"players":{"description":"The list of players from this team that played in this match.  This can be either a player's name or a reference to a player ID","type":"array","items":{"description":"Either the name of the player or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  Not all entries need to be references, meaning that the document can allow a mix of registered players with a player ID, and unregistered players indicated just by name","type":"string","minLength":1}}},"required":["id","scores"]},"matches":{"description":"An array of matches (or breaks in play) in this group.  Note that a team ID and each unique team references can ony appear in one group, i.e. a team cannot play in multiple groups in a stage; if they did then those two groups would technically be the same group","type":"array","items":{"oneOf":[{"description":"A match between two teams","type":"object","additionalProperties":false,"properties":{"id":{"description":"An identifier for this match, i.e. a match number.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"court":{"description":"The court that a match takes place on","type":"string","minLength":1,"maxLength":1000},"venue":{"description":"The venue that a match takes place at","type":"string","minLength":1,"maxLength":10000},"type":{"description":"The type of match, i.e. 'match'","type":"string","enum":["match"]},"date":{"description":"The date of the match in the format YYYY-MM-DD","type":"string","format":"date"},"warmup":{"description":"The start time for the warmup in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"start":{"description":"The start time for the match in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"duration":{"description":"The maximum duration of the match in the format HH:mm","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"complete":{"description":"Whether the match is complete.  This must be set when a match has a \"duration\" or when the matchType is \"continuous\".  What about a \"continuous\" match with no \"duration\" and a target score?  This can be represented by a \"sets\" match with \"maxSets\" = 1","type":"boolean"},"homeTeam":{"$ref":"#/$defs/team","description":"The 'home' team for the match"},"awayTeam":{"$ref":"#/$defs/team","description":"The 'away' team for the match"},"officials":{"oneOf":[{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to referee the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]},{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"first":{"description":"The first referee","type":"string","minLength":1},"second":{"description":"The second referee","type":"string","minLength":1},"challenge":{"description":"The challenge referee, responsible for resolving challenges from the teams","type":"string","minLength":1},"assistantChallenge":{"description":"The assistant challenge referee, who assists the challenge referee","type":"string","minLength":1},"reserve":{"description":"The reserve referee","type":"string","minLength":1},"scorer":{"description":"The scorer","type":"string","minLength":1},"assistantScorer":{"description":"The assistant scorer","type":"string","minLength":1},"linespersons":{"description":"The list of linespersons","type":"array","maxItems":4,"items":{"description":"A linesperson","type":"string","minLength":1}},"ballCrew":{"description":"The list of people in charge of managing the game balls","type":"array","maxItems":100,"items":{"description":"A ball person","type":"string","minLength":1}}},"required":["first"]}]},"mvp":{"description":"A most valuable player award for the match. This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1,"maxLength":203},"manager":{"oneOf":[{"description":"The court manager in charge of this match","type":"string","minLength":1,"maxLength":1000},{"description":"The court managers for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to manage the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]}]},"friendly":{"description":"Whether the match is a friendly.  These matches do not contribute toward a league position.  If a team only participates in friendly matches then they are not included in the league table at all","type":"boolean","default":false},"notes":{"description":"Free form string to add notes about a match","type":"string","minLength":1}},"dependencies":{"duration":["complete"]},"required":["id","type","homeTeam","awayTeam"]},{"description":"A break in play, possibly while other matches are going on in other competitions running in parallel","type":"object","additionalProperties":false,"properties":{"type":{"description":"The type of match, i.e. 'break'","type":"string","enum":["break"]},"start":{"description":"The start time for the break in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"date":{"description":"The date of the break in the format YYYY-MM-DD","type":"string","format":"date"},"duration":{"description":"The duration of the break","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"name":{"description":"The name for the break, e.g. 'Lunch break'","default":"Break","type":"string","minLength":1,"maxLength":1000}},"required":["type"]}]}}}};const schema26 = {"description":"An array of matches (or breaks in play) in this group.  Note that a team ID and each unique team references can ony appear in one group, i.e. a team cannot play in multiple groups in a stage; if they did then those two groups would technically be the same group","type":"array","items":{"oneOf":[{"description":"A match between two teams","type":"object","additionalProperties":false,"properties":{"id":{"description":"An identifier for this match, i.e. a match number.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"court":{"description":"The court that a match takes place on","type":"string","minLength":1,"maxLength":1000},"venue":{"description":"The venue that a match takes place at","type":"string","minLength":1,"maxLength":10000},"type":{"description":"The type of match, i.e. 'match'","type":"string","enum":["match"]},"date":{"description":"The date of the match in the format YYYY-MM-DD","type":"string","format":"date"},"warmup":{"description":"The start time for the warmup in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"start":{"description":"The start time for the match in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"duration":{"description":"The maximum duration of the match in the format HH:mm","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"complete":{"description":"Whether the match is complete.  This must be set when a match has a \"duration\" or when the matchType is \"continuous\".  What about a \"continuous\" match with no \"duration\" and a target score?  This can be represented by a \"sets\" match with \"maxSets\" = 1","type":"boolean"},"homeTeam":{"$ref":"#/$defs/team","description":"The 'home' team for the match"},"awayTeam":{"$ref":"#/$defs/team","description":"The 'away' team for the match"},"officials":{"oneOf":[{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to referee the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]},{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"first":{"description":"The first referee","type":"string","minLength":1},"second":{"description":"The second referee","type":"string","minLength":1},"challenge":{"description":"The challenge referee, responsible for resolving challenges from the teams","type":"string","minLength":1},"assistantChallenge":{"description":"The assistant challenge referee, who assists the challenge referee","type":"string","minLength":1},"reserve":{"description":"The reserve referee","type":"string","minLength":1},"scorer":{"description":"The scorer","type":"string","minLength":1},"assistantScorer":{"description":"The assistant scorer","type":"string","minLength":1},"linespersons":{"description":"The list of linespersons","type":"array","maxItems":4,"items":{"description":"A linesperson","type":"string","minLength":1}},"ballCrew":{"description":"The list of people in charge of managing the game balls","type":"array","maxItems":100,"items":{"description":"A ball person","type":"string","minLength":1}}},"required":["first"]}]},"mvp":{"description":"A most valuable player award for the match. This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1,"maxLength":203},"manager":{"oneOf":[{"description":"The court manager in charge of this match","type":"string","minLength":1,"maxLength":1000},{"description":"The court managers for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to manage the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]}]},"friendly":{"description":"Whether the match is a friendly.  These matches do not contribute toward a league position.  If a team only participates in friendly matches then they are not included in the league table at all","type":"boolean","default":false},"notes":{"description":"Free form string to add notes about a match","type":"string","minLength":1}},"dependencies":{"duration":["complete"]},"required":["id","type","homeTeam","awayTeam"]},{"description":"A break in play, possibly while other matches are going on in other competitions running in parallel","type":"object","additionalProperties":false,"properties":{"type":{"description":"The type of match, i.e. 'break'","type":"string","enum":["break"]},"start":{"description":"The start time for the break in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"date":{"description":"The date of the break in the format YYYY-MM-DD","type":"string","format":"date"},"duration":{"description":"The duration of the break","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"name":{"description":"The name for the break, e.g. 'Lunch break'","default":"Break","type":"string","minLength":1,"maxLength":1000}},"required":["type"]}]}};const schema27 = {"description":"A team playing in the match","type":"object","additionalProperties":false,"properties":{"id":{"description":"The identifier for the team.  This can either be a team ID or a team reference (see the documentation)","type":"string","minLength":1,"maxLength":1000},"scores":{"description":"The array of set scores.  If the matchType is 'continuous' then only the first value in the array is used","type":"array","items":{"description":"The set score","type":"integer","minimum":0}},"mvp":{"description":"This team's most valuable player award.  This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1},"forfeit":{"description":"Did this team forfeit the match","type":"boolean","default":false},"bonusPoints":{"description":"Does this team get any bonus points in the league.  This is separate from any league points calculated from the match result, and is added to their league points","type":"integer","default":0,"minimum":0},"penaltyPoints":{"description":"Does this team receive any penalty points in the league.  This is separate from any league points calculated from the match result, and is subtracted from their league points","type":"integer","default":0,"minimum":0},"notes":{"description":"Free form string to add notes about the team relating to this match.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"players":{"description":"The list of players from this team that played in this match.  This can be either a player's name or a reference to a player ID","type":"array","items":{"description":"Either the name of the player or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  Not all entries need to be references, meaning that the document can allow a mix of registered players with a player ID, and unregistered players indicated just by name","type":"string","minLength":1}}},"required":["id","scores"]};function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){let data0 = data[i0];const _errs1 = errors;const _errs2 = errors;let valid1 = false;let passing0 = null;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing0;if(((((data0.id === undefined) && (missing0 = "id")) || ((data0.type === undefined) && (missing0 = "type"))) || ((data0.homeTeam === undefined) && (missing0 = "homeTeam"))) || ((data0.awayTeam === undefined) && (missing0 = "awayTeam"))){const err0 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {const _errs5 = errors;for(const key0 in data0){if(!(func22.call(schema26.items.oneOf[0].properties, key0))){const err1 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;break;}}if(_errs5 === errors){let missing1;if(data0.duration !== undefined && ((data0.complete === undefined) && (missing1 = "complete"))){const err2 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/dependencies",keyword:"dependencies",params:{property: "duration",
    missingProperty: missing1,
    depsCount: 1,
    deps: "complete"},message:"must have property complete when property duration is present"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}else {if(data0.id !== undefined){let data1 = data0.id;const _errs6 = errors;if(errors === _errs6){if(typeof data1 === "string"){if(func2(data1) > 100){const err3 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}else {if(func2(data1) < 1){const err4 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}else {if(!pattern0.test(data1)){const err5 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}}}else {const err6 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var valid3 = _errs6 === errors;}else {var valid3 = true;}if(valid3){if(data0.court !== undefined){let data2 = data0.court;const _errs8 = errors;if(errors === _errs8){if(typeof data2 === "string"){if(func2(data2) > 1000){const err7 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}else {if(func2(data2) < 1){const err8 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}}else {const err9 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data0.venue !== undefined){let data3 = data0.venue;const _errs10 = errors;if(errors === _errs10){if(typeof data3 === "string"){if(func2(data3) > 10000){const err10 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/maxLength",keyword:"maxLength",params:{limit: 10000},message:"must NOT have more than 10000 characters"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}else {if(func2(data3) < 1){const err11 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}}else {const err12 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data0.type !== undefined){let data4 = data0.type;const _errs12 = errors;if(typeof data4 !== "string"){const err13 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/0/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}if(!(data4 === "match")){const err14 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/0/properties/type/enum",keyword:"enum",params:{allowedValues: schema26.items.oneOf[0].properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data0.date !== undefined){let data5 = data0.date;const _errs14 = errors;if(errors === _errs14){if(errors === _errs14){if(typeof data5 === "string"){if(!(formats4.validate(data5))){const err15 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/0/properties/date/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}else {const err16 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/0/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data0.warmup !== undefined){let data6 = data0.warmup;const _errs16 = errors;if(errors === _errs16){if(typeof data6 === "string"){if(!pattern4.test(data6)){const err17 = {instancePath:instancePath+"/" + i0+"/warmup",schemaPath:"#/items/oneOf/0/properties/warmup/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}else {const err18 = {instancePath:instancePath+"/" + i0+"/warmup",schemaPath:"#/items/oneOf/0/properties/warmup/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data0.start !== undefined){let data7 = data0.start;const _errs18 = errors;if(errors === _errs18){if(typeof data7 === "string"){if(!pattern4.test(data7)){const err19 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/0/properties/start/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}else {const err20 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/0/properties/start/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data0.duration !== undefined){let data8 = data0.duration;const _errs20 = errors;if(errors === _errs20){if(typeof data8 === "string"){if(!pattern6.test(data8)){const err21 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/0/properties/duration/pattern",keyword:"pattern",params:{pattern: "^[0-9]+:[0-5][0-9]$"},message:"must match pattern \""+"^[0-9]+:[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}else {const err22 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/0/properties/duration/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data0.complete !== undefined){const _errs22 = errors;if(typeof data0.complete !== "boolean"){const err23 = {instancePath:instancePath+"/" + i0+"/complete",schemaPath:"#/items/oneOf/0/properties/complete/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data0.homeTeam !== undefined){let data10 = data0.homeTeam;const _errs24 = errors;const _errs25 = errors;if(errors === _errs25){if(data10 && typeof data10 == "object" && !Array.isArray(data10)){let missing2;if(((data10.id === undefined) && (missing2 = "id")) || ((data10.scores === undefined) && (missing2 = "scores"))){const err24 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}else {const _errs27 = errors;for(const key1 in data10){if(!((((((((key1 === "id") || (key1 === "scores")) || (key1 === "mvp")) || (key1 === "forfeit")) || (key1 === "bonusPoints")) || (key1 === "penaltyPoints")) || (key1 === "notes")) || (key1 === "players"))){const err25 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;break;}}if(_errs27 === errors){if(data10.id !== undefined){let data11 = data10.id;const _errs28 = errors;if(errors === _errs28){if(typeof data11 === "string"){if(func2(data11) > 1000){const err26 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}else {if(func2(data11) < 1){const err27 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}}else {const err28 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var valid5 = _errs28 === errors;}else {var valid5 = true;}if(valid5){if(data10.scores !== undefined){let data12 = data10.scores;const _errs30 = errors;if(errors === _errs30){if(Array.isArray(data12)){var valid6 = true;const len1 = data12.length;for(let i1=0; i1<len1; i1++){let data13 = data12[i1];const _errs32 = errors;if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){const err29 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores/" + i1,schemaPath:"#/$defs/team/properties/scores/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}if(errors === _errs32){if((typeof data13 == "number") && (isFinite(data13))){if(data13 < 0 || isNaN(data13)){const err30 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores/" + i1,schemaPath:"#/$defs/team/properties/scores/items/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}}var valid6 = _errs32 === errors;if(!valid6){break;}}}else {const err31 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores",schemaPath:"#/$defs/team/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var valid5 = _errs30 === errors;}else {var valid5 = true;}if(valid5){if(data10.mvp !== undefined){let data14 = data10.mvp;const _errs34 = errors;if(errors === _errs34){if(typeof data14 === "string"){if(func2(data14) < 1){const err32 = {instancePath:instancePath+"/" + i0+"/homeTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}else {const err33 = {instancePath:instancePath+"/" + i0+"/homeTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var valid5 = _errs34 === errors;}else {var valid5 = true;}if(valid5){if(data10.forfeit !== undefined){const _errs36 = errors;if(typeof data10.forfeit !== "boolean"){const err34 = {instancePath:instancePath+"/" + i0+"/homeTeam/forfeit",schemaPath:"#/$defs/team/properties/forfeit/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}var valid5 = _errs36 === errors;}else {var valid5 = true;}if(valid5){if(data10.bonusPoints !== undefined){let data16 = data10.bonusPoints;const _errs38 = errors;if(!(((typeof data16 == "number") && (!(data16 % 1) && !isNaN(data16))) && (isFinite(data16)))){const err35 = {instancePath:instancePath+"/" + i0+"/homeTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}if(errors === _errs38){if((typeof data16 == "number") && (isFinite(data16))){if(data16 < 0 || isNaN(data16)){const err36 = {instancePath:instancePath+"/" + i0+"/homeTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}}var valid5 = _errs38 === errors;}else {var valid5 = true;}if(valid5){if(data10.penaltyPoints !== undefined){let data17 = data10.penaltyPoints;const _errs40 = errors;if(!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))){const err37 = {instancePath:instancePath+"/" + i0+"/homeTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}if(errors === _errs40){if((typeof data17 == "number") && (isFinite(data17))){if(data17 < 0 || isNaN(data17)){const err38 = {instancePath:instancePath+"/" + i0+"/homeTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}}var valid5 = _errs40 === errors;}else {var valid5 = true;}if(valid5){if(data10.notes !== undefined){let data18 = data10.notes;const _errs42 = errors;if(errors === _errs42){if(typeof data18 === "string"){if(func2(data18) < 1){const err39 = {instancePath:instancePath+"/" + i0+"/homeTeam/notes",schemaPath:"#/$defs/team/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}else {const err40 = {instancePath:instancePath+"/" + i0+"/homeTeam/notes",schemaPath:"#/$defs/team/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var valid5 = _errs42 === errors;}else {var valid5 = true;}if(valid5){if(data10.players !== undefined){let data19 = data10.players;const _errs44 = errors;if(errors === _errs44){if(Array.isArray(data19)){var valid7 = true;const len2 = data19.length;for(let i2=0; i2<len2; i2++){let data20 = data19[i2];const _errs46 = errors;if(errors === _errs46){if(typeof data20 === "string"){if(func2(data20) < 1){const err41 = {instancePath:instancePath+"/" + i0+"/homeTeam/players/" + i2,schemaPath:"#/$defs/team/properties/players/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}else {const err42 = {instancePath:instancePath+"/" + i0+"/homeTeam/players/" + i2,schemaPath:"#/$defs/team/properties/players/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var valid7 = _errs46 === errors;if(!valid7){break;}}}else {const err43 = {instancePath:instancePath+"/" + i0+"/homeTeam/players",schemaPath:"#/$defs/team/properties/players/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var valid5 = _errs44 === errors;}else {var valid5 = true;}}}}}}}}}}}else {const err44 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var valid3 = _errs24 === errors;}else {var valid3 = true;}if(valid3){if(data0.awayTeam !== undefined){let data21 = data0.awayTeam;const _errs48 = errors;const _errs49 = errors;if(errors === _errs49){if(data21 && typeof data21 == "object" && !Array.isArray(data21)){let missing3;if(((data21.id === undefined) && (missing3 = "id")) || ((data21.scores === undefined) && (missing3 = "scores"))){const err45 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}else {const _errs51 = errors;for(const key2 in data21){if(!((((((((key2 === "id") || (key2 === "scores")) || (key2 === "mvp")) || (key2 === "forfeit")) || (key2 === "bonusPoints")) || (key2 === "penaltyPoints")) || (key2 === "notes")) || (key2 === "players"))){const err46 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;break;}}if(_errs51 === errors){if(data21.id !== undefined){let data22 = data21.id;const _errs52 = errors;if(errors === _errs52){if(typeof data22 === "string"){if(func2(data22) > 1000){const err47 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}else {if(func2(data22) < 1){const err48 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}}else {const err49 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var valid9 = _errs52 === errors;}else {var valid9 = true;}if(valid9){if(data21.scores !== undefined){let data23 = data21.scores;const _errs54 = errors;if(errors === _errs54){if(Array.isArray(data23)){var valid10 = true;const len3 = data23.length;for(let i3=0; i3<len3; i3++){let data24 = data23[i3];const _errs56 = errors;if(!(((typeof data24 == "number") && (!(data24 % 1) && !isNaN(data24))) && (isFinite(data24)))){const err50 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores/" + i3,schemaPath:"#/$defs/team/properties/scores/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}if(errors === _errs56){if((typeof data24 == "number") && (isFinite(data24))){if(data24 < 0 || isNaN(data24)){const err51 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores/" + i3,schemaPath:"#/$defs/team/properties/scores/items/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}}var valid10 = _errs56 === errors;if(!valid10){break;}}}else {const err52 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores",schemaPath:"#/$defs/team/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var valid9 = _errs54 === errors;}else {var valid9 = true;}if(valid9){if(data21.mvp !== undefined){let data25 = data21.mvp;const _errs58 = errors;if(errors === _errs58){if(typeof data25 === "string"){if(func2(data25) < 1){const err53 = {instancePath:instancePath+"/" + i0+"/awayTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}else {const err54 = {instancePath:instancePath+"/" + i0+"/awayTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var valid9 = _errs58 === errors;}else {var valid9 = true;}if(valid9){if(data21.forfeit !== undefined){const _errs60 = errors;if(typeof data21.forfeit !== "boolean"){const err55 = {instancePath:instancePath+"/" + i0+"/awayTeam/forfeit",schemaPath:"#/$defs/team/properties/forfeit/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}var valid9 = _errs60 === errors;}else {var valid9 = true;}if(valid9){if(data21.bonusPoints !== undefined){let data27 = data21.bonusPoints;const _errs62 = errors;if(!(((typeof data27 == "number") && (!(data27 % 1) && !isNaN(data27))) && (isFinite(data27)))){const err56 = {instancePath:instancePath+"/" + i0+"/awayTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}if(errors === _errs62){if((typeof data27 == "number") && (isFinite(data27))){if(data27 < 0 || isNaN(data27)){const err57 = {instancePath:instancePath+"/" + i0+"/awayTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}}var valid9 = _errs62 === errors;}else {var valid9 = true;}if(valid9){if(data21.penaltyPoints !== undefined){let data28 = data21.penaltyPoints;const _errs64 = errors;if(!(((typeof data28 == "number") && (!(data28 % 1) && !isNaN(data28))) && (isFinite(data28)))){const err58 = {instancePath:instancePath+"/" + i0+"/awayTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}if(errors === _errs64){if((typeof data28 == "number") && (isFinite(data28))){if(data28 < 0 || isNaN(data28)){const err59 = {instancePath:instancePath+"/" + i0+"/awayTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}}var valid9 = _errs64 === errors;}else {var valid9 = true;}if(valid9){if(data21.notes !== undefined){let data29 = data21.notes;const _errs66 = errors;if(errors === _errs66){if(typeof data29 === "string"){if(func2(data29) < 1){const err60 = {instancePath:instancePath+"/" + i0+"/awayTeam/notes",schemaPath:"#/$defs/team/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}else {const err61 = {instancePath:instancePath+"/" + i0+"/awayTeam/notes",schemaPath:"#/$defs/team/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var valid9 = _errs66 === errors;}else {var valid9 = true;}if(valid9){if(data21.players !== undefined){let data30 = data21.players;const _errs68 = errors;if(errors === _errs68){if(Array.isArray(data30)){var valid11 = true;const len4 = data30.length;for(let i4=0; i4<len4; i4++){let data31 = data30[i4];const _errs70 = errors;if(errors === _errs70){if(typeof data31 === "string"){if(func2(data31) < 1){const err62 = {instancePath:instancePath+"/" + i0+"/awayTeam/players/" + i4,schemaPath:"#/$defs/team/properties/players/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}else {const err63 = {instancePath:instancePath+"/" + i0+"/awayTeam/players/" + i4,schemaPath:"#/$defs/team/properties/players/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var valid11 = _errs70 === errors;if(!valid11){break;}}}else {const err64 = {instancePath:instancePath+"/" + i0+"/awayTeam/players",schemaPath:"#/$defs/team/properties/players/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var valid9 = _errs68 === errors;}else {var valid9 = true;}}}}}}}}}}}else {const err65 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var valid3 = _errs48 === errors;}else {var valid3 = true;}if(valid3){if(data0.officials !== undefined){let data32 = data0.officials;const _errs72 = errors;const _errs73 = errors;let valid12 = false;let passing1 = null;const _errs74 = errors;if(errors === _errs74){if(data32 && typeof data32 == "object" && !Array.isArray(data32)){let missing4;if((data32.team === undefined) && (missing4 = "team")){const err66 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}else {const _errs76 = errors;for(const key3 in data32){if(!(key3 === "team")){const err67 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;break;}}if(_errs76 === errors){if(data32.team !== undefined){let data33 = data32.team;const _errs77 = errors;if(errors === _errs77){if(typeof data33 === "string"){if(func2(data33) > 1000){const err68 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}else {if(func2(data33) < 1){const err69 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}}else {const err70 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}}}}}else {const err71 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}var _valid1 = _errs74 === errors;if(_valid1){valid12 = true;passing1 = 0;}const _errs79 = errors;if(errors === _errs79){if(data32 && typeof data32 == "object" && !Array.isArray(data32)){let missing5;if((data32.first === undefined) && (missing5 = "first")){const err72 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}else {const _errs81 = errors;for(const key4 in data32){if(!(func22.call(schema26.items.oneOf[0].properties.officials.oneOf[1].properties, key4))){const err73 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;break;}}if(_errs81 === errors){if(data32.first !== undefined){let data34 = data32.first;const _errs82 = errors;if(errors === _errs82){if(typeof data34 === "string"){if(func2(data34) < 1){const err74 = {instancePath:instancePath+"/" + i0+"/officials/first",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/first/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}else {const err75 = {instancePath:instancePath+"/" + i0+"/officials/first",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/first/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}var valid14 = _errs82 === errors;}else {var valid14 = true;}if(valid14){if(data32.second !== undefined){let data35 = data32.second;const _errs84 = errors;if(errors === _errs84){if(typeof data35 === "string"){if(func2(data35) < 1){const err76 = {instancePath:instancePath+"/" + i0+"/officials/second",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/second/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}else {const err77 = {instancePath:instancePath+"/" + i0+"/officials/second",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/second/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}var valid14 = _errs84 === errors;}else {var valid14 = true;}if(valid14){if(data32.challenge !== undefined){let data36 = data32.challenge;const _errs86 = errors;if(errors === _errs86){if(typeof data36 === "string"){if(func2(data36) < 1){const err78 = {instancePath:instancePath+"/" + i0+"/officials/challenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/challenge/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}}else {const err79 = {instancePath:instancePath+"/" + i0+"/officials/challenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/challenge/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}}var valid14 = _errs86 === errors;}else {var valid14 = true;}if(valid14){if(data32.assistantChallenge !== undefined){let data37 = data32.assistantChallenge;const _errs88 = errors;if(errors === _errs88){if(typeof data37 === "string"){if(func2(data37) < 1){const err80 = {instancePath:instancePath+"/" + i0+"/officials/assistantChallenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantChallenge/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err80];}else {vErrors.push(err80);}errors++;}}else {const err81 = {instancePath:instancePath+"/" + i0+"/officials/assistantChallenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantChallenge/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err81];}else {vErrors.push(err81);}errors++;}}var valid14 = _errs88 === errors;}else {var valid14 = true;}if(valid14){if(data32.reserve !== undefined){let data38 = data32.reserve;const _errs90 = errors;if(errors === _errs90){if(typeof data38 === "string"){if(func2(data38) < 1){const err82 = {instancePath:instancePath+"/" + i0+"/officials/reserve",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/reserve/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err82];}else {vErrors.push(err82);}errors++;}}else {const err83 = {instancePath:instancePath+"/" + i0+"/officials/reserve",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/reserve/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err83];}else {vErrors.push(err83);}errors++;}}var valid14 = _errs90 === errors;}else {var valid14 = true;}if(valid14){if(data32.scorer !== undefined){let data39 = data32.scorer;const _errs92 = errors;if(errors === _errs92){if(typeof data39 === "string"){if(func2(data39) < 1){const err84 = {instancePath:instancePath+"/" + i0+"/officials/scorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/scorer/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err84];}else {vErrors.push(err84);}errors++;}}else {const err85 = {instancePath:instancePath+"/" + i0+"/officials/scorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/scorer/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err85];}else {vErrors.push(err85);}errors++;}}var valid14 = _errs92 === errors;}else {var valid14 = true;}if(valid14){if(data32.assistantScorer !== undefined){let data40 = data32.assistantScorer;const _errs94 = errors;if(errors === _errs94){if(typeof data40 === "string"){if(func2(data40) < 1){const err86 = {instancePath:instancePath+"/" + i0+"/officials/assistantScorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantScorer/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err86];}else {vErrors.push(err86);}errors++;}}else {const err87 = {instancePath:instancePath+"/" + i0+"/officials/assistantScorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantScorer/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err87];}else {vErrors.push(err87);}errors++;}}var valid14 = _errs94 === errors;}else {var valid14 = true;}if(valid14){if(data32.linespersons !== undefined){let data41 = data32.linespersons;const _errs96 = errors;if(errors === _errs96){if(Array.isArray(data41)){if(data41.length > 4){const err88 = {instancePath:instancePath+"/" + i0+"/officials/linespersons",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/maxItems",keyword:"maxItems",params:{limit: 4},message:"must NOT have more than 4 items"};if(vErrors === null){vErrors = [err88];}else {vErrors.push(err88);}errors++;}else {var valid15 = true;const len5 = data41.length;for(let i5=0; i5<len5; i5++){let data42 = data41[i5];const _errs98 = errors;if(errors === _errs98){if(typeof data42 === "string"){if(func2(data42) < 1){const err89 = {instancePath:instancePath+"/" + i0+"/officials/linespersons/" + i5,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err89];}else {vErrors.push(err89);}errors++;}}else {const err90 = {instancePath:instancePath+"/" + i0+"/officials/linespersons/" + i5,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err90];}else {vErrors.push(err90);}errors++;}}var valid15 = _errs98 === errors;if(!valid15){break;}}}}else {const err91 = {instancePath:instancePath+"/" + i0+"/officials/linespersons",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err91];}else {vErrors.push(err91);}errors++;}}var valid14 = _errs96 === errors;}else {var valid14 = true;}if(valid14){if(data32.ballCrew !== undefined){let data43 = data32.ballCrew;const _errs100 = errors;if(errors === _errs100){if(Array.isArray(data43)){if(data43.length > 100){const err92 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/maxItems",keyword:"maxItems",params:{limit: 100},message:"must NOT have more than 100 items"};if(vErrors === null){vErrors = [err92];}else {vErrors.push(err92);}errors++;}else {var valid16 = true;const len6 = data43.length;for(let i6=0; i6<len6; i6++){let data44 = data43[i6];const _errs102 = errors;if(errors === _errs102){if(typeof data44 === "string"){if(func2(data44) < 1){const err93 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew/" + i6,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err93];}else {vErrors.push(err93);}errors++;}}else {const err94 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew/" + i6,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err94];}else {vErrors.push(err94);}errors++;}}var valid16 = _errs102 === errors;if(!valid16){break;}}}}else {const err95 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err95];}else {vErrors.push(err95);}errors++;}}var valid14 = _errs100 === errors;}else {var valid14 = true;}}}}}}}}}}}}else {const err96 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err96];}else {vErrors.push(err96);}errors++;}}var _valid1 = _errs79 === errors;if(_valid1 && valid12){valid12 = false;passing1 = [passing1, 1];}else {if(_valid1){valid12 = true;passing1 = 1;}}if(!valid12){const err97 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf",keyword:"oneOf",params:{passingSchemas: passing1},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err97];}else {vErrors.push(err97);}errors++;}else {errors = _errs73;if(vErrors !== null){if(_errs73){vErrors.length = _errs73;}else {vErrors = null;}}}var valid3 = _errs72 === errors;}else {var valid3 = true;}if(valid3){if(data0.mvp !== undefined){let data45 = data0.mvp;const _errs104 = errors;if(errors === _errs104){if(typeof data45 === "string"){if(func2(data45) > 203){const err98 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/maxLength",keyword:"maxLength",params:{limit: 203},message:"must NOT have more than 203 characters"};if(vErrors === null){vErrors = [err98];}else {vErrors.push(err98);}errors++;}else {if(func2(data45) < 1){const err99 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err99];}else {vErrors.push(err99);}errors++;}}}else {const err100 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err100];}else {vErrors.push(err100);}errors++;}}var valid3 = _errs104 === errors;}else {var valid3 = true;}if(valid3){if(data0.manager !== undefined){let data46 = data0.manager;const _errs106 = errors;const _errs107 = errors;let valid17 = false;let passing2 = null;const _errs108 = errors;if(errors === _errs108){if(typeof data46 === "string"){if(func2(data46) > 1000){const err101 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err101];}else {vErrors.push(err101);}errors++;}else {if(func2(data46) < 1){const err102 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err102];}else {vErrors.push(err102);}errors++;}}}else {const err103 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err103];}else {vErrors.push(err103);}errors++;}}var _valid2 = _errs108 === errors;if(_valid2){valid17 = true;passing2 = 0;}const _errs110 = errors;if(errors === _errs110){if(data46 && typeof data46 == "object" && !Array.isArray(data46)){let missing6;if((data46.team === undefined) && (missing6 = "team")){const err104 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"};if(vErrors === null){vErrors = [err104];}else {vErrors.push(err104);}errors++;}else {const _errs112 = errors;for(const key5 in data46){if(!(key5 === "team")){const err105 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err105];}else {vErrors.push(err105);}errors++;break;}}if(_errs112 === errors){if(data46.team !== undefined){let data47 = data46.team;const _errs113 = errors;if(errors === _errs113){if(typeof data47 === "string"){if(func2(data47) > 1000){const err106 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err106];}else {vErrors.push(err106);}errors++;}else {if(func2(data47) < 1){const err107 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err107];}else {vErrors.push(err107);}errors++;}}}else {const err108 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err108];}else {vErrors.push(err108);}errors++;}}}}}}else {const err109 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err109];}else {vErrors.push(err109);}errors++;}}var _valid2 = _errs110 === errors;if(_valid2 && valid17){valid17 = false;passing2 = [passing2, 1];}else {if(_valid2){valid17 = true;passing2 = 1;}}if(!valid17){const err110 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf",keyword:"oneOf",params:{passingSchemas: passing2},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err110];}else {vErrors.push(err110);}errors++;}else {errors = _errs107;if(vErrors !== null){if(_errs107){vErrors.length = _errs107;}else {vErrors = null;}}}var valid3 = _errs106 === errors;}else {var valid3 = true;}if(valid3){if(data0.friendly !== undefined){const _errs115 = errors;if(typeof data0.friendly !== "boolean"){const err111 = {instancePath:instancePath+"/" + i0+"/friendly",schemaPath:"#/items/oneOf/0/properties/friendly/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err111];}else {vErrors.push(err111);}errors++;}var valid3 = _errs115 === errors;}else {var valid3 = true;}if(valid3){if(data0.notes !== undefined){let data49 = data0.notes;const _errs117 = errors;if(errors === _errs117){if(typeof data49 === "string"){if(func2(data49) < 1){const err112 = {instancePath:instancePath+"/" + i0+"/notes",schemaPath:"#/items/oneOf/0/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err112];}else {vErrors.push(err112);}errors++;}}else {const err113 = {instancePath:instancePath+"/" + i0+"/notes",schemaPath:"#/items/oneOf/0/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err113];}else {vErrors.push(err113);}errors++;}}var valid3 = _errs117 === errors;}else {var valid3 = true;}}}}}}}}}}}}}}}}}}}}else {const err114 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err114];}else {vErrors.push(err114);}errors++;}}var _valid0 = _errs3 === errors;if(_valid0){valid1 = true;passing0 = 0;}const _errs119 = errors;if(errors === _errs119){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing7;if((data0.type === undefined) && (missing7 = "type")){const err115 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"};if(vErrors === null){vErrors = [err115];}else {vErrors.push(err115);}errors++;}else {const _errs121 = errors;for(const key6 in data0){if(!(((((key6 === "type") || (key6 === "start")) || (key6 === "date")) || (key6 === "duration")) || (key6 === "name"))){const err116 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err116];}else {vErrors.push(err116);}errors++;break;}}if(_errs121 === errors){if(data0.type !== undefined){let data50 = data0.type;const _errs122 = errors;if(typeof data50 !== "string"){const err117 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/1/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err117];}else {vErrors.push(err117);}errors++;}if(!(data50 === "break")){const err118 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/1/properties/type/enum",keyword:"enum",params:{allowedValues: schema26.items.oneOf[1].properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err118];}else {vErrors.push(err118);}errors++;}var valid19 = _errs122 === errors;}else {var valid19 = true;}if(valid19){if(data0.start !== undefined){let data51 = data0.start;const _errs124 = errors;if(errors === _errs124){if(typeof data51 === "string"){if(!pattern4.test(data51)){const err119 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/1/properties/start/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err119];}else {vErrors.push(err119);}errors++;}}else {const err120 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/1/properties/start/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err120];}else {vErrors.push(err120);}errors++;}}var valid19 = _errs124 === errors;}else {var valid19 = true;}if(valid19){if(data0.date !== undefined){let data52 = data0.date;const _errs126 = errors;if(errors === _errs126){if(errors === _errs126){if(typeof data52 === "string"){if(!(formats4.validate(data52))){const err121 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/1/properties/date/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""};if(vErrors === null){vErrors = [err121];}else {vErrors.push(err121);}errors++;}}else {const err122 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/1/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err122];}else {vErrors.push(err122);}errors++;}}}var valid19 = _errs126 === errors;}else {var valid19 = true;}if(valid19){if(data0.duration !== undefined){let data53 = data0.duration;const _errs128 = errors;if(errors === _errs128){if(typeof data53 === "string"){if(!pattern6.test(data53)){const err123 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/1/properties/duration/pattern",keyword:"pattern",params:{pattern: "^[0-9]+:[0-5][0-9]$"},message:"must match pattern \""+"^[0-9]+:[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err123];}else {vErrors.push(err123);}errors++;}}else {const err124 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/1/properties/duration/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err124];}else {vErrors.push(err124);}errors++;}}var valid19 = _errs128 === errors;}else {var valid19 = true;}if(valid19){if(data0.name !== undefined){let data54 = data0.name;const _errs130 = errors;if(errors === _errs130){if(typeof data54 === "string"){if(func2(data54) > 1000){const err125 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err125];}else {vErrors.push(err125);}errors++;}else {if(func2(data54) < 1){const err126 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err126];}else {vErrors.push(err126);}errors++;}}}else {const err127 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err127];}else {vErrors.push(err127);}errors++;}}var valid19 = _errs130 === errors;}else {var valid19 = true;}}}}}}}}else {const err128 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err128];}else {vErrors.push(err128);}errors++;}}var _valid0 = _errs119 === errors;if(_valid0 && valid1){valid1 = false;passing0 = [passing0, 1];}else {if(_valid0){valid1 = true;passing0 = 1;}}if(!valid1){const err129 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err129];}else {vErrors.push(err129);}errors++;validate24.errors = vErrors;return false;}else {errors = _errs2;if(vErrors !== null){if(_errs2){vErrors.length = _errs2;}else {vErrors = null;}}}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate24.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate24.errors = vErrors;return errors === 0;}function validate23(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/stageAppend" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.groups === undefined) && (missing0 = "groups")){validate23.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((((key0 === "id") || (key0 === "name")) || (key0 === "notes")) || (key0 === "description")) || (key0 === "groups")) || (key0 === "ifUnknown"))){validate23.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 100){validate23.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data0) < 1){validate23.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data0)){validate23.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate23.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) > 1000){validate23.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data1) < 1){validate23.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate23.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data2 = data.notes;const _errs6 = errors;if(errors === _errs6){if(typeof data2 === "string"){if(func2(data2) < 1){validate23.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){let data3 = data.description;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data3)){var valid1 = true;const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];const _errs10 = errors;if(errors === _errs10){if(typeof data4 === "string"){if(func2(data4) < 1){validate23.errors = [{instancePath:instancePath+"/description/" + i0,schemaPath:"#/properties/description/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/description/" + i0,schemaPath:"#/properties/description/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid1 = _errs10 === errors;if(!valid1){break;}}}else {validate23.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.groups !== undefined){let data5 = data.groups;const _errs12 = errors;if(errors === _errs12){if(Array.isArray(data5)){var valid2 = true;const len1 = data5.length;for(let i1=0; i1<len1; i1++){let data6 = data5[i1];const _errs14 = errors;const _errs16 = errors;const _errs17 = errors;let valid4 = true;const _errs18 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing1;if((data6.type === undefined) && (missing1 = "type")){const err0 = {};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {if(data6.type !== undefined){if("league" !== data6.type){const err1 = {};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}}}var _valid0 = _errs18 === errors;errors = _errs17;if(vErrors !== null){if(_errs17){vErrors.length = _errs17;}else {vErrors = null;}}if(_valid0){const _errs20 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing2;if((data6.league === undefined) && (missing2 = "league")){validate23.errors = [{instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/0/then/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}}var _valid0 = _errs20 === errors;valid4 = _valid0;}if(!valid4){const err2 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;validate23.errors = vErrors;return false;}var valid3 = _errs16 === errors;if(valid3){const _errs21 = errors;const _errs22 = errors;let valid6 = true;const _errs23 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing3;if((data6.type === undefined) && (missing3 = "type")){const err3 = {};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}else {if(data6.type !== undefined){if("crossover" !== data6.type){const err4 = {};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}}}var _valid1 = _errs23 === errors;errors = _errs22;if(vErrors !== null){if(_errs22){vErrors.length = _errs22;}else {vErrors = null;}}if(_valid1){const _errs25 = errors;const _errs26 = errors;let valid8 = false;const _errs27 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.drawsAllowed !== undefined){if(!(data6.drawsAllowed === false)){const err5 = {instancePath:instancePath+"/groups/" + i1+"/drawsAllowed",schemaPath:"#/properties/groups/items/allOf/1/then/anyOf/0/properties/drawsAllowed/enum",keyword:"enum",params:{allowedValues: schema25.properties.groups.items.allOf[1].then.anyOf[0].properties.drawsAllowed.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}}var _valid2 = _errs27 === errors;valid8 = valid8 || _valid2;if(!valid8){const _errs29 = errors;const _errs30 = errors;const _errs31 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing4;if((data6.drawsAllowed === undefined) && (missing4 = "drawsAllowed")){const err6 = {};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var valid10 = _errs31 === errors;if(valid10){const err7 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/1/then/anyOf/1/not",keyword:"not",params:{},message:"must NOT be valid"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}else {errors = _errs30;if(vErrors !== null){if(_errs30){vErrors.length = _errs30;}else {vErrors = null;}}}var _valid2 = _errs29 === errors;valid8 = valid8 || _valid2;}if(!valid8){const err8 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/1/then/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;validate23.errors = vErrors;return false;}else {errors = _errs26;if(vErrors !== null){if(_errs26){vErrors.length = _errs26;}else {vErrors = null;}}}var _valid1 = _errs25 === errors;valid6 = _valid1;}if(!valid6){const err9 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;validate23.errors = vErrors;return false;}var valid3 = _errs21 === errors;if(valid3){const _errs32 = errors;const _errs33 = errors;let valid11 = true;const _errs34 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing5;if((data6.type === undefined) && (missing5 = "type")){const err10 = {};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}else {if(data6.type !== undefined){if("knockout" !== data6.type){const err11 = {};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}}}var _valid3 = _errs34 === errors;errors = _errs33;if(vErrors !== null){if(_errs33){vErrors.length = _errs33;}else {vErrors = null;}}if(_valid3){const _errs36 = errors;const _errs37 = errors;let valid13 = false;const _errs38 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.drawsAllowed !== undefined){if(!(data6.drawsAllowed === false)){const err12 = {instancePath:instancePath+"/groups/" + i1+"/drawsAllowed",schemaPath:"#/properties/groups/items/allOf/2/then/anyOf/0/properties/drawsAllowed/enum",keyword:"enum",params:{allowedValues: schema25.properties.groups.items.allOf[2].then.anyOf[0].properties.drawsAllowed.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}}var _valid4 = _errs38 === errors;valid13 = valid13 || _valid4;if(!valid13){const _errs40 = errors;const _errs41 = errors;const _errs42 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing6;if((data6.drawsAllowed === undefined) && (missing6 = "drawsAllowed")){const err13 = {};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var valid15 = _errs42 === errors;if(valid15){const err14 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/2/then/anyOf/1/not",keyword:"not",params:{},message:"must NOT be valid"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}else {errors = _errs41;if(vErrors !== null){if(_errs41){vErrors.length = _errs41;}else {vErrors = null;}}}var _valid4 = _errs40 === errors;valid13 = valid13 || _valid4;}if(!valid13){const err15 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/2/then/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;validate23.errors = vErrors;return false;}else {errors = _errs37;if(vErrors !== null){if(_errs37){vErrors.length = _errs37;}else {vErrors = null;}}}var _valid3 = _errs36 === errors;valid11 = _valid3;}if(!valid11){const err16 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;validate23.errors = vErrors;return false;}var valid3 = _errs32 === errors;if(valid3){const _errs43 = errors;const _errs44 = errors;let valid16 = true;const _errs45 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing7;if((data6.matchType === undefined) && (missing7 = "matchType")){const err17 = {};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}else {if(data6.matchType !== undefined){if("continuous" !== data6.matchType){const err18 = {};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}}}var _valid5 = _errs45 === errors;errors = _errs44;if(vErrors !== null){if(_errs44){vErrors.length = _errs44;}else {vErrors = null;}}if(_valid5){const _errs47 = errors;const _errs49 = errors;const _errs50 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing8;if((data6.sets === undefined) && (missing8 = "sets")){const err19 = {};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var valid19 = _errs50 === errors;if(valid19){validate23.errors = [{instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/3/then/allOf/0/not",keyword:"not",params:{},message:"must NOT be valid"}];return false;}else {errors = _errs49;if(vErrors !== null){if(_errs49){vErrors.length = _errs49;}else {vErrors = null;}}}if(errors === _errs47){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.matches !== undefined){let data13 = data6.matches;const _errs51 = errors;if(errors === _errs51){if(Array.isArray(data13)){var valid21 = true;const len2 = data13.length;for(let i2=0; i2<len2; i2++){let data14 = data13[i2];const _errs53 = errors;if(errors === _errs53){if(data14 && typeof data14 == "object" && !Array.isArray(data14)){if(data14.homeTeam !== undefined){let data15 = data14.homeTeam;const _errs55 = errors;if(errors === _errs55){if(data15 && typeof data15 == "object" && !Array.isArray(data15)){if(data15.scores !== undefined){let data16 = data15.scores;const _errs57 = errors;if(errors === _errs57){if(Array.isArray(data16)){if(data16.length > 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i2+"/homeTeam/scores",schemaPath:"#/properties/groups/items/allOf/3/then/properties/matches/items/properties/homeTeam/properties/scores/maxItems",keyword:"maxItems",params:{limit: 1},message:"must NOT have more than 1 items"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i2+"/homeTeam/scores",schemaPath:"#/properties/groups/items/allOf/3/then/properties/matches/items/properties/homeTeam/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i2+"/homeTeam",schemaPath:"#/properties/groups/items/allOf/3/then/properties/matches/items/properties/homeTeam/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid22 = _errs55 === errors;}else {var valid22 = true;}if(valid22){if(data14.awayTeam !== undefined){let data17 = data14.awayTeam;const _errs59 = errors;if(errors === _errs59){if(data17 && typeof data17 == "object" && !Array.isArray(data17)){if(data17.scores !== undefined){let data18 = data17.scores;const _errs61 = errors;if(errors === _errs61){if(Array.isArray(data18)){if(data18.length > 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i2+"/awayTeam/scores",schemaPath:"#/properties/groups/items/allOf/3/then/properties/matches/items/properties/awayTeam/properties/scores/maxItems",keyword:"maxItems",params:{limit: 1},message:"must NOT have more than 1 items"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i2+"/awayTeam/scores",schemaPath:"#/properties/groups/items/allOf/3/then/properties/matches/items/properties/awayTeam/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i2+"/awayTeam",schemaPath:"#/properties/groups/items/allOf/3/then/properties/matches/items/properties/awayTeam/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid22 = _errs59 === errors;}else {var valid22 = true;}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i2,schemaPath:"#/properties/groups/items/allOf/3/then/properties/matches/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid21 = _errs53 === errors;if(!valid21){break;}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches",schemaPath:"#/properties/groups/items/allOf/3/then/properties/matches/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}var _valid5 = _errs47 === errors;valid16 = _valid5;}if(!valid16){const err20 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;validate23.errors = vErrors;return false;}var valid3 = _errs43 === errors;if(valid3){const _errs63 = errors;const _errs64 = errors;let valid25 = true;const _errs65 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing9;if((data6.matchType === undefined) && (missing9 = "matchType")){const err21 = {};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}else {if(data6.matchType !== undefined){if("continuous" !== data6.matchType){const err22 = {};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}}}var _valid6 = _errs65 === errors;errors = _errs64;if(vErrors !== null){if(_errs64){vErrors.length = _errs64;}else {vErrors = null;}}if(_valid6){const _errs67 = errors;const _errs69 = errors;const _errs70 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing10;if((data6.sets === undefined) && (missing10 = "sets")){const err23 = {};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var valid28 = _errs70 === errors;if(valid28){validate23.errors = [{instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/4/then/allOf/0/not",keyword:"not",params:{},message:"must NOT be valid"}];return false;}else {errors = _errs69;if(vErrors !== null){if(_errs69){vErrors.length = _errs69;}else {vErrors = null;}}}var _valid6 = _errs67 === errors;valid25 = _valid6;}if(!valid25){const err24 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/4/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;validate23.errors = vErrors;return false;}var valid3 = _errs63 === errors;if(valid3){const _errs71 = errors;const _errs72 = errors;let valid29 = true;const _errs73 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing11;if((data6.matchType === undefined) && (missing11 = "matchType")){const err25 = {};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}else {if(data6.matchType !== undefined){const _errs74 = errors;if("continuous" !== data6.matchType){const err26 = {};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}var valid30 = _errs74 === errors;}else {var valid30 = true;}if(valid30){if(data6.matches !== undefined){let data21 = data6.matches;const _errs75 = errors;if(errors === _errs75){if(Array.isArray(data21)){var valid31 = true;const len3 = data21.length;for(let i3=0; i3<len3; i3++){let data22 = data21[i3];const _errs77 = errors;if(errors === _errs77){if(data22 && typeof data22 == "object" && !Array.isArray(data22)){if(data22.type !== undefined){if("match" !== data22.type){const err27 = {};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}}else {const err28 = {};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var valid31 = _errs77 === errors;if(!valid31){break;}}}else {const err29 = {};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var valid30 = _errs75 === errors;}else {var valid30 = true;}}}}var _valid7 = _errs73 === errors;errors = _errs72;if(vErrors !== null){if(_errs72){vErrors.length = _errs72;}else {vErrors = null;}}if(_valid7){const _errs80 = errors;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.matches !== undefined){let data24 = data6.matches;const _errs81 = errors;if(errors === _errs81){if(Array.isArray(data24)){var valid34 = true;const len4 = data24.length;for(let i4=0; i4<len4; i4++){let data25 = data24[i4];const _errs83 = errors;if(errors === _errs83){if(data25 && typeof data25 == "object" && !Array.isArray(data25)){let missing12;if((data25.complete === undefined) && (missing12 = "complete")){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i4,schemaPath:"#/properties/groups/items/allOf/5/then/properties/matches/items/required",keyword:"required",params:{missingProperty: missing12},message:"must have required property '"+missing12+"'"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches/" + i4,schemaPath:"#/properties/groups/items/allOf/5/then/properties/matches/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid34 = _errs83 === errors;if(!valid34){break;}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matches",schemaPath:"#/properties/groups/items/allOf/5/then/properties/matches/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}var _valid7 = _errs80 === errors;valid29 = _valid7;}if(!valid29){const err30 = {instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/allOf/5/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;validate23.errors = vErrors;return false;}var valid3 = _errs71 === errors;}}}}}if(errors === _errs14){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing13;if(((((data6.id === undefined) && (missing13 = "id")) || ((data6.type === undefined) && (missing13 = "type"))) || ((data6.matchType === undefined) && (missing13 = "matchType"))) || ((data6.matches === undefined) && (missing13 = "matches"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/required",keyword:"required",params:{missingProperty: missing13},message:"must have required property '"+missing13+"'"}];return false;}else {const _errs85 = errors;for(const key1 in data6){if(!(func22.call(schema25.properties.groups.items.properties, key1))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs85 === errors){if(data6.id !== undefined){let data26 = data6.id;const _errs86 = errors;if(errors === _errs86){if(typeof data26 === "string"){if(func2(data26) > 100){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/id",schemaPath:"#/properties/groups/items/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data26) < 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/id",schemaPath:"#/properties/groups/items/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data26)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/id",schemaPath:"#/properties/groups/items/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/id",schemaPath:"#/properties/groups/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid35 = _errs86 === errors;}else {var valid35 = true;}if(valid35){if(data6.name !== undefined){let data27 = data6.name;const _errs88 = errors;if(errors === _errs88){if(typeof data27 === "string"){if(func2(data27) > 1000){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/name",schemaPath:"#/properties/groups/items/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data27) < 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/name",schemaPath:"#/properties/groups/items/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/name",schemaPath:"#/properties/groups/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid35 = _errs88 === errors;}else {var valid35 = true;}if(valid35){if(data6.notes !== undefined){let data28 = data6.notes;const _errs90 = errors;if(errors === _errs90){if(typeof data28 === "string"){if(func2(data28) < 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/notes",schemaPath:"#/properties/groups/items/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/notes",schemaPath:"#/properties/groups/items/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid35 = _errs90 === errors;}else {var valid35 = true;}if(valid35){if(data6.description !== undefined){let data29 = data6.description;const _errs92 = errors;if(errors === _errs92){if(Array.isArray(data29)){var valid36 = true;const len5 = data29.length;for(let i5=0; i5<len5; i5++){let data30 = data29[i5];const _errs94 = errors;if(errors === _errs94){if(typeof data30 === "string"){if(func2(data30) < 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/description/" + i5,schemaPath:"#/properties/groups/items/properties/description/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/description/" + i5,schemaPath:"#/properties/groups/items/properties/description/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid36 = _errs94 === errors;if(!valid36){break;}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/description",schemaPath:"#/properties/groups/items/properties/description/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid35 = _errs92 === errors;}else {var valid35 = true;}if(valid35){if(data6.type !== undefined){let data31 = data6.type;const _errs96 = errors;if(typeof data31 !== "string"){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/type",schemaPath:"#/properties/groups/items/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(((data31 === "league") || (data31 === "crossover")) || (data31 === "knockout"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/type",schemaPath:"#/properties/groups/items/properties/type/enum",keyword:"enum",params:{allowedValues: schema25.properties.groups.items.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid35 = _errs96 === errors;}else {var valid35 = true;}if(valid35){if(data6.knockout !== undefined){let data32 = data6.knockout;const _errs98 = errors;if(errors === _errs98){if(data32 && typeof data32 == "object" && !Array.isArray(data32)){let missing14;if((data32.standing === undefined) && (missing14 = "standing")){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout",schemaPath:"#/properties/groups/items/properties/knockout/required",keyword:"required",params:{missingProperty: missing14},message:"must have required property '"+missing14+"'"}];return false;}else {const _errs100 = errors;for(const key2 in data32){if(!(key2 === "standing")){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout",schemaPath:"#/properties/groups/items/properties/knockout/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];return false;break;}}if(_errs100 === errors){if(data32.standing !== undefined){let data33 = data32.standing;const _errs101 = errors;if(errors === _errs101){if(Array.isArray(data33)){if(data33.length < 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing",schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid38 = true;const len6 = data33.length;for(let i6=0; i6<len6; i6++){let data34 = data33[i6];const _errs103 = errors;if(errors === _errs103){if(data34 && typeof data34 == "object" && !Array.isArray(data34)){let missing15;if(((data34.position === undefined) && (missing15 = "position")) || ((data34.id === undefined) && (missing15 = "id"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing/" + i6,schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/items/required",keyword:"required",params:{missingProperty: missing15},message:"must have required property '"+missing15+"'"}];return false;}else {const _errs105 = errors;for(const key3 in data34){if(!((key3 === "position") || (key3 === "id"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing/" + i6,schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];return false;break;}}if(_errs105 === errors){if(data34.position !== undefined){let data35 = data34.position;const _errs106 = errors;if(errors === _errs106){if(typeof data35 === "string"){if(func2(data35) < 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing/" + i6+"/position",schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/items/properties/position/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing/" + i6+"/position",schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/items/properties/position/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid39 = _errs106 === errors;}else {var valid39 = true;}if(valid39){if(data34.id !== undefined){let data36 = data34.id;const _errs108 = errors;if(errors === _errs108){if(typeof data36 === "string"){if(func2(data36) < 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing/" + i6+"/id",schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/items/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing/" + i6+"/id",schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid39 = _errs108 === errors;}else {var valid39 = true;}}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing/" + i6,schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid38 = _errs103 === errors;if(!valid38){break;}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout/standing",schemaPath:"#/properties/groups/items/properties/knockout/properties/standing/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/knockout",schemaPath:"#/properties/groups/items/properties/knockout/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid35 = _errs98 === errors;}else {var valid35 = true;}if(valid35){if(data6.league !== undefined){let data37 = data6.league;const _errs110 = errors;if(errors === _errs110){if(data37 && typeof data37 == "object" && !Array.isArray(data37)){let missing16;if(((data37.ordering === undefined) && (missing16 = "ordering")) || ((data37.points === undefined) && (missing16 = "points"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league",schemaPath:"#/properties/groups/items/properties/league/required",keyword:"required",params:{missingProperty: missing16},message:"must have required property '"+missing16+"'"}];return false;}else {const _errs112 = errors;for(const key4 in data37){if(!((key4 === "ordering") || (key4 === "points"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league",schemaPath:"#/properties/groups/items/properties/league/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];return false;break;}}if(_errs112 === errors){if(data37.ordering !== undefined){let data38 = data37.ordering;const _errs113 = errors;if(errors === _errs113){if(Array.isArray(data38)){if(data38.length < 1){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/ordering",schemaPath:"#/properties/groups/items/properties/league/properties/ordering/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid41 = true;const len7 = data38.length;for(let i7=0; i7<len7; i7++){let data39 = data38[i7];const _errs115 = errors;if(typeof data39 !== "string"){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/ordering/" + i7,schemaPath:"#/properties/groups/items/properties/league/properties/ordering/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((((((data39 === "PTS") || (data39 === "WINS")) || (data39 === "LOSSES")) || (data39 === "H2H")) || (data39 === "PF")) || (data39 === "PA")) || (data39 === "PD")) || (data39 === "SF")) || (data39 === "SA")) || (data39 === "SD")) || (data39 === "BP")) || (data39 === "PP"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/ordering/" + i7,schemaPath:"#/properties/groups/items/properties/league/properties/ordering/items/enum",keyword:"enum",params:{allowedValues: schema25.properties.groups.items.properties.league.properties.ordering.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid41 = _errs115 === errors;if(!valid41){break;}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/ordering",schemaPath:"#/properties/groups/items/properties/league/properties/ordering/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid40 = _errs113 === errors;}else {var valid40 = true;}if(valid40){if(data37.points !== undefined){let data40 = data37.points;const _errs117 = errors;if(errors === _errs117){if(data40 && typeof data40 == "object" && !Array.isArray(data40)){const _errs119 = errors;for(const key5 in data40){if(!(((((((key5 === "played") || (key5 === "perSet")) || (key5 === "win")) || (key5 === "winByOne")) || (key5 === "lose")) || (key5 === "loseByOne")) || (key5 === "forfeit"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points",schemaPath:"#/properties/groups/items/properties/league/properties/points/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];return false;break;}}if(_errs119 === errors){if(data40.played !== undefined){let data41 = data40.played;const _errs120 = errors;if(!(((typeof data41 == "number") && (!(data41 % 1) && !isNaN(data41))) && (isFinite(data41)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points/played",schemaPath:"#/properties/groups/items/properties/league/properties/points/properties/played/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid42 = _errs120 === errors;}else {var valid42 = true;}if(valid42){if(data40.perSet !== undefined){let data42 = data40.perSet;const _errs122 = errors;if(!(((typeof data42 == "number") && (!(data42 % 1) && !isNaN(data42))) && (isFinite(data42)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points/perSet",schemaPath:"#/properties/groups/items/properties/league/properties/points/properties/perSet/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid42 = _errs122 === errors;}else {var valid42 = true;}if(valid42){if(data40.win !== undefined){let data43 = data40.win;const _errs124 = errors;if(!(((typeof data43 == "number") && (!(data43 % 1) && !isNaN(data43))) && (isFinite(data43)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points/win",schemaPath:"#/properties/groups/items/properties/league/properties/points/properties/win/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid42 = _errs124 === errors;}else {var valid42 = true;}if(valid42){if(data40.winByOne !== undefined){let data44 = data40.winByOne;const _errs126 = errors;if(!(((typeof data44 == "number") && (!(data44 % 1) && !isNaN(data44))) && (isFinite(data44)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points/winByOne",schemaPath:"#/properties/groups/items/properties/league/properties/points/properties/winByOne/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid42 = _errs126 === errors;}else {var valid42 = true;}if(valid42){if(data40.lose !== undefined){let data45 = data40.lose;const _errs128 = errors;if(!(((typeof data45 == "number") && (!(data45 % 1) && !isNaN(data45))) && (isFinite(data45)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points/lose",schemaPath:"#/properties/groups/items/properties/league/properties/points/properties/lose/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid42 = _errs128 === errors;}else {var valid42 = true;}if(valid42){if(data40.loseByOne !== undefined){let data46 = data40.loseByOne;const _errs130 = errors;if(!(((typeof data46 == "number") && (!(data46 % 1) && !isNaN(data46))) && (isFinite(data46)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points/loseByOne",schemaPath:"#/properties/groups/items/properties/league/properties/points/properties/loseByOne/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid42 = _errs130 === errors;}else {var valid42 = true;}if(valid42){if(data40.forfeit !== undefined){let data47 = data40.forfeit;const _errs132 = errors;if(!(((typeof data47 == "number") && (!(data47 % 1) && !isNaN(data47))) && (isFinite(data47)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points/forfeit",schemaPath:"#/properties/groups/items/properties/league/properties/points/properties/forfeit/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid42 = _errs132 === errors;}else {var valid42 = true;}}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league/points",schemaPath:"#/properties/groups/items/properties/league/properties/points/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid40 = _errs117 === errors;}else {var valid40 = true;}}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/league",schemaPath:"#/properties/groups/items/properties/league/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid35 = _errs110 === errors;}else {var valid35 = true;}if(valid35){if(data6.matchType !== undefined){let data48 = data6.matchType;const _errs134 = errors;if(typeof data48 !== "string"){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matchType",schemaPath:"#/properties/groups/items/properties/matchType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data48 === "sets") || (data48 === "continuous"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/matchType",schemaPath:"#/properties/groups/items/properties/matchType/enum",keyword:"enum",params:{allowedValues: schema25.properties.groups.items.properties.matchType.enum},message:"must be equal to one of the allowed values"}];return false;}var valid35 = _errs134 === errors;}else {var valid35 = true;}if(valid35){if(data6.sets !== undefined){let data49 = data6.sets;const _errs136 = errors;if(errors === _errs136){if(data49 && typeof data49 == "object" && !Array.isArray(data49)){const _errs138 = errors;for(const key6 in data49){if(!((((((((key6 === "maxSets") || (key6 === "setsToWin")) || (key6 === "clearPoints")) || (key6 === "minPoints")) || (key6 === "pointsToWin")) || (key6 === "lastSetPointsToWin")) || (key6 === "maxPoints")) || (key6 === "lastSetMaxPoints"))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets",schemaPath:"#/properties/groups/items/properties/sets/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"}];return false;break;}}if(_errs138 === errors){if(data49.maxSets !== undefined){let data50 = data49.maxSets;const _errs139 = errors;if(!(((typeof data50 == "number") && (!(data50 % 1) && !isNaN(data50))) && (isFinite(data50)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/maxSets",schemaPath:"#/properties/groups/items/properties/sets/properties/maxSets/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs139){if((typeof data50 == "number") && (isFinite(data50))){if(data50 < 1 || isNaN(data50)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/maxSets",schemaPath:"#/properties/groups/items/properties/sets/properties/maxSets/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid43 = _errs139 === errors;}else {var valid43 = true;}if(valid43){if(data49.setsToWin !== undefined){let data51 = data49.setsToWin;const _errs141 = errors;if(!(((typeof data51 == "number") && (!(data51 % 1) && !isNaN(data51))) && (isFinite(data51)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/setsToWin",schemaPath:"#/properties/groups/items/properties/sets/properties/setsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs141){if((typeof data51 == "number") && (isFinite(data51))){if(data51 < 1 || isNaN(data51)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/setsToWin",schemaPath:"#/properties/groups/items/properties/sets/properties/setsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid43 = _errs141 === errors;}else {var valid43 = true;}if(valid43){if(data49.clearPoints !== undefined){let data52 = data49.clearPoints;const _errs143 = errors;if(!(((typeof data52 == "number") && (!(data52 % 1) && !isNaN(data52))) && (isFinite(data52)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/clearPoints",schemaPath:"#/properties/groups/items/properties/sets/properties/clearPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs143){if((typeof data52 == "number") && (isFinite(data52))){if(data52 < 1 || isNaN(data52)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/clearPoints",schemaPath:"#/properties/groups/items/properties/sets/properties/clearPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid43 = _errs143 === errors;}else {var valid43 = true;}if(valid43){if(data49.minPoints !== undefined){let data53 = data49.minPoints;const _errs145 = errors;if(!(((typeof data53 == "number") && (!(data53 % 1) && !isNaN(data53))) && (isFinite(data53)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/minPoints",schemaPath:"#/properties/groups/items/properties/sets/properties/minPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs145){if((typeof data53 == "number") && (isFinite(data53))){if(data53 < 1 || isNaN(data53)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/minPoints",schemaPath:"#/properties/groups/items/properties/sets/properties/minPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid43 = _errs145 === errors;}else {var valid43 = true;}if(valid43){if(data49.pointsToWin !== undefined){let data54 = data49.pointsToWin;const _errs147 = errors;if(!(((typeof data54 == "number") && (!(data54 % 1) && !isNaN(data54))) && (isFinite(data54)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/pointsToWin",schemaPath:"#/properties/groups/items/properties/sets/properties/pointsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs147){if((typeof data54 == "number") && (isFinite(data54))){if(data54 < 1 || isNaN(data54)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/pointsToWin",schemaPath:"#/properties/groups/items/properties/sets/properties/pointsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid43 = _errs147 === errors;}else {var valid43 = true;}if(valid43){if(data49.lastSetPointsToWin !== undefined){let data55 = data49.lastSetPointsToWin;const _errs149 = errors;if(!(((typeof data55 == "number") && (!(data55 % 1) && !isNaN(data55))) && (isFinite(data55)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/lastSetPointsToWin",schemaPath:"#/properties/groups/items/properties/sets/properties/lastSetPointsToWin/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs149){if((typeof data55 == "number") && (isFinite(data55))){if(data55 < 1 || isNaN(data55)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/lastSetPointsToWin",schemaPath:"#/properties/groups/items/properties/sets/properties/lastSetPointsToWin/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid43 = _errs149 === errors;}else {var valid43 = true;}if(valid43){if(data49.maxPoints !== undefined){let data56 = data49.maxPoints;const _errs151 = errors;if(!(((typeof data56 == "number") && (!(data56 % 1) && !isNaN(data56))) && (isFinite(data56)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/maxPoints",schemaPath:"#/properties/groups/items/properties/sets/properties/maxPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs151){if((typeof data56 == "number") && (isFinite(data56))){if(data56 < 1 || isNaN(data56)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/maxPoints",schemaPath:"#/properties/groups/items/properties/sets/properties/maxPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid43 = _errs151 === errors;}else {var valid43 = true;}if(valid43){if(data49.lastSetMaxPoints !== undefined){let data57 = data49.lastSetMaxPoints;const _errs153 = errors;if(!(((typeof data57 == "number") && (!(data57 % 1) && !isNaN(data57))) && (isFinite(data57)))){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/lastSetMaxPoints",schemaPath:"#/properties/groups/items/properties/sets/properties/lastSetMaxPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs153){if((typeof data57 == "number") && (isFinite(data57))){if(data57 < 1 || isNaN(data57)){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets/lastSetMaxPoints",schemaPath:"#/properties/groups/items/properties/sets/properties/lastSetMaxPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];return false;}}}var valid43 = _errs153 === errors;}else {var valid43 = true;}}}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/sets",schemaPath:"#/properties/groups/items/properties/sets/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid35 = _errs136 === errors;}else {var valid35 = true;}if(valid35){if(data6.drawsAllowed !== undefined){const _errs155 = errors;if(typeof data6.drawsAllowed !== "boolean"){validate23.errors = [{instancePath:instancePath+"/groups/" + i1+"/drawsAllowed",schemaPath:"#/properties/groups/items/properties/drawsAllowed/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid35 = _errs155 === errors;}else {var valid35 = true;}if(valid35){if(data6.matches !== undefined){const _errs157 = errors;if(!(validate24(data6.matches, {instancePath:instancePath+"/groups/" + i1+"/matches",parentData:data6,parentDataProperty:"matches",rootData}))){vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);errors = vErrors.length;}var valid35 = _errs157 === errors;}else {var valid35 = true;}}}}}}}}}}}}}}else {validate23.errors = [{instancePath:instancePath+"/groups/" + i1,schemaPath:"#/properties/groups/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid2 = _errs14 === errors;if(!valid2){break;}}}else {validate23.errors = [{instancePath:instancePath+"/groups",schemaPath:"#/properties/groups/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.ifUnknown !== undefined){let data60 = data.ifUnknown;const _errs158 = errors;if(errors === _errs158){if(data60 && typeof data60 == "object" && !Array.isArray(data60)){let missing17;if((data60.description === undefined) && (missing17 = "description")){validate23.errors = [{instancePath:instancePath+"/ifUnknown",schemaPath:"#/properties/ifUnknown/required",keyword:"required",params:{missingProperty: missing17},message:"must have required property '"+missing17+"'"}];return false;}else {const _errs160 = errors;for(const key7 in data60){if(!((key7 === "description") || (key7 === "matches"))){validate23.errors = [{instancePath:instancePath+"/ifUnknown",schemaPath:"#/properties/ifUnknown/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"}];return false;break;}}if(_errs160 === errors){if(data60.description !== undefined){let data61 = data60.description;const _errs161 = errors;if(errors === _errs161){if(Array.isArray(data61)){var valid45 = true;const len8 = data61.length;for(let i8=0; i8<len8; i8++){let data62 = data61[i8];const _errs163 = errors;if(errors === _errs163){if(typeof data62 === "string"){if(func2(data62) < 1){validate23.errors = [{instancePath:instancePath+"/ifUnknown/description/" + i8,schemaPath:"#/properties/ifUnknown/properties/description/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate23.errors = [{instancePath:instancePath+"/ifUnknown/description/" + i8,schemaPath:"#/properties/ifUnknown/properties/description/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid45 = _errs163 === errors;if(!valid45){break;}}}else {validate23.errors = [{instancePath:instancePath+"/ifUnknown/description",schemaPath:"#/properties/ifUnknown/properties/description/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid44 = _errs161 === errors;}else {var valid44 = true;}if(valid44){if(data60.matches !== undefined){const _errs165 = errors;if(!(validate24(data60.matches, {instancePath:instancePath+"/ifUnknown/matches",parentData:data60,parentDataProperty:"matches",rootData}))){vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);errors = vErrors.length;}var valid44 = _errs165 === errors;}else {var valid44 = true;}}}}}else {validate23.errors = [{instancePath:instancePath+"/ifUnknown",schemaPath:"#/properties/ifUnknown/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs158 === errors;}else {var valid0 = true;}}}}}}}}}else {validate23.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate23.errors = vErrors;return errors === 0;}export const validateStageUpdate = validate27;const schema29 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/stageUpdate","description":"Details on a stage","type":"object","additionalProperties":false,"properties":{"name":{"description":"The name for the stage","type":"string","minLength":1,"maxLength":1000},"notes":{"description":"Free form string to add notes about this stage.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"description":{"description":"An array of string values as a verbose description of the nature of the stage, e.g. 'The first stage of the competition will consist of separate pools, where....'","type":"array","items":{"description":"A part of the description of this stage","type":"string","minLength":1}},"ifUnknown":{"description":"It can be useful to still present something to the user about the later stages of a competition, even if the teams playing in that stage is not yet known.  This defines what should be presented in any application handling this competition's data in such cases","type":"object","additionalProperties":false,"properties":{"description":{"description":"An array of string values to be presented in the case that the teams in this stage are not yet known, typically as an explanation of what this stage will contain (e.g. 'The crossover games will be between the top two teams in each pool')","type":"array","items":{"description":"A part of the description of this stage","type":"string","minLength":1}},"matches":{"$ref":"#/$defs/matches"}},"required":["description"]}},"$defs":{"team":{"description":"A team playing in the match","type":"object","additionalProperties":false,"properties":{"id":{"description":"The identifier for the team.  This can either be a team ID or a team reference (see the documentation)","type":"string","minLength":1,"maxLength":1000},"scores":{"description":"The array of set scores.  If the matchType is 'continuous' then only the first value in the array is used","type":"array","items":{"description":"The set score","type":"integer","minimum":0}},"mvp":{"description":"This team's most valuable player award.  This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1},"forfeit":{"description":"Did this team forfeit the match","type":"boolean","default":false},"bonusPoints":{"description":"Does this team get any bonus points in the league.  This is separate from any league points calculated from the match result, and is added to their league points","type":"integer","default":0,"minimum":0},"penaltyPoints":{"description":"Does this team receive any penalty points in the league.  This is separate from any league points calculated from the match result, and is subtracted from their league points","type":"integer","default":0,"minimum":0},"notes":{"description":"Free form string to add notes about the team relating to this match.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"players":{"description":"The list of players from this team that played in this match.  This can be either a player's name or a reference to a player ID","type":"array","items":{"description":"Either the name of the player or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  Not all entries need to be references, meaning that the document can allow a mix of registered players with a player ID, and unregistered players indicated just by name","type":"string","minLength":1}}},"required":["id","scores"]},"matches":{"description":"An array of matches (or breaks in play) in this group.  Note that a team ID and each unique team references can ony appear in one group, i.e. a team cannot play in multiple groups in a stage; if they did then those two groups would technically be the same group","type":"array","items":{"oneOf":[{"description":"A match between two teams","type":"object","additionalProperties":false,"properties":{"id":{"description":"An identifier for this match, i.e. a match number.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"court":{"description":"The court that a match takes place on","type":"string","minLength":1,"maxLength":1000},"venue":{"description":"The venue that a match takes place at","type":"string","minLength":1,"maxLength":10000},"type":{"description":"The type of match, i.e. 'match'","type":"string","enum":["match"]},"date":{"description":"The date of the match in the format YYYY-MM-DD","type":"string","format":"date"},"warmup":{"description":"The start time for the warmup in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"start":{"description":"The start time for the match in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"duration":{"description":"The maximum duration of the match in the format HH:mm","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"complete":{"description":"Whether the match is complete.  This must be set when a match has a \"duration\" or when the matchType is \"continuous\".  What about a \"continuous\" match with no \"duration\" and a target score?  This can be represented by a \"sets\" match with \"maxSets\" = 1","type":"boolean"},"homeTeam":{"$ref":"#/$defs/team","description":"The 'home' team for the match"},"awayTeam":{"$ref":"#/$defs/team","description":"The 'away' team for the match"},"officials":{"oneOf":[{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to referee the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]},{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"first":{"description":"The first referee","type":"string","minLength":1},"second":{"description":"The second referee","type":"string","minLength":1},"challenge":{"description":"The challenge referee, responsible for resolving challenges from the teams","type":"string","minLength":1},"assistantChallenge":{"description":"The assistant challenge referee, who assists the challenge referee","type":"string","minLength":1},"reserve":{"description":"The reserve referee","type":"string","minLength":1},"scorer":{"description":"The scorer","type":"string","minLength":1},"assistantScorer":{"description":"The assistant scorer","type":"string","minLength":1},"linespersons":{"description":"The list of linespersons","type":"array","maxItems":4,"items":{"description":"A linesperson","type":"string","minLength":1}},"ballCrew":{"description":"The list of people in charge of managing the game balls","type":"array","maxItems":100,"items":{"description":"A ball person","type":"string","minLength":1}}},"required":["first"]}]},"mvp":{"description":"A most valuable player award for the match. This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1,"maxLength":203},"manager":{"oneOf":[{"description":"The court manager in charge of this match","type":"string","minLength":1,"maxLength":1000},{"description":"The court managers for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to manage the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]}]},"friendly":{"description":"Whether the match is a friendly.  These matches do not contribute toward a league position.  If a team only participates in friendly matches then they are not included in the league table at all","type":"boolean","default":false},"notes":{"description":"Free form string to add notes about a match","type":"string","minLength":1}},"dependencies":{"duration":["complete"]},"required":["id","type","homeTeam","awayTeam"]},{"description":"A break in play, possibly while other matches are going on in other competitions running in parallel","type":"object","additionalProperties":false,"properties":{"type":{"description":"The type of match, i.e. 'break'","type":"string","enum":["break"]},"start":{"description":"The start time for the break in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"date":{"description":"The date of the break in the format YYYY-MM-DD","type":"string","format":"date"},"duration":{"description":"The duration of the break","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"name":{"description":"The name for the break, e.g. 'Lunch break'","default":"Break","type":"string","minLength":1,"maxLength":1000}},"required":["type"]}]}}}};const schema30 = {"description":"An array of matches (or breaks in play) in this group.  Note that a team ID and each unique team references can ony appear in one group, i.e. a team cannot play in multiple groups in a stage; if they did then those two groups would technically be the same group","type":"array","items":{"oneOf":[{"description":"A match between two teams","type":"object","additionalProperties":false,"properties":{"id":{"description":"An identifier for this match, i.e. a match number.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"court":{"description":"The court that a match takes place on","type":"string","minLength":1,"maxLength":1000},"venue":{"description":"The venue that a match takes place at","type":"string","minLength":1,"maxLength":10000},"type":{"description":"The type of match, i.e. 'match'","type":"string","enum":["match"]},"date":{"description":"The date of the match in the format YYYY-MM-DD","type":"string","format":"date"},"warmup":{"description":"The start time for the warmup in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"start":{"description":"The start time for the match in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"duration":{"description":"The maximum duration of the match in the format HH:mm","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"complete":{"description":"Whether the match is complete.  This must be set when a match has a \"duration\" or when the matchType is \"continuous\".  What about a \"continuous\" match with no \"duration\" and a target score?  This can be represented by a \"sets\" match with \"maxSets\" = 1","type":"boolean"},"homeTeam":{"$ref":"#/$defs/team","description":"The 'home' team for the match"},"awayTeam":{"$ref":"#/$defs/team","description":"The 'away' team for the match"},"officials":{"oneOf":[{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to referee the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]},{"description":"The officials for this match","type":"object","additionalProperties":false,"properties":{"first":{"description":"The first referee","type":"string","minLength":1},"second":{"description":"The second referee","type":"string","minLength":1},"challenge":{"description":"The challenge referee, responsible for resolving challenges from the teams","type":"string","minLength":1},"assistantChallenge":{"description":"The assistant challenge referee, who assists the challenge referee","type":"string","minLength":1},"reserve":{"description":"The reserve referee","type":"string","minLength":1},"scorer":{"description":"The scorer","type":"string","minLength":1},"assistantScorer":{"description":"The assistant scorer","type":"string","minLength":1},"linespersons":{"description":"The list of linespersons","type":"array","maxItems":4,"items":{"description":"A linesperson","type":"string","minLength":1}},"ballCrew":{"description":"The list of people in charge of managing the game balls","type":"array","maxItems":100,"items":{"description":"A ball person","type":"string","minLength":1}}},"required":["first"]}]},"mvp":{"description":"A most valuable player award for the match. This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1,"maxLength":203},"manager":{"oneOf":[{"description":"The court manager in charge of this match","type":"string","minLength":1,"maxLength":1000},{"description":"The court managers for this match","type":"object","additionalProperties":false,"properties":{"team":{"description":"The team assigned to manage the match.  This can either be a team ID or a team reference","type":"string","minLength":1,"maxLength":1000}},"required":["team"]}]},"friendly":{"description":"Whether the match is a friendly.  These matches do not contribute toward a league position.  If a team only participates in friendly matches then they are not included in the league table at all","type":"boolean","default":false},"notes":{"description":"Free form string to add notes about a match","type":"string","minLength":1}},"dependencies":{"duration":["complete"]},"required":["id","type","homeTeam","awayTeam"]},{"description":"A break in play, possibly while other matches are going on in other competitions running in parallel","type":"object","additionalProperties":false,"properties":{"type":{"description":"The type of match, i.e. 'break'","type":"string","enum":["break"]},"start":{"description":"The start time for the break in the format HH:mm using a 24 hour clock","type":"string","pattern":"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},"date":{"description":"The date of the break in the format YYYY-MM-DD","type":"string","format":"date"},"duration":{"description":"The duration of the break","type":"string","pattern":"^[0-9]+:[0-5][0-9]$"},"name":{"description":"The name for the break, e.g. 'Lunch break'","default":"Break","type":"string","minLength":1,"maxLength":1000}},"required":["type"]}]}};const schema31 = {"description":"A team playing in the match","type":"object","additionalProperties":false,"properties":{"id":{"description":"The identifier for the team.  This can either be a team ID or a team reference (see the documentation)","type":"string","minLength":1,"maxLength":1000},"scores":{"description":"The array of set scores.  If the matchType is 'continuous' then only the first value in the array is used","type":"array","items":{"description":"The set score","type":"integer","minimum":0}},"mvp":{"description":"This team's most valuable player award.  This can either be a name or a reference to a player ID.  A reference takes the form {PLAYER_ID}","type":"string","minLength":1},"forfeit":{"description":"Did this team forfeit the match","type":"boolean","default":false},"bonusPoints":{"description":"Does this team get any bonus points in the league.  This is separate from any league points calculated from the match result, and is added to their league points","type":"integer","default":0,"minimum":0},"penaltyPoints":{"description":"Does this team receive any penalty points in the league.  This is separate from any league points calculated from the match result, and is subtracted from their league points","type":"integer","default":0,"minimum":0},"notes":{"description":"Free form string to add notes about the team relating to this match.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1},"players":{"description":"The list of players from this team that played in this match.  This can be either a player's name or a reference to a player ID","type":"array","items":{"description":"Either the name of the player or a reference to a player ID.  A reference takes the form {PLAYER_ID}.  Not all entries need to be references, meaning that the document can allow a mix of registered players with a player ID, and unregistered players indicated just by name","type":"string","minLength":1}}},"required":["id","scores"]};function validate28(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){let data0 = data[i0];const _errs1 = errors;const _errs2 = errors;let valid1 = false;let passing0 = null;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing0;if(((((data0.id === undefined) && (missing0 = "id")) || ((data0.type === undefined) && (missing0 = "type"))) || ((data0.homeTeam === undefined) && (missing0 = "homeTeam"))) || ((data0.awayTeam === undefined) && (missing0 = "awayTeam"))){const err0 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}else {const _errs5 = errors;for(const key0 in data0){if(!(func22.call(schema30.items.oneOf[0].properties, key0))){const err1 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;break;}}if(_errs5 === errors){let missing1;if(data0.duration !== undefined && ((data0.complete === undefined) && (missing1 = "complete"))){const err2 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/dependencies",keyword:"dependencies",params:{property: "duration",
    missingProperty: missing1,
    depsCount: 1,
    deps: "complete"},message:"must have property complete when property duration is present"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}else {if(data0.id !== undefined){let data1 = data0.id;const _errs6 = errors;if(errors === _errs6){if(typeof data1 === "string"){if(func2(data1) > 100){const err3 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}else {if(func2(data1) < 1){const err4 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}else {if(!pattern0.test(data1)){const err5 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}}}else {const err6 = {instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/items/oneOf/0/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var valid3 = _errs6 === errors;}else {var valid3 = true;}if(valid3){if(data0.court !== undefined){let data2 = data0.court;const _errs8 = errors;if(errors === _errs8){if(typeof data2 === "string"){if(func2(data2) > 1000){const err7 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}else {if(func2(data2) < 1){const err8 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}}else {const err9 = {instancePath:instancePath+"/" + i0+"/court",schemaPath:"#/items/oneOf/0/properties/court/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var valid3 = _errs8 === errors;}else {var valid3 = true;}if(valid3){if(data0.venue !== undefined){let data3 = data0.venue;const _errs10 = errors;if(errors === _errs10){if(typeof data3 === "string"){if(func2(data3) > 10000){const err10 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/maxLength",keyword:"maxLength",params:{limit: 10000},message:"must NOT have more than 10000 characters"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}else {if(func2(data3) < 1){const err11 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}}else {const err12 = {instancePath:instancePath+"/" + i0+"/venue",schemaPath:"#/items/oneOf/0/properties/venue/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data0.type !== undefined){let data4 = data0.type;const _errs12 = errors;if(typeof data4 !== "string"){const err13 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/0/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}if(!(data4 === "match")){const err14 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/0/properties/type/enum",keyword:"enum",params:{allowedValues: schema30.items.oneOf[0].properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data0.date !== undefined){let data5 = data0.date;const _errs14 = errors;if(errors === _errs14){if(errors === _errs14){if(typeof data5 === "string"){if(!(formats4.validate(data5))){const err15 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/0/properties/date/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}else {const err16 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/0/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data0.warmup !== undefined){let data6 = data0.warmup;const _errs16 = errors;if(errors === _errs16){if(typeof data6 === "string"){if(!pattern4.test(data6)){const err17 = {instancePath:instancePath+"/" + i0+"/warmup",schemaPath:"#/items/oneOf/0/properties/warmup/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}else {const err18 = {instancePath:instancePath+"/" + i0+"/warmup",schemaPath:"#/items/oneOf/0/properties/warmup/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data0.start !== undefined){let data7 = data0.start;const _errs18 = errors;if(errors === _errs18){if(typeof data7 === "string"){if(!pattern4.test(data7)){const err19 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/0/properties/start/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}else {const err20 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/0/properties/start/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var valid3 = _errs18 === errors;}else {var valid3 = true;}if(valid3){if(data0.duration !== undefined){let data8 = data0.duration;const _errs20 = errors;if(errors === _errs20){if(typeof data8 === "string"){if(!pattern6.test(data8)){const err21 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/0/properties/duration/pattern",keyword:"pattern",params:{pattern: "^[0-9]+:[0-5][0-9]$"},message:"must match pattern \""+"^[0-9]+:[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}else {const err22 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/0/properties/duration/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var valid3 = _errs20 === errors;}else {var valid3 = true;}if(valid3){if(data0.complete !== undefined){const _errs22 = errors;if(typeof data0.complete !== "boolean"){const err23 = {instancePath:instancePath+"/" + i0+"/complete",schemaPath:"#/items/oneOf/0/properties/complete/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}var valid3 = _errs22 === errors;}else {var valid3 = true;}if(valid3){if(data0.homeTeam !== undefined){let data10 = data0.homeTeam;const _errs24 = errors;const _errs25 = errors;if(errors === _errs25){if(data10 && typeof data10 == "object" && !Array.isArray(data10)){let missing2;if(((data10.id === undefined) && (missing2 = "id")) || ((data10.scores === undefined) && (missing2 = "scores"))){const err24 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}else {const _errs27 = errors;for(const key1 in data10){if(!((((((((key1 === "id") || (key1 === "scores")) || (key1 === "mvp")) || (key1 === "forfeit")) || (key1 === "bonusPoints")) || (key1 === "penaltyPoints")) || (key1 === "notes")) || (key1 === "players"))){const err25 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;break;}}if(_errs27 === errors){if(data10.id !== undefined){let data11 = data10.id;const _errs28 = errors;if(errors === _errs28){if(typeof data11 === "string"){if(func2(data11) > 1000){const err26 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}else {if(func2(data11) < 1){const err27 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}}else {const err28 = {instancePath:instancePath+"/" + i0+"/homeTeam/id",schemaPath:"#/$defs/team/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var valid5 = _errs28 === errors;}else {var valid5 = true;}if(valid5){if(data10.scores !== undefined){let data12 = data10.scores;const _errs30 = errors;if(errors === _errs30){if(Array.isArray(data12)){var valid6 = true;const len1 = data12.length;for(let i1=0; i1<len1; i1++){let data13 = data12[i1];const _errs32 = errors;if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){const err29 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores/" + i1,schemaPath:"#/$defs/team/properties/scores/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}if(errors === _errs32){if((typeof data13 == "number") && (isFinite(data13))){if(data13 < 0 || isNaN(data13)){const err30 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores/" + i1,schemaPath:"#/$defs/team/properties/scores/items/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}}var valid6 = _errs32 === errors;if(!valid6){break;}}}else {const err31 = {instancePath:instancePath+"/" + i0+"/homeTeam/scores",schemaPath:"#/$defs/team/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var valid5 = _errs30 === errors;}else {var valid5 = true;}if(valid5){if(data10.mvp !== undefined){let data14 = data10.mvp;const _errs34 = errors;if(errors === _errs34){if(typeof data14 === "string"){if(func2(data14) < 1){const err32 = {instancePath:instancePath+"/" + i0+"/homeTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}else {const err33 = {instancePath:instancePath+"/" + i0+"/homeTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var valid5 = _errs34 === errors;}else {var valid5 = true;}if(valid5){if(data10.forfeit !== undefined){const _errs36 = errors;if(typeof data10.forfeit !== "boolean"){const err34 = {instancePath:instancePath+"/" + i0+"/homeTeam/forfeit",schemaPath:"#/$defs/team/properties/forfeit/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}var valid5 = _errs36 === errors;}else {var valid5 = true;}if(valid5){if(data10.bonusPoints !== undefined){let data16 = data10.bonusPoints;const _errs38 = errors;if(!(((typeof data16 == "number") && (!(data16 % 1) && !isNaN(data16))) && (isFinite(data16)))){const err35 = {instancePath:instancePath+"/" + i0+"/homeTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}if(errors === _errs38){if((typeof data16 == "number") && (isFinite(data16))){if(data16 < 0 || isNaN(data16)){const err36 = {instancePath:instancePath+"/" + i0+"/homeTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}}var valid5 = _errs38 === errors;}else {var valid5 = true;}if(valid5){if(data10.penaltyPoints !== undefined){let data17 = data10.penaltyPoints;const _errs40 = errors;if(!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))){const err37 = {instancePath:instancePath+"/" + i0+"/homeTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}if(errors === _errs40){if((typeof data17 == "number") && (isFinite(data17))){if(data17 < 0 || isNaN(data17)){const err38 = {instancePath:instancePath+"/" + i0+"/homeTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}}var valid5 = _errs40 === errors;}else {var valid5 = true;}if(valid5){if(data10.notes !== undefined){let data18 = data10.notes;const _errs42 = errors;if(errors === _errs42){if(typeof data18 === "string"){if(func2(data18) < 1){const err39 = {instancePath:instancePath+"/" + i0+"/homeTeam/notes",schemaPath:"#/$defs/team/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}else {const err40 = {instancePath:instancePath+"/" + i0+"/homeTeam/notes",schemaPath:"#/$defs/team/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var valid5 = _errs42 === errors;}else {var valid5 = true;}if(valid5){if(data10.players !== undefined){let data19 = data10.players;const _errs44 = errors;if(errors === _errs44){if(Array.isArray(data19)){var valid7 = true;const len2 = data19.length;for(let i2=0; i2<len2; i2++){let data20 = data19[i2];const _errs46 = errors;if(errors === _errs46){if(typeof data20 === "string"){if(func2(data20) < 1){const err41 = {instancePath:instancePath+"/" + i0+"/homeTeam/players/" + i2,schemaPath:"#/$defs/team/properties/players/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}else {const err42 = {instancePath:instancePath+"/" + i0+"/homeTeam/players/" + i2,schemaPath:"#/$defs/team/properties/players/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var valid7 = _errs46 === errors;if(!valid7){break;}}}else {const err43 = {instancePath:instancePath+"/" + i0+"/homeTeam/players",schemaPath:"#/$defs/team/properties/players/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var valid5 = _errs44 === errors;}else {var valid5 = true;}}}}}}}}}}}else {const err44 = {instancePath:instancePath+"/" + i0+"/homeTeam",schemaPath:"#/$defs/team/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var valid3 = _errs24 === errors;}else {var valid3 = true;}if(valid3){if(data0.awayTeam !== undefined){let data21 = data0.awayTeam;const _errs48 = errors;const _errs49 = errors;if(errors === _errs49){if(data21 && typeof data21 == "object" && !Array.isArray(data21)){let missing3;if(((data21.id === undefined) && (missing3 = "id")) || ((data21.scores === undefined) && (missing3 = "scores"))){const err45 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}else {const _errs51 = errors;for(const key2 in data21){if(!((((((((key2 === "id") || (key2 === "scores")) || (key2 === "mvp")) || (key2 === "forfeit")) || (key2 === "bonusPoints")) || (key2 === "penaltyPoints")) || (key2 === "notes")) || (key2 === "players"))){const err46 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;break;}}if(_errs51 === errors){if(data21.id !== undefined){let data22 = data21.id;const _errs52 = errors;if(errors === _errs52){if(typeof data22 === "string"){if(func2(data22) > 1000){const err47 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}else {if(func2(data22) < 1){const err48 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}}else {const err49 = {instancePath:instancePath+"/" + i0+"/awayTeam/id",schemaPath:"#/$defs/team/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var valid9 = _errs52 === errors;}else {var valid9 = true;}if(valid9){if(data21.scores !== undefined){let data23 = data21.scores;const _errs54 = errors;if(errors === _errs54){if(Array.isArray(data23)){var valid10 = true;const len3 = data23.length;for(let i3=0; i3<len3; i3++){let data24 = data23[i3];const _errs56 = errors;if(!(((typeof data24 == "number") && (!(data24 % 1) && !isNaN(data24))) && (isFinite(data24)))){const err50 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores/" + i3,schemaPath:"#/$defs/team/properties/scores/items/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}if(errors === _errs56){if((typeof data24 == "number") && (isFinite(data24))){if(data24 < 0 || isNaN(data24)){const err51 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores/" + i3,schemaPath:"#/$defs/team/properties/scores/items/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}}var valid10 = _errs56 === errors;if(!valid10){break;}}}else {const err52 = {instancePath:instancePath+"/" + i0+"/awayTeam/scores",schemaPath:"#/$defs/team/properties/scores/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var valid9 = _errs54 === errors;}else {var valid9 = true;}if(valid9){if(data21.mvp !== undefined){let data25 = data21.mvp;const _errs58 = errors;if(errors === _errs58){if(typeof data25 === "string"){if(func2(data25) < 1){const err53 = {instancePath:instancePath+"/" + i0+"/awayTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}else {const err54 = {instancePath:instancePath+"/" + i0+"/awayTeam/mvp",schemaPath:"#/$defs/team/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var valid9 = _errs58 === errors;}else {var valid9 = true;}if(valid9){if(data21.forfeit !== undefined){const _errs60 = errors;if(typeof data21.forfeit !== "boolean"){const err55 = {instancePath:instancePath+"/" + i0+"/awayTeam/forfeit",schemaPath:"#/$defs/team/properties/forfeit/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}var valid9 = _errs60 === errors;}else {var valid9 = true;}if(valid9){if(data21.bonusPoints !== undefined){let data27 = data21.bonusPoints;const _errs62 = errors;if(!(((typeof data27 == "number") && (!(data27 % 1) && !isNaN(data27))) && (isFinite(data27)))){const err56 = {instancePath:instancePath+"/" + i0+"/awayTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}if(errors === _errs62){if((typeof data27 == "number") && (isFinite(data27))){if(data27 < 0 || isNaN(data27)){const err57 = {instancePath:instancePath+"/" + i0+"/awayTeam/bonusPoints",schemaPath:"#/$defs/team/properties/bonusPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}}var valid9 = _errs62 === errors;}else {var valid9 = true;}if(valid9){if(data21.penaltyPoints !== undefined){let data28 = data21.penaltyPoints;const _errs64 = errors;if(!(((typeof data28 == "number") && (!(data28 % 1) && !isNaN(data28))) && (isFinite(data28)))){const err58 = {instancePath:instancePath+"/" + i0+"/awayTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}if(errors === _errs64){if((typeof data28 == "number") && (isFinite(data28))){if(data28 < 0 || isNaN(data28)){const err59 = {instancePath:instancePath+"/" + i0+"/awayTeam/penaltyPoints",schemaPath:"#/$defs/team/properties/penaltyPoints/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}}var valid9 = _errs64 === errors;}else {var valid9 = true;}if(valid9){if(data21.notes !== undefined){let data29 = data21.notes;const _errs66 = errors;if(errors === _errs66){if(typeof data29 === "string"){if(func2(data29) < 1){const err60 = {instancePath:instancePath+"/" + i0+"/awayTeam/notes",schemaPath:"#/$defs/team/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}else {const err61 = {instancePath:instancePath+"/" + i0+"/awayTeam/notes",schemaPath:"#/$defs/team/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var valid9 = _errs66 === errors;}else {var valid9 = true;}if(valid9){if(data21.players !== undefined){let data30 = data21.players;const _errs68 = errors;if(errors === _errs68){if(Array.isArray(data30)){var valid11 = true;const len4 = data30.length;for(let i4=0; i4<len4; i4++){let data31 = data30[i4];const _errs70 = errors;if(errors === _errs70){if(typeof data31 === "string"){if(func2(data31) < 1){const err62 = {instancePath:instancePath+"/" + i0+"/awayTeam/players/" + i4,schemaPath:"#/$defs/team/properties/players/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}else {const err63 = {instancePath:instancePath+"/" + i0+"/awayTeam/players/" + i4,schemaPath:"#/$defs/team/properties/players/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var valid11 = _errs70 === errors;if(!valid11){break;}}}else {const err64 = {instancePath:instancePath+"/" + i0+"/awayTeam/players",schemaPath:"#/$defs/team/properties/players/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var valid9 = _errs68 === errors;}else {var valid9 = true;}}}}}}}}}}}else {const err65 = {instancePath:instancePath+"/" + i0+"/awayTeam",schemaPath:"#/$defs/team/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var valid3 = _errs48 === errors;}else {var valid3 = true;}if(valid3){if(data0.officials !== undefined){let data32 = data0.officials;const _errs72 = errors;const _errs73 = errors;let valid12 = false;let passing1 = null;const _errs74 = errors;if(errors === _errs74){if(data32 && typeof data32 == "object" && !Array.isArray(data32)){let missing4;if((data32.team === undefined) && (missing4 = "team")){const err66 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}else {const _errs76 = errors;for(const key3 in data32){if(!(key3 === "team")){const err67 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;break;}}if(_errs76 === errors){if(data32.team !== undefined){let data33 = data32.team;const _errs77 = errors;if(errors === _errs77){if(typeof data33 === "string"){if(func2(data33) > 1000){const err68 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}else {if(func2(data33) < 1){const err69 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}}else {const err70 = {instancePath:instancePath+"/" + i0+"/officials/team",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/properties/team/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}}}}}else {const err71 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}var _valid1 = _errs74 === errors;if(_valid1){valid12 = true;passing1 = 0;}const _errs79 = errors;if(errors === _errs79){if(data32 && typeof data32 == "object" && !Array.isArray(data32)){let missing5;if((data32.first === undefined) && (missing5 = "first")){const err72 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}else {const _errs81 = errors;for(const key4 in data32){if(!(func22.call(schema30.items.oneOf[0].properties.officials.oneOf[1].properties, key4))){const err73 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;break;}}if(_errs81 === errors){if(data32.first !== undefined){let data34 = data32.first;const _errs82 = errors;if(errors === _errs82){if(typeof data34 === "string"){if(func2(data34) < 1){const err74 = {instancePath:instancePath+"/" + i0+"/officials/first",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/first/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}else {const err75 = {instancePath:instancePath+"/" + i0+"/officials/first",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/first/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}var valid14 = _errs82 === errors;}else {var valid14 = true;}if(valid14){if(data32.second !== undefined){let data35 = data32.second;const _errs84 = errors;if(errors === _errs84){if(typeof data35 === "string"){if(func2(data35) < 1){const err76 = {instancePath:instancePath+"/" + i0+"/officials/second",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/second/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}else {const err77 = {instancePath:instancePath+"/" + i0+"/officials/second",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/second/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}var valid14 = _errs84 === errors;}else {var valid14 = true;}if(valid14){if(data32.challenge !== undefined){let data36 = data32.challenge;const _errs86 = errors;if(errors === _errs86){if(typeof data36 === "string"){if(func2(data36) < 1){const err78 = {instancePath:instancePath+"/" + i0+"/officials/challenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/challenge/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}}else {const err79 = {instancePath:instancePath+"/" + i0+"/officials/challenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/challenge/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}}var valid14 = _errs86 === errors;}else {var valid14 = true;}if(valid14){if(data32.assistantChallenge !== undefined){let data37 = data32.assistantChallenge;const _errs88 = errors;if(errors === _errs88){if(typeof data37 === "string"){if(func2(data37) < 1){const err80 = {instancePath:instancePath+"/" + i0+"/officials/assistantChallenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantChallenge/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err80];}else {vErrors.push(err80);}errors++;}}else {const err81 = {instancePath:instancePath+"/" + i0+"/officials/assistantChallenge",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantChallenge/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err81];}else {vErrors.push(err81);}errors++;}}var valid14 = _errs88 === errors;}else {var valid14 = true;}if(valid14){if(data32.reserve !== undefined){let data38 = data32.reserve;const _errs90 = errors;if(errors === _errs90){if(typeof data38 === "string"){if(func2(data38) < 1){const err82 = {instancePath:instancePath+"/" + i0+"/officials/reserve",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/reserve/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err82];}else {vErrors.push(err82);}errors++;}}else {const err83 = {instancePath:instancePath+"/" + i0+"/officials/reserve",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/reserve/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err83];}else {vErrors.push(err83);}errors++;}}var valid14 = _errs90 === errors;}else {var valid14 = true;}if(valid14){if(data32.scorer !== undefined){let data39 = data32.scorer;const _errs92 = errors;if(errors === _errs92){if(typeof data39 === "string"){if(func2(data39) < 1){const err84 = {instancePath:instancePath+"/" + i0+"/officials/scorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/scorer/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err84];}else {vErrors.push(err84);}errors++;}}else {const err85 = {instancePath:instancePath+"/" + i0+"/officials/scorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/scorer/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err85];}else {vErrors.push(err85);}errors++;}}var valid14 = _errs92 === errors;}else {var valid14 = true;}if(valid14){if(data32.assistantScorer !== undefined){let data40 = data32.assistantScorer;const _errs94 = errors;if(errors === _errs94){if(typeof data40 === "string"){if(func2(data40) < 1){const err86 = {instancePath:instancePath+"/" + i0+"/officials/assistantScorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantScorer/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err86];}else {vErrors.push(err86);}errors++;}}else {const err87 = {instancePath:instancePath+"/" + i0+"/officials/assistantScorer",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/assistantScorer/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err87];}else {vErrors.push(err87);}errors++;}}var valid14 = _errs94 === errors;}else {var valid14 = true;}if(valid14){if(data32.linespersons !== undefined){let data41 = data32.linespersons;const _errs96 = errors;if(errors === _errs96){if(Array.isArray(data41)){if(data41.length > 4){const err88 = {instancePath:instancePath+"/" + i0+"/officials/linespersons",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/maxItems",keyword:"maxItems",params:{limit: 4},message:"must NOT have more than 4 items"};if(vErrors === null){vErrors = [err88];}else {vErrors.push(err88);}errors++;}else {var valid15 = true;const len5 = data41.length;for(let i5=0; i5<len5; i5++){let data42 = data41[i5];const _errs98 = errors;if(errors === _errs98){if(typeof data42 === "string"){if(func2(data42) < 1){const err89 = {instancePath:instancePath+"/" + i0+"/officials/linespersons/" + i5,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err89];}else {vErrors.push(err89);}errors++;}}else {const err90 = {instancePath:instancePath+"/" + i0+"/officials/linespersons/" + i5,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err90];}else {vErrors.push(err90);}errors++;}}var valid15 = _errs98 === errors;if(!valid15){break;}}}}else {const err91 = {instancePath:instancePath+"/" + i0+"/officials/linespersons",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/linespersons/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err91];}else {vErrors.push(err91);}errors++;}}var valid14 = _errs96 === errors;}else {var valid14 = true;}if(valid14){if(data32.ballCrew !== undefined){let data43 = data32.ballCrew;const _errs100 = errors;if(errors === _errs100){if(Array.isArray(data43)){if(data43.length > 100){const err92 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/maxItems",keyword:"maxItems",params:{limit: 100},message:"must NOT have more than 100 items"};if(vErrors === null){vErrors = [err92];}else {vErrors.push(err92);}errors++;}else {var valid16 = true;const len6 = data43.length;for(let i6=0; i6<len6; i6++){let data44 = data43[i6];const _errs102 = errors;if(errors === _errs102){if(typeof data44 === "string"){if(func2(data44) < 1){const err93 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew/" + i6,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err93];}else {vErrors.push(err93);}errors++;}}else {const err94 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew/" + i6,schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err94];}else {vErrors.push(err94);}errors++;}}var valid16 = _errs102 === errors;if(!valid16){break;}}}}else {const err95 = {instancePath:instancePath+"/" + i0+"/officials/ballCrew",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/properties/ballCrew/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err95];}else {vErrors.push(err95);}errors++;}}var valid14 = _errs100 === errors;}else {var valid14 = true;}}}}}}}}}}}}else {const err96 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err96];}else {vErrors.push(err96);}errors++;}}var _valid1 = _errs79 === errors;if(_valid1 && valid12){valid12 = false;passing1 = [passing1, 1];}else {if(_valid1){valid12 = true;passing1 = 1;}}if(!valid12){const err97 = {instancePath:instancePath+"/" + i0+"/officials",schemaPath:"#/items/oneOf/0/properties/officials/oneOf",keyword:"oneOf",params:{passingSchemas: passing1},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err97];}else {vErrors.push(err97);}errors++;}else {errors = _errs73;if(vErrors !== null){if(_errs73){vErrors.length = _errs73;}else {vErrors = null;}}}var valid3 = _errs72 === errors;}else {var valid3 = true;}if(valid3){if(data0.mvp !== undefined){let data45 = data0.mvp;const _errs104 = errors;if(errors === _errs104){if(typeof data45 === "string"){if(func2(data45) > 203){const err98 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/maxLength",keyword:"maxLength",params:{limit: 203},message:"must NOT have more than 203 characters"};if(vErrors === null){vErrors = [err98];}else {vErrors.push(err98);}errors++;}else {if(func2(data45) < 1){const err99 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err99];}else {vErrors.push(err99);}errors++;}}}else {const err100 = {instancePath:instancePath+"/" + i0+"/mvp",schemaPath:"#/items/oneOf/0/properties/mvp/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err100];}else {vErrors.push(err100);}errors++;}}var valid3 = _errs104 === errors;}else {var valid3 = true;}if(valid3){if(data0.manager !== undefined){let data46 = data0.manager;const _errs106 = errors;const _errs107 = errors;let valid17 = false;let passing2 = null;const _errs108 = errors;if(errors === _errs108){if(typeof data46 === "string"){if(func2(data46) > 1000){const err101 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err101];}else {vErrors.push(err101);}errors++;}else {if(func2(data46) < 1){const err102 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err102];}else {vErrors.push(err102);}errors++;}}}else {const err103 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err103];}else {vErrors.push(err103);}errors++;}}var _valid2 = _errs108 === errors;if(_valid2){valid17 = true;passing2 = 0;}const _errs110 = errors;if(errors === _errs110){if(data46 && typeof data46 == "object" && !Array.isArray(data46)){let missing6;if((data46.team === undefined) && (missing6 = "team")){const err104 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"};if(vErrors === null){vErrors = [err104];}else {vErrors.push(err104);}errors++;}else {const _errs112 = errors;for(const key5 in data46){if(!(key5 === "team")){const err105 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err105];}else {vErrors.push(err105);}errors++;break;}}if(_errs112 === errors){if(data46.team !== undefined){let data47 = data46.team;const _errs113 = errors;if(errors === _errs113){if(typeof data47 === "string"){if(func2(data47) > 1000){const err106 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err106];}else {vErrors.push(err106);}errors++;}else {if(func2(data47) < 1){const err107 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err107];}else {vErrors.push(err107);}errors++;}}}else {const err108 = {instancePath:instancePath+"/" + i0+"/manager/team",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/properties/team/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err108];}else {vErrors.push(err108);}errors++;}}}}}}else {const err109 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err109];}else {vErrors.push(err109);}errors++;}}var _valid2 = _errs110 === errors;if(_valid2 && valid17){valid17 = false;passing2 = [passing2, 1];}else {if(_valid2){valid17 = true;passing2 = 1;}}if(!valid17){const err110 = {instancePath:instancePath+"/" + i0+"/manager",schemaPath:"#/items/oneOf/0/properties/manager/oneOf",keyword:"oneOf",params:{passingSchemas: passing2},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err110];}else {vErrors.push(err110);}errors++;}else {errors = _errs107;if(vErrors !== null){if(_errs107){vErrors.length = _errs107;}else {vErrors = null;}}}var valid3 = _errs106 === errors;}else {var valid3 = true;}if(valid3){if(data0.friendly !== undefined){const _errs115 = errors;if(typeof data0.friendly !== "boolean"){const err111 = {instancePath:instancePath+"/" + i0+"/friendly",schemaPath:"#/items/oneOf/0/properties/friendly/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err111];}else {vErrors.push(err111);}errors++;}var valid3 = _errs115 === errors;}else {var valid3 = true;}if(valid3){if(data0.notes !== undefined){let data49 = data0.notes;const _errs117 = errors;if(errors === _errs117){if(typeof data49 === "string"){if(func2(data49) < 1){const err112 = {instancePath:instancePath+"/" + i0+"/notes",schemaPath:"#/items/oneOf/0/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err112];}else {vErrors.push(err112);}errors++;}}else {const err113 = {instancePath:instancePath+"/" + i0+"/notes",schemaPath:"#/items/oneOf/0/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err113];}else {vErrors.push(err113);}errors++;}}var valid3 = _errs117 === errors;}else {var valid3 = true;}}}}}}}}}}}}}}}}}}}}else {const err114 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err114];}else {vErrors.push(err114);}errors++;}}var _valid0 = _errs3 === errors;if(_valid0){valid1 = true;passing0 = 0;}const _errs119 = errors;if(errors === _errs119){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing7;if((data0.type === undefined) && (missing7 = "type")){const err115 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"};if(vErrors === null){vErrors = [err115];}else {vErrors.push(err115);}errors++;}else {const _errs121 = errors;for(const key6 in data0){if(!(((((key6 === "type") || (key6 === "start")) || (key6 === "date")) || (key6 === "duration")) || (key6 === "name"))){const err116 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err116];}else {vErrors.push(err116);}errors++;break;}}if(_errs121 === errors){if(data0.type !== undefined){let data50 = data0.type;const _errs122 = errors;if(typeof data50 !== "string"){const err117 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/1/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err117];}else {vErrors.push(err117);}errors++;}if(!(data50 === "break")){const err118 = {instancePath:instancePath+"/" + i0+"/type",schemaPath:"#/items/oneOf/1/properties/type/enum",keyword:"enum",params:{allowedValues: schema30.items.oneOf[1].properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err118];}else {vErrors.push(err118);}errors++;}var valid19 = _errs122 === errors;}else {var valid19 = true;}if(valid19){if(data0.start !== undefined){let data51 = data0.start;const _errs124 = errors;if(errors === _errs124){if(typeof data51 === "string"){if(!pattern4.test(data51)){const err119 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/1/properties/start/pattern",keyword:"pattern",params:{pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"},message:"must match pattern \""+"^([0-1][0-9]|2[0-3]):[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err119];}else {vErrors.push(err119);}errors++;}}else {const err120 = {instancePath:instancePath+"/" + i0+"/start",schemaPath:"#/items/oneOf/1/properties/start/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err120];}else {vErrors.push(err120);}errors++;}}var valid19 = _errs124 === errors;}else {var valid19 = true;}if(valid19){if(data0.date !== undefined){let data52 = data0.date;const _errs126 = errors;if(errors === _errs126){if(errors === _errs126){if(typeof data52 === "string"){if(!(formats4.validate(data52))){const err121 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/1/properties/date/format",keyword:"format",params:{format: "date"},message:"must match format \""+"date"+"\""};if(vErrors === null){vErrors = [err121];}else {vErrors.push(err121);}errors++;}}else {const err122 = {instancePath:instancePath+"/" + i0+"/date",schemaPath:"#/items/oneOf/1/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err122];}else {vErrors.push(err122);}errors++;}}}var valid19 = _errs126 === errors;}else {var valid19 = true;}if(valid19){if(data0.duration !== undefined){let data53 = data0.duration;const _errs128 = errors;if(errors === _errs128){if(typeof data53 === "string"){if(!pattern6.test(data53)){const err123 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/1/properties/duration/pattern",keyword:"pattern",params:{pattern: "^[0-9]+:[0-5][0-9]$"},message:"must match pattern \""+"^[0-9]+:[0-5][0-9]$"+"\""};if(vErrors === null){vErrors = [err123];}else {vErrors.push(err123);}errors++;}}else {const err124 = {instancePath:instancePath+"/" + i0+"/duration",schemaPath:"#/items/oneOf/1/properties/duration/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err124];}else {vErrors.push(err124);}errors++;}}var valid19 = _errs128 === errors;}else {var valid19 = true;}if(valid19){if(data0.name !== undefined){let data54 = data0.name;const _errs130 = errors;if(errors === _errs130){if(typeof data54 === "string"){if(func2(data54) > 1000){const err125 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"};if(vErrors === null){vErrors = [err125];}else {vErrors.push(err125);}errors++;}else {if(func2(data54) < 1){const err126 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err126];}else {vErrors.push(err126);}errors++;}}}else {const err127 = {instancePath:instancePath+"/" + i0+"/name",schemaPath:"#/items/oneOf/1/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err127];}else {vErrors.push(err127);}errors++;}}var valid19 = _errs130 === errors;}else {var valid19 = true;}}}}}}}}else {const err128 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err128];}else {vErrors.push(err128);}errors++;}}var _valid0 = _errs119 === errors;if(_valid0 && valid1){valid1 = false;passing0 = [passing0, 1];}else {if(_valid0){valid1 = true;passing0 = 1;}}if(!valid1){const err129 = {instancePath:instancePath+"/" + i0,schemaPath:"#/items/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err129];}else {vErrors.push(err129);}errors++;validate28.errors = vErrors;return false;}else {errors = _errs2;if(vErrors !== null){if(_errs2){vErrors.length = _errs2;}else {vErrors = null;}}}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate28.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate28.errors = vErrors;return errors === 0;}function validate27(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/stageUpdate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((((key0 === "name") || (key0 === "notes")) || (key0 === "description")) || (key0 === "ifUnknown"))){validate27.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){let data0 = data.name;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 1000){validate27.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data0) < 1){validate27.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate27.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data1 = data.notes;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) < 1){validate27.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate27.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){let data2 = data.description;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data2)){var valid1 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs8 = errors;if(errors === _errs8){if(typeof data3 === "string"){if(func2(data3) < 1){validate27.errors = [{instancePath:instancePath+"/description/" + i0,schemaPath:"#/properties/description/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate27.errors = [{instancePath:instancePath+"/description/" + i0,schemaPath:"#/properties/description/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid1 = _errs8 === errors;if(!valid1){break;}}}else {validate27.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.ifUnknown !== undefined){let data4 = data.ifUnknown;const _errs10 = errors;if(errors === _errs10){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){let missing0;if((data4.description === undefined) && (missing0 = "description")){validate27.errors = [{instancePath:instancePath+"/ifUnknown",schemaPath:"#/properties/ifUnknown/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs12 = errors;for(const key1 in data4){if(!((key1 === "description") || (key1 === "matches"))){validate27.errors = [{instancePath:instancePath+"/ifUnknown",schemaPath:"#/properties/ifUnknown/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs12 === errors){if(data4.description !== undefined){let data5 = data4.description;const _errs13 = errors;if(errors === _errs13){if(Array.isArray(data5)){var valid3 = true;const len1 = data5.length;for(let i1=0; i1<len1; i1++){let data6 = data5[i1];const _errs15 = errors;if(errors === _errs15){if(typeof data6 === "string"){if(func2(data6) < 1){validate27.errors = [{instancePath:instancePath+"/ifUnknown/description/" + i1,schemaPath:"#/properties/ifUnknown/properties/description/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate27.errors = [{instancePath:instancePath+"/ifUnknown/description/" + i1,schemaPath:"#/properties/ifUnknown/properties/description/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid3 = _errs15 === errors;if(!valid3){break;}}}else {validate27.errors = [{instancePath:instancePath+"/ifUnknown/description",schemaPath:"#/properties/ifUnknown/properties/description/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid2 = _errs13 === errors;}else {var valid2 = true;}if(valid2){if(data4.matches !== undefined){const _errs17 = errors;if(!(validate28(data4.matches, {instancePath:instancePath+"/ifUnknown/matches",parentData:data4,parentDataProperty:"matches",rootData}))){vErrors = vErrors === null ? validate28.errors : vErrors.concat(validate28.errors);errors = vErrors.length;}var valid2 = _errs17 === errors;}else {var valid2 = true;}}}}}else {validate27.errors = [{instancePath:instancePath+"/ifUnknown",schemaPath:"#/properties/ifUnknown/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}}}}}}else {validate27.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate27.errors = vErrors;return errors === 0;}export const validateTeamCreate = validate30;const schema33 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/teamCreate","description":"The details of the new team","type":"object","additionalProperties":false,"properties":{"id":{"description":"An ID for the team, e.g. 'TM1'.  This is used in the rest of the instance document to specify the team so must be unique within the competition.  It must contain only ASCII printable characters excluding \" : { } ? =","type":"string","minLength":1,"maxLength":100,"pattern":"^((?![\":{}?=])[\\x20-\\x7F])+$"},"name":{"description":"The name for the team","type":"string","minLength":1,"maxLength":1000},"club":{"description":"The ID of the club this team is in","type":"string","minLength":1,"maxLength":100},"notes":{"description":"Free form string to add notes about a team.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}},"required":["name"]};function validate30(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/teamCreate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.name === undefined) && (missing0 = "name")){validate30.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "id") || (key0 === "name")) || (key0 === "club")) || (key0 === "notes"))){validate30.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 100){validate30.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data0) < 1){validate30.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data0)){validate30.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/pattern",keyword:"pattern",params:{pattern: "^((?![\":{}?=])[\\x20-\\x7F])+$"},message:"must match pattern \""+"^((?![\":{}?=])[\\x20-\\x7F])+$"+"\""}];return false;}}}}else {validate30.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) > 1000){validate30.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data1) < 1){validate30.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate30.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.club !== undefined){let data2 = data.club;const _errs6 = errors;if(errors === _errs6){if(typeof data2 === "string"){if(func2(data2) > 100){validate30.errors = [{instancePath:instancePath+"/club",schemaPath:"#/properties/club/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data2) < 1){validate30.errors = [{instancePath:instancePath+"/club",schemaPath:"#/properties/club/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate30.errors = [{instancePath:instancePath+"/club",schemaPath:"#/properties/club/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data3 = data.notes;const _errs8 = errors;if(errors === _errs8){if(typeof data3 === "string"){if(func2(data3) < 1){validate30.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate30.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}}}}}}}else {validate30.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate30.errors = vErrors;return errors === 0;}export const validateTeamUpdate = validate31;const schema34 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://github.com/monkeysppp/VBCompetitions-API/1.0.0/teamUpdate","description":"Details on a team","type":"object","additionalProperties":false,"properties":{"name":{"description":"The name for the team","type":"string","minLength":1,"maxLength":1000},"club":{"description":"The ID of the club this team is in","type":"string","minLength":1,"maxLength":100},"notes":{"description":"Free form string to add notes about a team.  This can be used for arbitrary content that various implementations can use","type":"string","minLength":1}}};function validate31(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://github.com/monkeysppp/VBCompetitions-API/1.0.0/teamUpdate" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!(((key0 === "name") || (key0 === "club")) || (key0 === "notes"))){validate31.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){let data0 = data.name;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) > 1000){validate31.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}else {if(func2(data0) < 1){validate31.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate31.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.club !== undefined){let data1 = data.club;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func2(data1) > 100){validate31.errors = [{instancePath:instancePath+"/club",schemaPath:"#/properties/club/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}else {if(func2(data1) < 1){validate31.errors = [{instancePath:instancePath+"/club",schemaPath:"#/properties/club/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate31.errors = [{instancePath:instancePath+"/club",schemaPath:"#/properties/club/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.notes !== undefined){let data2 = data.notes;const _errs6 = errors;if(errors === _errs6){if(typeof data2 === "string"){if(func2(data2) < 1){validate31.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate31.errors = [{instancePath:instancePath+"/notes",schemaPath:"#/properties/notes/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}}else {validate31.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate31.errors = vErrors;return errors === 0;}